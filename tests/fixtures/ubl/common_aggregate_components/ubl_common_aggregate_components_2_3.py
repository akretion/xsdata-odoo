# Copyright 2022 Akretion - RaphaÃ«l Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

from .ubl_common_extension_components_2_3 import Ublextensions


__NAMESPACE__ = (
    "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
)


class ActivityPropertyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Activity Property. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a name/value pair for a property of an
    inventory planning activity.</ns1:Definition>
    <ns1:ObjectClass>Activity Property</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.activitypropertytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityPropertyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="The name of this activity property.",
        xsd_required=True,
        xsd_type="NameType",
    )

    ubl23_Value = fields.Char(
        string="The value of this activity property.",
        xsd_required=True,
        xsd_type="ValueType",
    )


class AddressLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Address Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an unstructured address
    line.</ns1:Definition>
    <ns1:ObjectClass>Address Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.addresslinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AddressLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Line = fields.Char(
        string="An address line expressed as unstructured text",
        xsd_required=True,
        xsd_type="LineType",
        help="An address line expressed as unstructured text.",
    )


class AirTransportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Air Transport. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to identify a specific aircraft used for
    transportation.</ns1:Definition>
    <ns1:ObjectClass>Air Transport</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.airtransporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AirTransportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AircraftID = fields.Char(
        string="An identifer for a specific aircraft",
        xsd_required=True,
        xsd_type="AircraftIDType",
        help="An identifer for a specific aircraft.",
    )


class AuctionTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Auction Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the terms to be fulfilled by tenderers if
    an auction is to be executed before the awarding of a
    tender.</ns1:Definition>
    <ns1:ObjectClass>Auction Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.auctiontermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AuctionTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AuctionConstraintIndicator = fields.Boolean(
        string="AuctionConstraintIndicator",
        help=(
            "Indicates whether an electronic auction will be used before the "
            "awarding of a contract (true) or not (false)."
        ),
    )

    ubl23_JustificationDescription = fields.Char(
        string="JustificationDescription",
        xsd_type="JustificationDescriptionType",
        help=(
            "Text describing a justification for the use of an auction in "
            "awarding the tender."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text for tenderers describing terms governing the auction",
        xsd_type="DescriptionType",
        help="Text for tenderers describing terms governing the auction.",
    )

    ubl23_ProcessDescription = fields.Char(
        string="Text describing the auction process.", xsd_type="ProcessDescriptionType"
    )

    ubl23_ConditionsDescription = fields.Char(
        string="ConditionsDescription",
        xsd_type="ConditionsDescriptionType",
        help=(
            "Text describing the conditions under which the tenderers will be "
            "able to bid as part of the auction."
        ),
    )

    ubl23_ElectronicDeviceDescription = fields.Char(
        string="Text describing an electronic device used for the auction",
        xsd_type="ElectronicDeviceDescriptionType",
        help=(
            "Text describing an electronic device used for the auction, "
            "including associated connectivity specifications."
        ),
    )

    ubl23_AuctionURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="AuctionURIType",
        help=(
            "The Uniform Resource Identifier (URI) of the electronic device "
            "used for the auction."
        ),
    )


class AwardingCriterionResponseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Awarding Criterion Response.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>Defines the response for an awarding criterion from the
    tendering party.</ns1:Definition>
    <ns1:ObjectClass>Awarding Criterion Response</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.awardingcriterionresponsetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingCriterionResponseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identification of this awarding criterion response",
        xsd_type="IDType",
        help="An identification of this awarding criterion response.",
    )

    ubl23_AwardingCriterionID = fields.Char(
        string="An identifer of the awarding criterion being referred to",
        xsd_type="AwardingCriterionIDType",
        help="An identifer of the awarding criterion being referred to.",
    )

    ubl23_AwardingCriterionDescription = fields.Char(
        string="Describes the awarding criterion.",
        xsd_type="AwardingCriterionDescriptionType",
    )

    ubl23_Description = fields.Char(
        string="Describes the awarding criterion response",
        xsd_type="DescriptionType",
        help="Describes the awarding criterion response.",
    )

    ubl23_Quantity = fields.Float(
        string="Quantity",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="Specifies the quantity tendered for this awarding criterion.",
    )

    ubl23_Amount = fields.Monetary(
        string="Amount",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help=("Specifies the monetary amount tendered for this awarding " "criterion."),
    )

    ubl23_SubordinateAwardingCriterionResponse = fields.One2many(
        "ubl.23.subordinateawardingcriterionresponse",
        "ubl23_SubordinateAwardingCriterionResponse_AwardingCriterionResponseType_id",
        string="Defines responses to any subsidiary awarding criterion",
        help="Defines responses to any subsidiary awarding criterion.",
    )


class AwardingCriterionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Awarding Criterion. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a criterion from the contracting party that
    will be taken into account when awarding a contract. An awarding criterion
    can be objective, when it can be evaluated following a formula, or
    subjective, when human analysis is required.</ns1:Definition>
    <ns1:ObjectClass>Awarding Criterion</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.awardingcriteriontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingCriterionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="Identifies a specific awarding criterion",
        xsd_type="IDType",
        help="Identifies a specific awarding criterion.",
    )

    ubl23_AwardingCriterionTypeCode = fields.Char(
        string="A code used to define this awarding criterion",
        xsd_type="AwardingCriterionTypeCodeType",
        help="A code used to define this awarding criterion. ",
    )

    ubl23_Name = fields.Char(
        string="The name of this awarding criterion.", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="A description of the awarding criterion",
        xsd_type="DescriptionType",
        help="A description of the awarding criterion.",
    )

    ubl23_WeightNumeric = fields.Float(
        string="WeightNumeric",
        xsd_type="WeightNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number defining the comparative weighting assigned to this "
            "awarding criterion, to enable formulaic evaluation."
        ),
    )

    ubl23_Weight = fields.Char(
        string="Weight",
        xsd_type="WeightType",
        help=(
            "A description of the comparative weighting for this awarding " "criterion."
        ),
    )

    ubl23_CalculationExpression = fields.Char(
        string="CalculationExpression",
        xsd_type="CalculationExpressionType",
        help=(
            "The mathematical expression that will be used to evaluate this "
            "criterion."
        ),
    )

    ubl23_CalculationExpressionCode = fields.Char(
        string="CalculationExpressionCode",
        xsd_type="CalculationExpressionCodeType",
        help=(
            "A code identifying the mathematical expression that will be used "
            "to evaluate this criterion."
        ),
    )

    ubl23_MinimumQuantity = fields.Float(
        string="The minimum quantity for an awarding criterion",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The minimum quantity for an awarding criterion.",
    )

    ubl23_MaximumQuantity = fields.Float(
        string="The maximum quantity for an awarding criterion",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The maximum quantity for an awarding criterion.",
    )

    ubl23_MinimumAmount = fields.Float(
        string="The minimum monetary amount for an awarding criterion",
        xsd_type="MinimumAmountType",
        digits=(
            16,
            4,
        ),
        help="The minimum monetary amount for an awarding criterion.",
    )

    ubl23_MaximumAmount = fields.Float(
        string="The maximum monetary amount for an awarding criterion",
        xsd_type="MaximumAmountType",
        digits=(
            16,
            4,
        ),
        help="The maximum monetary amount for an awarding criterion.",
    )

    ubl23_MinimumImprovementBid = fields.Char(
        string="MinimumImprovementBid",
        xsd_type="MinimumImprovementBidType",
        help=(
            "Describes the minimum improvement bid for this awarding criterion"
            " when used in an auction."
        ),
    )

    ubl23_SubordinateAwardingCriterion = fields.One2many(
        "ubl.23.subordinateawardingcriterion",
        "ubl23_SubordinateAwardingCriterion_AwardingCriterionType_id",
        string="Defines any subsidiary awarding criterion",
        help="Defines any subsidiary awarding criterion.",
    )


class CardAccountType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Card Account. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a credit card, debit card, or charge card
    account.</ns1:Definition>
    <ns1:ObjectClass>Card Account</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.cardaccounttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CardAccountType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PrimaryAccountNumberID = fields.Char(
        string="An identifier of the card (e.g.",
        xsd_required=True,
        xsd_type="PrimaryAccountNumberIDType",
        help=("An identifier of the card (e.g., the Primary Account Number " "(PAN))."),
    )

    ubl23_NetworkID = fields.Char(
        string="NetworkID",
        xsd_required=True,
        xsd_type="NetworkIDType",
        help=(
            "An identifier for the financial service network provider of the " "card."
        ),
    )

    ubl23_CardTypeCode = fields.Char(
        string="A mutually agreed code signifying the type of card",
        xsd_type="CardTypeCodeType",
        help=(
            "A mutually agreed code signifying the type of card. Examples of "
            "types are debit, credit and purchasing"
        ),
    )

    ubl23_ValidityStartDate = fields.Date(
        string="The date from which the card is valid",
        help="The date from which the card is valid.",
    )

    ubl23_ExpiryDate = fields.Date(string="The date on which the card expires.")

    ubl23_IssuerID = fields.Char(
        string="An identifier for the institution issuing the card",
        xsd_type="IssuerIDType",
        help="An identifier for the institution issuing the card.",
    )

    ubl23_IssueNumberID = fields.Char(
        string="An identifier for the card",
        xsd_type="IssueNumberIDType",
        help="An identifier for the card, specified by the issuer.",
    )

    ubl23_CV2ID = fields.Char(
        string="An identifier for the Card Verification Value",
        xsd_type="CV2IDType",
        help=(
            "An identifier for the Card Verification Value (often found on the"
            " reverse of the card itself)."
        ),
    )

    ubl23_CardChipCode = fields.Char(
        string="CardChipCode",
        xsd_type="CardChipCodeType",
        help=(
            "A mutually agreed code to distinguish between CHIP and MAG STRIPE"
            " cards."
        ),
    )

    ubl23_ChipApplicationID = fields.Char(
        string="ChipApplicationID",
        xsd_type="ChipApplicationIDType",
        help=(
            "An identifier on the chip card for the application that provides "
            "the quoted information; an AID (application ID)."
        ),
    )

    ubl23_HolderName = fields.Char(
        string="The name of the cardholder.", xsd_type="HolderNameType"
    )

    ubl23_RoleCode = fields.Char(
        string="The role of this card or the card holder",
        xsd_type="RoleCodeType",
        help=(
            "The role of this card or the card holder (e.g., the buyer, when "
            "the card is used as a payment means to pay for an item), "
            "expressed as a code."
        ),
    )


class CatalogueReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Catalogue Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a catalogue.</ns1:Definition>
    <ns1:ObjectClass>Catalogue Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.cataloguereferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for a specific catalogue",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for a specific catalogue.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for a specific catalogue",
        xsd_type="UUIDType",
        help="A universally unique identifier for a specific catalogue.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which the catalogue was issued",
        help="The date on which the catalogue was issued.",
    )

    ubl23_RevisionDate = fields.Date(
        string="RevisionDate",
        help=(
            "The date on which the information in the catalogue was last " "revised."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the catalogue.", xsd_type="DescriptionType"
    )

    ubl23_VersionID = fields.Char(
        string="An identifier for the current version of the catalogue",
        xsd_type="VersionIDType",
        help="An identifier for the current version of the catalogue.",
    )

    ubl23_PreviousVersionID = fields.Char(
        string="PreviousVersionID",
        xsd_type="PreviousVersionIDType",
        help=(
            "An identifier for the previous version of the catalogue that is "
            "superseded by this version."
        ),
    )


class TypeificationCategoryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Classification Category.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a category within a classification
    scheme.</ns1:Definition>
    <ns1:ObjectClass>Classification Category</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.typeificationcategorytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TypeificationCategoryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="The name of this category within the classification scheme",
        xsd_type="NameType",
        help="The name of this category within the classification scheme.",
    )

    ubl23_CodeValue = fields.Char(
        string="CodeValue",
        xsd_type="CodeValueType",
        help=(
            "The value of a code used to identify this category within the "
            "classification scheme."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this category.", xsd_type="DescriptionType"
    )

    ubl23_CategorizesClassificationCategory = fields.One2many(
        "ubl.23.categorizestypeificationcategory",
        "ubl23_CategorizesClassificationCategory_ClassificationCategoryType_id",
        string="A recursive description of a subcategory of this category",
        help="A recursive description of a subcategory of this category.",
    )


class ClauseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Clause. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a clause (a distinct article or provision) in
    a contract, treaty, will, or other formal or legal written document
    requiring compliance.</ns1:Definition>
    <ns1:ObjectClass>Clause</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.clausetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ClauseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this clause.", xsd_type="IDType")

    ubl23_Content = fields.Char(
        string="The text of this clause.", xsd_type="ContentType"
    )


class CommodityTypeificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Commodity Classification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the classification of a
    commodity.</ns1:Definition>
    <ns1:ObjectClass>Commodity Classification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.commoditytypeificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CommodityTypeificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_NatureCode = fields.Char(
        string="NatureCode",
        xsd_type="NatureCodeType",
        help=(
            "A code defined by a specific maintenance agency signifying the "
            "high-level nature of the commodity."
        ),
    )

    ubl23_CargoTypeCode = fields.Char(
        string="CargoTypeCode",
        xsd_type="CargoTypeCodeType",
        help=(
            "A mutually agreed code signifying the type of cargo for purposes "
            "of commodity classification."
        ),
    )

    ubl23_CommodityCode = fields.Char(
        string="CommodityCode",
        xsd_type="CommodityCodeType",
        help=(
            "The harmonized international commodity code for cross border and "
            "regulatory (customs and trade statistics) purposes."
        ),
    )

    ubl23_ItemClassificationCode = fields.Char(
        string="ItemClassificationCode",
        xsd_type="ItemClassificationCodeType",
        help="A code signifying the trade classification of the commodity.",
    )


class CommunicationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Communication. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a means of communication.</ns1:Definition>
    <ns1:ObjectClass>Communication</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.communicationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CommunicationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ChannelCode = fields.Char(
        string="The method of communication",
        xsd_type="ChannelCodeType",
        help="The method of communication, expressed as a code.",
    )

    ubl23_Channel = fields.Char(
        string="The method of communication (Channel)",
        xsd_type="ChannelType",
        help="The method of communication, expressed as text.",
    )

    ubl23_Value = fields.Char(
        string="An identifying value (phone number",
        xsd_type="ValueType",
        help=(
            "An identifying value (phone number, email address, etc.) for this"
            " channel of communication"
        ),
    )


class ConditionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Condition. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a measurable condition of an
    object.</ns1:Definition>
    <ns1:ObjectClass>Condition</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.conditiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConditionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AttributeID = fields.Char(
        string="AttributeID",
        xsd_required=True,
        xsd_type="AttributeIDType",
        help=("An identifier for the attribute that applies to the condition."),
    )

    ubl23_Measure = fields.Char(string="The measurement value.", xsd_type="MeasureType")

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help="Text describing the attribute that applies to the condition.",
    )

    ubl23_MinimumMeasure = fields.Char(
        string="MinimumMeasure",
        xsd_type="MinimumMeasureType",
        help=("The minimum value in a range of measurement for this condition."),
    )

    ubl23_MaximumMeasure = fields.Char(
        string="MaximumMeasure",
        xsd_type="MaximumMeasureType",
        help=("The maximum value in a range of measurement for this condition."),
    )


class ConsumptionAverageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Average. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an average consumption as a monetary
    amount.</ns1:Definition>
    <ns1:ObjectClass>Consumption Average</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionaveragetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionAverageType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AverageAmount = fields.Float(
        string="The average monetary amount of the consumption",
        xsd_type="AverageAmountType",
        digits=(
            16,
            4,
        ),
        help="The average monetary amount of the consumption.",
    )

    ubl23_Description = fields.Char(
        string="A description of the average consumed",
        xsd_type="DescriptionType",
        help="A description of the average consumed.",
    )


class ConsumptionCorrectionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Correction.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The Statement of correction, for examples heating
    correction.</ns1:Definition>
    <ns1:ObjectClass>Consumption Correction</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptioncorrectiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionCorrectionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CorrectionType = fields.Char(
        string="Statement for the correction type.", xsd_type="CorrectionTypeType"
    )

    ubl23_CorrectionTypeCode = fields.Char(
        string="Statement at the code for the correction type",
        xsd_type="CorrectionTypeCodeType",
        help="Statement at the code for the correction type.",
    )

    ubl23_MeterNumber = fields.Char(
        string="Statement for meter number.", xsd_type="MeterNumberType"
    )

    ubl23_GasPressureQuantity = fields.Float(
        string="Correction of the gas pressure.",
        xsd_type="GasPressureQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ActualTemperatureReductionQuantity = fields.Float(
        string="Statement for the actuel heating correction temperature",
        xsd_type="ActualTemperatureReductionQuantityType",
        digits=(
            16,
            4,
        ),
        help="Statement for the actuel heating correction temperature.",
    )

    ubl23_NormalTemperatureReductionQuantity = fields.Float(
        string="NormalTemperatureReductionQuantity",
        xsd_type="NormalTemperatureReductionQuantityType",
        digits=(
            16,
            4,
        ),
        help=("Statement for the standard for heating correction temperature."),
    )

    ubl23_DifferenceTemperatureReductionQuantity = fields.Float(
        string="Deviation from standard heating correction",
        xsd_type="DifferenceTemperatureReductionQuantityType",
        digits=(
            16,
            4,
        ),
        help="Deviation from standard heating correction.",
    )

    ubl23_Description = fields.Char(
        string="Description related to the corrections",
        xsd_type="DescriptionType",
        help="Description related to the corrections.",
    )

    ubl23_CorrectionUnitAmount = fields.Float(
        string="Correction per MWH per degree C.",
        xsd_type="CorrectionUnitAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ConsumptionEnergyQuantity = fields.Float(
        string="Your consumpt for district heating energy",
        xsd_type="ConsumptionEnergyQuantityType",
        digits=(
            16,
            4,
        ),
        help="Your consumpt for district heating energy.",
    )

    ubl23_ConsumptionWaterQuantity = fields.Float(
        string="Your consumpt for district heating water",
        xsd_type="ConsumptionWaterQuantityType",
        digits=(
            16,
            4,
        ),
        help="Your consumpt for district heating water.",
    )

    ubl23_CorrectionAmount = fields.Float(
        string="Your correction for heating correction",
        xsd_type="CorrectionAmountType",
        digits=(
            16,
            4,
        ),
        help="Your correction for heating correction.",
    )


class ContractExecutionRequirementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contract Execution Requirement.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a requirement for execution of a
    contract.</ns1:Definition>
    <ns1:ObjectClass>Contract Execution Requirement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractexecutionrequirementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractExecutionRequirementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(string="A name for this requirement.", xsd_type="NameType")

    ubl23_ExecutionRequirementCode = fields.Char(
        string="ExecutionRequirementCode",
        xsd_type="ExecutionRequirementCodeType",
        help=(
            "A code signifying a type of requirement to be fulfiled by the "
            "economic operator."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this requirement.", xsd_type="DescriptionType"
    )


class ContractingActivityType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contracting Activity.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The nature of the type of business of the
    organization.</ns1:Definition>
    <ns1:ObjectClass>Contracting Activity</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractingactivitytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingActivityType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ActivityTypeCode = fields.Char(
        string="ActivityTypeCode",
        xsd_type="ActivityTypeCodeType",
        help=(
            "A code specifying the nature of the type of business of the "
            "organization."
        ),
    )

    ubl23_ActivityType = fields.Char(
        string="The nature of the type of business of the organization",
        xsd_type="ActivityTypeType",
        help=(
            "The nature of the type of business of the organization, expressed"
            " as text."
        ),
    )


class ContractingPartyTypeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contracting Party Type.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The type of contracting party that is independent of its
    role.</ns1:Definition>
    <ns1:ObjectClass>Contracting Party Type</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractingpartytypetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingPartyTypeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PartyTypeCode = fields.Char(
        string="PartyTypeCode",
        xsd_type="PartyTypeCodeType",
        help=(
            "A code specifying the type of party that is independent of its " "role."
        ),
    )

    ubl23_PartyType = fields.Char(
        string="The type of party that is independent of its role",
        xsd_type="PartyTypeType",
        help=(
            "The type of party that is independent of its role, expressed as " "text."
        ),
    )


class ContractingRepresentationTypeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contracting Representation Type.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The type of representation the party has acting for the
    Contracting party</ns1:Definition>
    <ns1:ObjectClass>Contracting Representation Type</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractingrepresentationtypetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingRepresentationTypeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RepresentationTypeCode = fields.Char(
        string="RepresentationTypeCode",
        xsd_type="RepresentationTypeCodeType",
        help=(
            "A code specifying the type of representation empowering the party"
            " to act on behalf of a third party"
        ),
    )

    ubl23_RepresentationType = fields.Char(
        string="RepresentationType",
        xsd_type="RepresentationTypeType",
        help=(
            "The type of representation empowering the party to act on behalf "
            "of a third party, expressed as text."
        ),
    )


class ContractingSystemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contracting System. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the contracting system. If the procedure is
    individual (nonrepetitive), this class should not be used.</ns1:Definition>
    <ns1:ObjectClass>Contracting System</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractingsystemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingSystemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the contracting system",
        xsd_type="IDType",
        help="An identifier for the contracting system.",
    )

    ubl23_ContractingSystemTypeCode = fields.Char(
        string="A code signifying the type of contracting system",
        xsd_type="ContractingSystemTypeCodeType",
        help=(
            "A code signifying the type of contracting system (e.g., framework"
            " agreement, dynamic purchasing system). "
        ),
    )

    ubl23_Description = fields.Char(
        string="The description of the contracting system", xsd_type="DescriptionType"
    )


class CountryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Country. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a country.</ns1:Definition>
    <ns1:ObjectClass>Country</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.countrytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CountryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_IdentificationCode = fields.Char(
        string="A code signifying this country.", xsd_type="IdentificationCodeType"
    )

    ubl23_Name = fields.Char(string="The name of this country.", xsd_type="NameType")


class CreditAccountType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Credit Account. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to identify a credit account for sales on
    account.</ns1:Definition>
    <ns1:ObjectClass>Credit Account</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.creditaccounttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CreditAccountType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AccountID = fields.Char(
        string="An identifier for this credit account",
        xsd_required=True,
        xsd_type="AccountIDType",
        help="An identifier for this credit account.",
    )


class DeliveryUnitType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Delivery Unit. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a delivery unit.</ns1:Definition>
    <ns1:ObjectClass>Delivery Unit</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.deliveryunittype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryUnitType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_BatchQuantity = fields.Float(
        string="BatchQuantity",
        xsd_required=True,
        xsd_type="BatchQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of ordered Items that constitutes a batch for "
            "delivery purposes."
        ),
    )

    ubl23_ConsumerUnitQuantity = fields.Float(
        string="ConsumerUnitQuantity",
        xsd_type="ConsumerUnitQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of units in the Delivery Unit expressed in the units"
            " used by the consumer."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="HazardousRiskIndicator",
        help=(
            "An indication that the transported goods are subject to an "
            "international regulation concerning the carriage of dangerous "
            "goods (true) or not (false)."
        ),
    )


class DimensionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Dimension. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a measurable dimension (length, mass, weight,
    volume, or area) of an item.</ns1:Definition>
    <ns1:ObjectClass>Dimension</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.dimensiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DimensionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AttributeID = fields.Char(
        string="AttributeID",
        xsd_required=True,
        xsd_type="AttributeIDType",
        help=("An identifier for the attribute to which the measure applies."),
    )

    ubl23_Measure = fields.Char(string="The measurement value.", xsd_type="MeasureType")

    ubl23_Description = fields.Char(
        string="Text describing the measurement attribute",
        xsd_type="DescriptionType",
        help="Text describing the measurement attribute.",
    )

    ubl23_MinimumMeasure = fields.Char(
        string="MinimumMeasure",
        xsd_type="MinimumMeasureType",
        help=("The minimum value in a range of measurement of this dimension."),
    )

    ubl23_MaximumMeasure = fields.Char(
        string="MaximumMeasure",
        xsd_type="MaximumMeasureType",
        help=("The maximum value in a range of measurement of this dimension."),
    )


class DocumentMetadataType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Document Metadata. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the metadata of a specific business
    document based on any document format (e.g. UBL, EDIFACT,
    ...).</ns1:Definition>
    <ns1:ObjectClass>Document Metadata</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.documentmetadatatype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentMetadataType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for the document.", xsd_type="IDType")

    ubl23_FormatID = fields.Char(
        string="An identifier for the document format",
        xsd_required=True,
        xsd_type="FormatIDType",
        help=(
            "An identifier for the document format (e.g. standard business "
            "vocabularies)."
        ),
    )

    ubl23_VersionID = fields.Char(
        string="An identifier for a precise version of a document format",
        xsd_required=True,
        xsd_type="VersionIDType",
        help="An identifier for a precise version of a document format.",
    )

    ubl23_SchemaURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="SchemaURIType",
        help=(
            "The Uniform Resource Identifier (URI) of a schema definition for "
            "the business document (e.g. a namespace URI for XML schemas, a "
            "message ID for non-xml legacy documents)."
        ),
    )

    ubl23_DocumentTypeCode = fields.Char(
        string="The type of document",
        xsd_type="DocumentTypeCodeType",
        help="The type of document, expressed as a code.",
    )


class EconomicOperatorRoleType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Economic Operator Role.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the tenderer contracting
    role.</ns1:Definition>
    <ns1:ObjectClass>Economic Operator Role</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.economicoperatorroletype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorRoleType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RoleCode = fields.Char(
        string="A code specifying the role of the party",
        xsd_type="RoleCodeType",
        help="A code specifying the role of the party.",
    )

    ubl23_RoleDescription = fields.Char(
        string="A textual description of the party role",
        xsd_type="RoleDescriptionType",
        help="A textual description of the party role.",
    )


class EncryptionCertificatePathChainType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Encryption Certificate Path Chain.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>Details of a certificate path chain used in
    encryption.</ns1:Definition>
    <ns1:ObjectClass>Encryption Certificate Path Chain</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.encryptioncertificatepathchaintype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionCertificatePathChainType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Value = fields.Char(
        string="The path chain value manifest in the instance",
        xsd_type="ValueType",
        help="The path chain value manifest in the instance.",
    )

    ubl23_URI = fields.Char(
        string="The path chain value references external to the instance",
        xsd_type="URIType",
        help="The path chain value references external to the instance.",
    )


class EncryptionSymmetricAlgorithmType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Encryption Symmetric Algorithm.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>Details of a symmetric algorithm used in
    encryption.</ns1:Definition>
    <ns1:ObjectClass>Encryption Symmetric Algorithm</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.encryptionsymmetricalgorithmtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionSymmetricAlgorithmType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="A human",
        xsd_type="IDType",
        help="A human-readable identifier the algorithm.",
    )

    ubl23_OID = fields.Char(
        string="The object identifier for the algorithm",
        xsd_type="OIDType",
        help="The object identifier for the algorithm.",
    )


class EventCommentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Event Comment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define comments about a retail
    event.</ns1:Definition>
    <ns1:ObjectClass>Event Comment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.eventcommenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventCommentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Comment = fields.Char(
        string="Text commenting on the event.",
        xsd_required=True,
        xsd_type="CommentType",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which this comment was made",
        help="The date on which this comment was made.",
    )


class EventTacticEnumerationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Event Tactic Enumeration.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a set of codes that describes a retail
    tactic.</ns1:Definition>
    <ns1:ObjectClass>Event Tactic Enumeration</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.eventtacticenumerationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventTacticEnumerationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ConsumerIncentiveTacticTypeCode = fields.Char(
        string="A code signifying the type of consumer incentive",
        xsd_type="ConsumerIncentiveTacticTypeCodeType",
        help=(
            "A code signifying the type of consumer incentive. Examples "
            "include:Free Item, Temporary Price reduction"
        ),
    )

    ubl23_DisplayTacticTypeCode = fields.Char(
        string="A code signifying the type of display",
        xsd_type="DisplayTacticTypeCodeType",
        help=(
            "A code signifying the type of display. Examples Include: "
            "ON_COUNTER_DISPLAY, FLOOR_GRAPHICS FLOOR_STACK_DISPLAY"
        ),
    )

    ubl23_FeatureTacticTypeCode = fields.Char(
        string="A code signifying a special feature",
        xsd_type="FeatureTacticTypeCodeType",
        help=(
            "A code signifying a special feature. Examples Include: BILLBOARD "
            "DIRECT_MAIL_AD, FLYER"
        ),
    )

    ubl23_TradeItemPackingLabelingTypeCode = fields.Char(
        string="TradeItemPackingLabelingTypeCode",
        xsd_type="TradeItemPackingLabelingTypeCodeType",
        help=(
            "A code signifying the type of trade item packing and labeling. "
            "Examples Include: BONUS_SIZE CO_BRANDED_TRADE_ITEM"
        ),
    )


class EvidenceSuppliedType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Evidence Supplied. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A reference to evidence.</ns1:Definition>
    <ns1:ObjectClass>Evidence Supplied</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.evidencesuppliedtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvidenceSuppliedType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="The identifier of the referenced evidence",
        xsd_required=True,
        xsd_type="IDType",
        help="The identifier of the referenced evidence.",
    )


class ExternalReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>External Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an external object, such as a document
    stored at a remote location.</ns1:Definition>
    <ns1:ObjectClass>External Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.externalreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExternalReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_URI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="URIType",
        help=(
            "The Uniform Resource Identifier (URI) that identifies the "
            "external object as an Internet resource."
        ),
    )

    ubl23_DocumentHash = fields.Char(
        string="A hash value for the externally stored object",
        xsd_type="DocumentHashType",
        help="A hash value for the externally stored object.",
    )

    ubl23_HashAlgorithmMethod = fields.Char(
        string="HashAlgorithmMethod",
        xsd_type="HashAlgorithmMethodType",
        help=(
            "A hash algorithm used to calculate the hash value of the "
            "externally stored object."
        ),
    )

    ubl23_ExpiryDate = fields.Date(
        string="ExpiryDate",
        help=(
            "The date on which availability of the resource can no longer be "
            "relied upon."
        ),
    )

    ubl23_MimeCode = fields.Char(
        string="A code signifying the mime type of the external object",
        xsd_type="MimeCodeType",
        help="A code signifying the mime type of the external object.",
    )

    ubl23_FormatCode = fields.Char(
        string="A code signifying the format of the external object",
        xsd_type="FormatCodeType",
        help="A code signifying the format of the external object.",
    )

    ubl23_EncodingCode = fields.Char(
        string="EncodingCode",
        xsd_type="EncodingCodeType",
        help=(
            "A code signifying the encoding/decoding algorithm used with the "
            "external object."
        ),
    )

    ubl23_CharacterSetCode = fields.Char(
        string="CharacterSetCode",
        xsd_type="CharacterSetCodeType",
        help="A code signifying the character set of an external document.",
    )

    ubl23_FileName = fields.Char(
        string="The file name of the external object",
        xsd_type="FileNameType",
        help="The file name of the external object.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the external object.", xsd_type="DescriptionType"
    )


class FeeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Fee. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a revenue.</ns1:Definition>
    <ns1:ObjectClass>Fee</ns1:ObjectClass>
    <ns1:Examples>In the case of concession, the revenue coming from the users of
    the concession (e.g. fees and fines) .</ns1:Examples>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.feetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FeeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_FeeTypeCode = fields.Char(
        string="A code signifying the type of this fee",
        xsd_type="FeeTypeCodeType",
        help="A code signifying the type of this fee.",
    )

    ubl23_FeeAmount = fields.Float(
        string="The amount of a fee.",
        xsd_type="FeeAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_FeeDescription = fields.Char(
        string="Text describing this fee.", xsd_type="FeeDescriptionType"
    )


class ForecastExceptionCriterionLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Forecast Exception Criterion Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>Establishes the criterion for one of the three types of
    exceptions. This class provides criteria for the kind of forecast
    exception, the identification of the purpose of the forecast, the source of
    data and the time basis criterion for the exception.</ns1:Definition>
    <ns1:ObjectClass>Forecast Exception Criterion Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.forecastexceptioncriterionlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastExceptionCriterionLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ForecastPurposeCode = fields.Char(
        string="ForecastPurposeCode",
        xsd_required=True,
        xsd_type="ForecastPurposeCodeType",
        help=(
            "A description of the purpose for the forecast that is assigned to"
            " each forecast data item exception criterion."
        ),
    )

    ubl23_ForecastTypeCode = fields.Char(
        string="A description of a Forecast selected from a list",
        xsd_required=True,
        xsd_type="ForecastTypeCodeType",
        help="A description of a Forecast selected from a list.",
    )

    ubl23_ComparisonDataSourceCode = fields.Char(
        string="If it is a forecast comparison exception",
        xsd_type="ComparisonDataSourceCodeType",
        help=(
            "If it is a forecast comparison exception, this value indicates "
            "the other source of information."
        ),
    )

    ubl23_DataSourceCode = fields.Char(
        string="Indication of the partner who provides the information",
        xsd_required=True,
        xsd_type="DataSourceCodeType",
        help="Indication of the partner who provides the information.",
    )

    ubl23_TimeDeltaDaysQuantity = fields.Float(
        string="Time basis in days for the Exception",
        xsd_type="TimeDeltaDaysQuantityType",
        digits=(
            16,
            4,
        ),
        help="Time basis in days for the Exception.",
    )


class ForecastExceptionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Forecast Exception. Details</ns1:DictionaryEntryName>
    <ns1:Definition>As explained in Exception Criteria Line: Three types of
    exception criteria can be defined, Operational, Metric or Forecast
    Exceptions. This class provides criteria for forecast exception type: the
    identification of the purpose of the forecast, the source of data and the
    time basis criteria for the exception.</ns1:Definition>
    <ns1:ObjectClass>Forecast Exception</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.forecastexceptiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastExceptionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ForecastPurposeCode = fields.Char(
        string="It is either Sales forecast or Order Forecast",
        xsd_required=True,
        xsd_type="ForecastPurposeCodeType",
        help=(
            "It is either Sales forecast or Order Forecast. Definition can be "
            "changed like: The purpose of the Forecast (either sales or "
            "order), about which an exception criteria is being defined."
        ),
    )

    ubl23_ForecastTypeCode = fields.Char(
        string="A code signifying the type of forecast",
        xsd_required=True,
        xsd_type="ForecastTypeCodeType",
        help=(
            "A code signifying the type of forecast. Example of values "
            "are:BASE PROMOTIONAL SEASONAL TOTAL"
        ),
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which the forecast was issued",
        xsd_required=True,
        help="The date on which the forecast was issued.",
    )

    ubl23_DataSourceCode = fields.Char(
        string="DataSourceCode",
        xsd_required=True,
        xsd_type="DataSourceCodeType",
        help="A code signifying the partner who provides this information.",
    )

    ubl23_ComparisonDataCode = fields.Char(
        string="ComparisonDataCode",
        xsd_type="ComparisonDataCodeType",
        help=(
            "A code signifying the partner providing the information in this "
            "forecast exception."
        ),
    )

    ubl23_ComparisonForecastIssueDate = fields.Date(
        string="The date on which this comparison forecast was issued",
        help="The date on which this comparison forecast was issued.",
    )


class GoodsItemContainerType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Goods Item Container.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining how goods items are split across transport
    equipment.</ns1:Definition>
    <ns1:ObjectClass>Goods Item Container</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.goodsitemcontainertype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemContainerType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this goods item container",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this goods item container.",
    )

    ubl23_Quantity = fields.Float(
        string="Quantity",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of goods items loaded into or onto one piece of "
            "transport equipment as a total consignment or part of a "
            "consignment."
        ),
    )

    ubl23_TransportEquipment = fields.One2many(
        "ubl.23.transportequipment",
        "ubl23_TransportEquipment_GoodsItemContainerType_id",
        string="TransportEquipment",
        help=("A piece of transport equipment used to contain a single goods " "item."),
    )


class ItemComparisonType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Comparison. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to provide information about price and quantity of an
    item for use in price comparisons based on price, quantity, or
    measurements.</ns1:Definition>
    <ns1:ObjectClass>Item Comparison</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itemcomparisontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemComparisonType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PriceAmount = fields.Monetary(
        string="The price for the Item Comparison",
        xsd_type="PriceAmountType",
        currency_field="brl_currency_id",
    )

    ubl23_Quantity = fields.Float(
        string="The quantity for which this comparison is valid",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity for which this comparison is valid.",
    )


class ItemPropertyGroupType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Property Group. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a property group or
    classification.</ns1:Definition>
    <ns1:ObjectClass>Item Property Group</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itempropertygrouptype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPropertyGroupType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this group of item properties",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this group of item properties.",
    )

    ubl23_Name = fields.Char(
        string="The name of this item property group",
        xsd_type="NameType",
        help="The name of this item property group.",
    )

    ubl23_ImportanceCode = fields.Char(
        string="ImportanceCode",
        xsd_type="ImportanceCodeType",
        help=(
            "A code signifying the importance of this property group in using "
            "it to describe a required Item."
        ),
    )


class ItemPropertyRangeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Property Range. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a range of values for an item
    property.</ns1:Definition>
    <ns1:ObjectClass>Item Property Range</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itempropertyrangetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPropertyRangeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MinimumValue = fields.Char(
        string="The minimum value in this range of values",
        xsd_type="MinimumValueType",
        help="The minimum value in this range of values.",
    )

    ubl23_MaximumValue = fields.Char(
        string="The maximum value in this range of values",
        xsd_type="MaximumValueType",
        help="The maximum value in this range of values.",
    )


class LanguageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Language. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a language.</ns1:Definition>
    <ns1:ObjectClass>Language</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.languagetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LanguageType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this language.", xsd_type="IDType")

    ubl23_Name = fields.Char(string="The name of this language.", xsd_type="NameType")

    ubl23_LocaleCode = fields.Char(
        string="LocaleCode",
        xsd_type="LocaleCodeType",
        help="A code signifying the locale in which this language is used.",
    )


class LocationCoordinateType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Location Coordinate. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for defining a set of geographical coordinates
    (apparently misnamed).</ns1:Definition>
    <ns1:ObjectClass>Location Coordinate</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.locationcoordinatetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LocationCoordinateType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CoordinateSystemCode = fields.Char(
        string="A code signifying the location system used",
        xsd_type="CoordinateSystemCodeType",
        help="A code signifying the location system used.",
    )

    ubl23_LatitudeDegreesMeasure = fields.Char(
        string="LatitudeDegreesMeasure",
        xsd_type="LatitudeDegreesMeasureType",
        help=("The degree component of a latitude measured in degrees and " "minutes."),
    )

    ubl23_LatitudeMinutesMeasure = fields.Char(
        string="LatitudeMinutesMeasure",
        xsd_type="LatitudeMinutesMeasureType",
        help=(
            "The minutes component of a latitude measured in degrees and "
            "minutes (modulo 60)."
        ),
    )

    ubl23_LatitudeDirectionCode = fields.Char(
        string="LatitudeDirectionCode",
        xsd_type="LatitudeDirectionCodeType",
        help=(
            "A code signifying the direction of latitude measurement from the "
            "equator (north or south)."
        ),
    )

    ubl23_LongitudeDegreesMeasure = fields.Char(
        string="LongitudeDegreesMeasure",
        xsd_type="LongitudeDegreesMeasureType",
        help=(
            "The degree component of a longitude measured in degrees and " "minutes."
        ),
    )

    ubl23_LongitudeMinutesMeasure = fields.Char(
        string="LongitudeMinutesMeasure",
        xsd_type="LongitudeMinutesMeasureType",
        help=(
            "The minutes component of a longitude measured in degrees and "
            "minutes (modulo 60)."
        ),
    )

    ubl23_LongitudeDirectionCode = fields.Char(
        string="LongitudeDirectionCode",
        xsd_type="LongitudeDirectionCodeType",
        help=(
            "A code signifying the direction of longitude measurement from the"
            " prime meridian (east or west)."
        ),
    )

    ubl23_AltitudeMeasure = fields.Char(
        string="The altitude of the location.", xsd_type="AltitudeMeasureType"
    )


class MessageDeliveryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Message Delivery. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe how a message is delivered
    (routed).</ns1:Definition>
    <ns1:ObjectClass>Message Delivery</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.messagedeliverytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MessageDeliveryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ProtocolID = fields.Char(
        string="ProtocolID",
        xsd_type="ProtocolIDType",
        help=(
            "An identifier for the protocol to be used within this message " "delivery."
        ),
    )

    ubl23_EnvelopeTypeCode = fields.Char(
        string="EnvelopeTypeCode",
        xsd_type="EnvelopeTypeCodeType",
        help=(
            "A code signifying the type of envelope to be used within this "
            "message delivery (e.g. OASIS BDX Business Document Envelope)."
        ),
    )

    ubl23_EndpointURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="EndpointURIType",
        help=(
            "The Uniform Resource Identifier (URI) of the access point (e.g. "
            "an HTTP URL including the port)."
        ),
    )


class MeterPropertyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Meter Property. Details</ns1:DictionaryEntryName>
    <ns1:Definition>The name of this meter property.</ns1:Definition>
    <ns1:ObjectClass>Meter Property</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.meterpropertytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeterPropertyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="The name of this meter property",
        xsd_type="NameType",
        help="The name of this meter property, expressed as a code.",
    )

    ubl23_NameCode = fields.Char(
        string="The value of this meter property",
        xsd_type="NameCodeType",
        help="The value of this meter property, expressed as text.",
    )

    ubl23_Value = fields.Char(
        string="The value of this meter property (Value)",
        xsd_type="ValueType",
        help="The value of this meter property, expressed as a quantity.",
    )

    ubl23_ValueQuantity = fields.Float(
        string="The value of this meter property (ValueQuantity)",
        xsd_type="ValueQuantityType",
        digits=(
            16,
            4,
        ),
        help="The value of this meter property, expressed as a quantity.",
    )

    ubl23_ValueQualifier = fields.Char(
        string="An additional value to qualify the value of the meter",
        xsd_type="ValueQualifierType",
    )


class MeterReadingType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Meter Reading. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a meter reading.</ns1:Definition>
    <ns1:ObjectClass>Meter Reading</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.meterreadingtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeterReadingType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this meter reading",
        xsd_type="IDType",
        help="An identifier for this meter reading.",
    )

    ubl23_MeterReadingType = fields.Char(
        string="The type of this meter reading",
        xsd_type="MeterReadingTypeType",
        help="The type of this meter reading, expressed as text.",
    )

    ubl23_MeterReadingTypeCode = fields.Char(
        string="The type of this meter reading (MeterReadingTypeCode)",
        xsd_type="MeterReadingTypeCodeType",
        help="The type of this meter reading, expressed as a code.",
    )

    ubl23_PreviousMeterReadingDate = fields.Date(
        string="The date of the previous meter reading",
        xsd_required=True,
        help="The date of the previous meter reading.",
    )

    ubl23_PreviousMeterQuantity = fields.Float(
        string="The quantity of the previous meter reading",
        xsd_required=True,
        xsd_type="PreviousMeterQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of the previous meter reading.",
    )

    ubl23_LatestMeterReadingDate = fields.Date(
        string="The date of the latest meter reading",
        xsd_required=True,
        help="The date of the latest meter reading.",
    )

    ubl23_LatestMeterQuantity = fields.Float(
        string="The quantity of the latest meter reading",
        xsd_required=True,
        xsd_type="LatestMeterQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of the latest meter reading.",
    )

    ubl23_PreviousMeterReadingMethod = fields.Char(
        string="The method used for the previous meter reading",
        xsd_type="PreviousMeterReadingMethodType",
        help=("The method used for the previous meter reading, expressed as " "text."),
    )

    ubl23_PreviousMeterReadingMethodCode = fields.Char(
        string="PreviousMeterReadingMethodCode",
        xsd_type="PreviousMeterReadingMethodCodeType",
        help=(
            "The method used for the previous meter reading, expressed as a " "code."
        ),
    )

    ubl23_LatestMeterReadingMethod = fields.Char(
        string="The method used for the latest meter reading",
        xsd_type="LatestMeterReadingMethodType",
        help=("The method used for the latest meter reading, expressed as text."),
    )

    ubl23_LatestMeterReadingMethodCode = fields.Char(
        string="LatestMeterReadingMethodCode",
        xsd_type="LatestMeterReadingMethodCodeType",
        help=("The method used for the latest meter reading, expressed as a " "code."),
    )

    ubl23_MeterReadingComments = fields.Char(
        string="Text containing comments on this meter reading",
        xsd_type="MeterReadingCommentsType",
        help="Text containing comments on this meter reading.",
    )

    ubl23_DeliveredQuantity = fields.Float(
        string="DeliveredQuantity",
        xsd_required=True,
        xsd_type="DeliveredQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "Consumption in the period from PreviousMeterReadingDate to "
            "LatestMeterReadingDate."
        ),
    )


class MonetaryTotalType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Monetary Total. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a monetary total.</ns1:Definition>
    <ns1:ObjectClass>Monetary Total</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.monetarytotaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MonetaryTotalType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The monetary amount of an extended transaction line",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount of an extended transaction line, net of tax "
            "and settlement discounts, but inclusive of any applicable "
            "rounding amount."
        ),
    )

    ubl23_TaxExclusiveAmount = fields.Float(
        string="TaxExclusiveAmount",
        xsd_type="TaxExclusiveAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount of an extended transaction line, exclusive of"
            " taxes."
        ),
    )

    ubl23_TaxInclusiveAmount = fields.Float(
        string="TaxInclusiveAmount",
        xsd_type="TaxInclusiveAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount including taxes; the sum of payable amount "
            "and prepaid amount."
        ),
    )

    ubl23_AllowanceTotalAmount = fields.Float(
        string="The total monetary amount of all allowances",
        xsd_type="AllowanceTotalAmountType",
        digits=(
            16,
            4,
        ),
        help="The total monetary amount of all allowances.",
    )

    ubl23_ChargeTotalAmount = fields.Float(
        string="The total monetary amount of all charges",
        xsd_type="ChargeTotalAmountType",
        digits=(
            16,
            4,
        ),
        help="The total monetary amount of all charges.",
    )

    ubl23_WithholdingTaxTotalAmount = fields.Float(
        string="The total withholding tax amount.",
        xsd_type="WithholdingTaxTotalAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_PrepaidAmount = fields.Float(
        string="The total prepaid monetary amount.",
        xsd_type="PrepaidAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_PayableRoundingAmount = fields.Float(
        string="The rounding amount",
        xsd_type="PayableRoundingAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The rounding amount (positive or negative) added to produce the "
            "line extension amount."
        ),
    )

    ubl23_PayableAmount = fields.Float(
        string="The amount of the monetary total to be paid",
        xsd_required=True,
        xsd_type="PayableAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount of the monetary total to be paid.",
    )

    ubl23_PayableAlternativeAmount = fields.Float(
        string="PayableAlternativeAmount",
        xsd_type="PayableAlternativeAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount of the monetary total to be paid, expressed in an "
            "alternative currency."
        ),
    )


class PartyIdentificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Party Identification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an identifier for a party.</ns1:Definition>
    <ns1:ObjectClass>Party Identification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.partyidentificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyIdentificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the party.", xsd_required=True, xsd_type="IDType"
    )


class PartyNameType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Party Name. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for defining the name of a party.</ns1:Definition>
    <ns1:ObjectClass>Party Name</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.partynametype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyNameType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="The name of the party.", xsd_required=True, xsd_type="NameType"
    )


class PaymentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Payment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a payment.</ns1:Definition>
    <ns1:ObjectClass>Payment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.paymenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this payment.", xsd_type="IDType")

    ubl23_PaidAmount = fields.Float(
        string="The amount of this payment.",
        xsd_type="PaidAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ReceivedDate = fields.Date(
        string="The date on which this payment was received",
        help="The date on which this payment was received.",
    )

    ubl23_PaidDate = fields.Date(
        string="The date on which this payment was made",
        help="The date on which this payment was made.",
    )

    ubl23_InstructionID = fields.Char(
        string="An identifier for the payment instruction",
        xsd_type="InstructionIDType",
        help="An identifier for the payment instruction.",
    )


class PeriodType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Period. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a period of time.</ns1:Definition>
    <ns1:ObjectClass>Period</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.periodtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PeriodType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_StartDate = fields.Date(
        string="The date on which this period begins",
        help="The date on which this period begins.",
    )

    ubl23_EndDate = fields.Date(string="The date on which this period ends.")

    ubl23_DurationMeasure = fields.Char(
        string="The duration of this period",
        xsd_type="DurationMeasureType",
        help="The duration of this period, expressed as an ISO 8601 code.",
    )

    ubl23_DescriptionCode = fields.Char(
        string="A description of this period",
        xsd_type="DescriptionCodeType",
        help="A description of this period, expressed as a code.",
    )

    ubl23_Description = fields.Char(
        string="A description of this period (Description)",
        xsd_type="DescriptionType",
        help="A description of this period, expressed as text.",
    )


class PhysicalAttributeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Physical Attribute. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a physical attribute.</ns1:Definition>
    <ns1:ObjectClass>Physical Attribute</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.physicalattributetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PhysicalAttributeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AttributeID = fields.Char(
        string="An identifier for this physical attribute",
        xsd_required=True,
        xsd_type="AttributeIDType",
        help="An identifier for this physical attribute.",
    )

    ubl23_PositionCode = fields.Char(
        string="A code signifying the position of this physical attribute",
        xsd_type="PositionCodeType",
        help="A code signifying the position of this physical attribute.",
    )

    ubl23_DescriptionCode = fields.Char(
        string="A description of the physical attribute",
        xsd_type="DescriptionCodeType",
        help=("A description of the physical attribute, expressed as a code."),
    )

    ubl23_Description = fields.Char(
        string="A description of the physical attribute (Description)",
        xsd_type="DescriptionType",
        help="A description of the physical attribute, expressed as text.",
    )


class PortCallPurposeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Port Call Purpose. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the purpose of a port
    call.</ns1:Definition>
    <ns1:ObjectClass>Port Call Purpose</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.portcallpurposetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCallPurposeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PurposeTypeCode = fields.Char(
        string="The purpose of this port call",
        xsd_type="PurposeTypeCodeType",
        help="The purpose of this port call, expressed as a code.",
    )

    ubl23_PurposeType = fields.Char(
        string="The purpose of this port call (PurposeType)",
        xsd_type="PurposeTypeType",
        help="The purpose of this port call, expressed as a text.",
    )

    ubl23_Description = fields.Char(
        string="A description of the purpose of the port call",
        xsd_type="DescriptionType",
        help="A description of the purpose of the port call.",
    )


class PostAwardProcessType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Post Award Process. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a post award process. These processes
    following the agreement on a contract for supply of goods or services ( for
    example, after the awarding of a tender).</ns1:Definition>
    <ns1:ObjectClass>Post Award Process</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.postawardprocesstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PostAwardProcessType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ElectronicCatalogueUsageIndicator = fields.Boolean(
        string="ElectronicCatalogueUsageIndicator",
        help=(
            "An indicator to specify whether an electronic catalogue will be "
            "used during the post award phase."
        ),
    )

    ubl23_ElectronicInvoiceAcceptedIndicator = fields.Boolean(
        string="ElectronicInvoiceAcceptedIndicator",
        help=(
            "An indicator on whether the electronic invoice is allowed for "
            "this process."
        ),
    )

    ubl23_ElectronicOrderUsageIndicator = fields.Boolean(
        string="ElectronicOrderUsageIndicator",
        help=(
            "An indicator on whether electronic ordering shall be used in the "
            "post award process."
        ),
    )

    ubl23_ElectronicPaymentUsageIndicator = fields.Boolean(
        string="ElectronicPaymentUsageIndicator",
        help=(
            "An indicator on whether electronic payment shall be used in the "
            "post award process."
        ),
    )


class PrizeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Prize. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe something valuable offered or striven for
    in competition.</ns1:Definition>
    <ns1:ObjectClass>Prize</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.prizetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PrizeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RankCode = fields.Char(
        string="RankCode",
        xsd_required=True,
        xsd_type="RankCodeType",
        help=("The relative position in the competition associated with a prize."),
    )

    ubl23_ValueAmount = fields.Float(
        string="The monetary value amount of a prize",
        xsd_type="ValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The monetary value amount of a prize.",
    )

    ubl23_Description = fields.Char(
        string="Text providing more information about this prize",
        xsd_type="DescriptionType",
        help="Text providing more information about this prize.",
    )


class ProcessJustificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Process Justification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a justification for the choice of tendering
    process.</ns1:Definition>
    <ns1:ObjectClass>Process Justification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.processjustificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcessJustificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PreviousCancellationReasonCode = fields.Char(
        string="PreviousCancellationReasonCode",
        xsd_type="PreviousCancellationReasonCodeType",
        help=(
            "A code signifying the type of the previous tendering process "
            "(which is now being cancelled)."
        ),
    )

    ubl23_ProcessReasonCode = fields.Char(
        string="ProcessReasonCode",
        xsd_type="ProcessReasonCodeType",
        help=(
            "The reason why the contracting authority has followed a "
            "particular tendering procedure for the awarding of a contract, "
            "expressed as a code."
        ),
    )

    ubl23_ProcessReason = fields.Char(
        string="ProcessReason",
        xsd_type="ProcessReasonType",
        help=(
            "The reason why the contracting authority has followed a "
            "particular tendering procedure for the awarding of a contract, "
            "expressed as text."
        ),
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("Text providing justification for the selection of this process."),
    )


class ProcurementAdditionalTypeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Procurement Additional Type.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe additional types for a procurement
    project</ns1:Definition>
    <ns1:ObjectClass>Procurement Additional Type</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.procurementadditionaltypetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementAdditionalTypeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ProcurementTypeCode = fields.Char(
        string="A code signifying the type of procurement project",
        xsd_type="ProcurementTypeCodeType",
        help=(
            "A code signifying the type of procurement project (e.g., goods, "
            "works, services)."
        ),
    )

    ubl23_ProcurementType = fields.Char(
        string="Tthe type of procurement project",
        xsd_type="ProcurementTypeType",
        help=(
            "Tthe type of procurement project (e.g., goods, works, services), "
            "expressed as text."
        ),
    )


class ProcurementProjectLotReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Procurement Project Lot Reference.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to reference to a lot identifier.</ns1:Definition>
    <ns1:ObjectClass>Procurement Project Lot Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.procurementprojectlotreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProjectLotReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this procurement project lot",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this procurement project lot.",
    )


class RailTransportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Rail Transport. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining details about a train wagon used as a means of
    transport.</ns1:Definition>
    <ns1:ObjectClass>Rail Transport</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.railtransporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RailTransportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TrainID = fields.Char(
        string="An identifier for the train used as the means of transport",
        xsd_required=True,
        xsd_type="TrainIDType",
        help="An identifier for the train used as the means of transport.",
    )

    ubl23_RailCarID = fields.Char(
        string="RailCarID",
        xsd_type="RailCarIDType",
        help=(
            "An identifier for the rail car on the train used as the means of "
            "transport."
        ),
    )


class RegulationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Regulation. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a regulation.</ns1:Definition>
    <ns1:ObjectClass>Regulation</ns1:ObjectClass>
    <ns1:Examples>Points to regulation at atomic level</ns1:Examples>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.regulationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RegulationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(string="A name for this regulation.", xsd_type="NameType")

    ubl23_LegalReference = fields.Char(
        string="Text describing a legal reference.", xsd_type="LegalReferenceType"
    )

    ubl23_OntologyURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="OntologyURIType",
        help=(
            "The Uniform Resource Identifier (URI) of an ontology related to "
            "this regulation."
        ),
    )


class RelatedItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Related Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the relationship to an item different from
    the item associated with the item line in which RelatedItem is
    used.</ns1:Definition>
    <ns1:ObjectClass>Related Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.relateditemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RelatedItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the related item.", xsd_type="IDType"
    )

    ubl23_Quantity = fields.Float(
        string="The quantity that applies to the relationship",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity that applies to the relationship.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the relationship.", xsd_type="DescriptionType"
    )


class ResponseValueType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Response Value. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the criterion requirement response
    value.</ns1:Definition>
    <ns1:ObjectClass>Response Value</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.responsevaluetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponseValueType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_type="IDType",
        help=("An identifier to refer to the criterion requirement response " "value."),
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("A description of the response value to the criterion requirement."),
    )

    ubl23_Response = fields.Char(
        string="Response",
        xsd_type="ResponseType",
        help="A text or name used as a reply to the criterion requirement.",
    )

    ubl23_ResponseAmount = fields.Float(
        string="An amount used as a reply to the criterion requirement",
        xsd_type="ResponseAmountType",
        digits=(
            16,
            4,
        ),
        help="An amount used as a reply to the criterion requirement.",
    )

    ubl23_ResponseBinaryObject = fields.Char(
        string="A binary graphic",
        xsd_type="ResponseBinaryObjectType",
        help=(
            "A binary graphic, picture, sound or video object used as a reply "
            "to the criterion requirement."
        ),
    )

    ubl23_ResponseCode = fields.Char(
        string="A code used as a reply to the criterion requirement",
        xsd_type="ResponseCodeType",
        help="A code used as a reply to the criterion requirement.",
    )

    ubl23_ResponseDate = fields.Date(
        string="A date used as a reply to the criterion requirement",
        help="A date used as a reply to the criterion requirement.",
    )

    ubl23_ResponseID = fields.Char(
        string="An identifier used as a reply to the criterion requirement",
        xsd_type="ResponseIDType",
        help="An identifier used as a reply to the criterion requirement.",
    )

    ubl23_ResponseIndicator = fields.Boolean(
        string="An indicator used as a reply to the criterion requirement",
        help="An indicator used as a reply to the criterion requirement.",
    )

    ubl23_ResponseMeasure = fields.Char(
        string="A measure used as a reply to the criterion requirement",
        xsd_type="ResponseMeasureType",
        help="A measure used as a reply to the criterion requirement.",
    )

    ubl23_ResponseNumeric = fields.Float(
        string="A number",
        xsd_type="ResponseNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number, rate or percent used as a reply to the criterion " "requirement."
        ),
    )

    ubl23_ResponseQuantity = fields.Float(
        string="A quantity used as a reply to the criterion requirement",
        xsd_type="ResponseQuantityType",
        digits=(
            16,
            4,
        ),
        help="A quantity used as a reply to the criterion requirement.",
    )

    ubl23_ResponseURI = fields.Char(
        string="A URI value used as a reply to the criterion requirement",
        xsd_type="ResponseURIType",
        help="A URI value used as a reply to the criterion requirement.",
    )


class ResultOfVerificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Result Of Verification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the result of an attempt to verify a
    signature.</ns1:Definition>
    <ns1:ObjectClass>Result Of Verification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.resultofverificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResultOfVerificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ValidatorID = fields.Char(
        string="An identifier for the organization",
        xsd_type="ValidatorIDType",
        help=(
            "An identifier for the organization, person, service, or server "
            "that verified the signature."
        ),
    )

    ubl23_ValidationResultCode = fields.Char(
        string="A code signifying the result of the verification",
        xsd_type="ValidationResultCodeType",
        help="A code signifying the result of the verification.",
    )

    ubl23_ValidationDate = fields.Date(
        string="The date upon which verification took place",
        help="The date upon which verification took place.",
    )

    ubl23_ValidateProcess = fields.Char(
        string="The verification process.", xsd_type="ValidateProcessType"
    )

    ubl23_ValidateTool = fields.Char(
        string="The tool used to verify the signature",
        xsd_type="ValidateToolType",
        help="The tool used to verify the signature.",
    )

    ubl23_ValidateToolVersion = fields.Char(
        string="The version of the tool used to verify the signature",
        xsd_type="ValidateToolVersionType",
        help="The version of the tool used to verify the signature.",
    )

    ubl23_SignatoryParty = fields.Many2one(
        comodel_name="ubl.23.signatoryparty", string="The signing party."
    )


class RoadTransportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Road Transport. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for identifying a vehicle used for road
    transport.</ns1:Definition>
    <ns1:ObjectClass>Road Transport</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.roadtransporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RoadTransportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LicensePlateID = fields.Char(
        string="The license plate identifier of this vehicle",
        xsd_required=True,
        xsd_type="LicensePlateIDType",
        help="The license plate identifier of this vehicle.",
    )


class SanitaryMeasureType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Sanitary Measure. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing a plan, action or meassure that has been
    implemented for sanitary reasons.</ns1:Definition>
    <ns1:ObjectClass>Sanitary Measure</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.sanitarymeasuretype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SanitaryMeasureType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SanitaryMeasureTypeCode = fields.Char(
        string="A code decribing the type of sanitary meassure",
        xsd_required=True,
        xsd_type="SanitaryMeasureTypeCodeType",
        help="A code decribing the type of sanitary meassure.",
    )

    ubl23_ApplicationDate = fields.Date(
        string="The date this sanitary meassure was applied",
        help="The date this sanitary meassure was applied.",
    )


class SecondaryHazardType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Secondary Hazard. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a secondary hazard associated with a
    hazardous item.</ns1:Definition>
    <ns1:ObjectClass>Secondary Hazard</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.secondaryhazardtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecondaryHazardType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this secondary hazard",
        xsd_type="IDType",
        help="An identifier for this secondary hazard.",
    )

    ubl23_PlacardNotation = fields.Char(
        string="PlacardNotation",
        xsd_type="PlacardNotationType",
        help=(
            "Text of the placard notation corresponding to the hazard class of"
            " this secondary hazard. Can also be the hazard identification "
            "number of the orange placard (upper part) required on the means "
            "of transport."
        ),
    )

    ubl23_PlacardEndorsement = fields.Char(
        string="PlacardEndorsement",
        xsd_type="PlacardEndorsementType",
        help=(
            "Text of the placard endorsement for this secondary hazard that is"
            " to be shown on the shipping papers for a hazardous item. Can "
            "also be used for the number of the orange placard (lower part) "
            "required on the means of transport."
        ),
    )

    ubl23_EmergencyProceduresCode = fields.Char(
        string="EmergencyProceduresCode",
        xsd_type="EmergencyProceduresCodeType",
        help=(
            "A code signifying the emergency procedures for this secondary " "hazard."
        ),
    )

    ubl23_Extension = fields.Char(
        string="Additional information about the hazardous substance",
        xsd_type="ExtensionType",
        help=(
            "Additional information about the hazardous substance, which can "
            "be used (for example) to specify the type of regulatory "
            "requirements that apply to this secondary hazard."
        ),
    )


class SecurityClearanceTermType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Security Clearance Term.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to specify security clearance terms.</ns1:Definition>
    <ns1:ObjectClass>Security Clearance Term</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.securityclearancetermtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecurityClearanceTermType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Code = fields.Char(
        string="A code signifying the security clearance requirement",
        xsd_type="CodeType",
        help="A code signifying the security clearance requirement.",
    )

    ubl23_Description = fields.Char(
        string="A description of the security clearance requirement",
        xsd_type="DescriptionType",
        help="A description of the security clearance requirement.",
    )


class SecurityMeasureType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Security Measure. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a security measure</ns1:Definition>
    <ns1:ObjectClass>Security Measure</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.securitymeasuretype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecurityMeasureType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this security measure",
        xsd_type="IDType",
        help="An identifier for this security measure.",
    )

    ubl23_Description = fields.Char(
        string="The description of this security measure", xsd_type="DescriptionType"
    )


class ServiceFrequencyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Service Frequency. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to specify which day of the week a transport service is
    operational.</ns1:Definition>
    <ns1:ObjectClass>Service Frequency</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.servicefrequencytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceFrequencyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_WeekDayCode = fields.Char(
        string="A day of the week",
        xsd_required=True,
        xsd_type="WeekDayCodeType",
        help="A day of the week, expressed as code.",
    )


class ShareholderPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Shareholder Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a shareholder party.</ns1:Definition>
    <ns1:ObjectClass>Shareholder Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shareholderpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShareholderPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PartecipationPercent = fields.Char(
        string="The shareholder participation",
        xsd_type="PartecipationPercentType",
        help="The shareholder participation, expressed as a percentage.",
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party", string="The shareholder party."
    )


class ShipRequirementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ship Requirement. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a requirement for a ship</ns1:Definition>
    <ns1:ObjectClass>Ship Requirement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shiprequirementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipRequirementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this ship requirement",
        xsd_type="IDType",
        help="An identifier for this ship requirement.",
    )

    ubl23_Description = fields.Char(
        string="The description of this ship requirement", xsd_type="DescriptionType"
    )


class SocialMediaProfileType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Social Media Profile.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a social media profile.</ns1:Definition>
    <ns1:ObjectClass>Social Media Profile</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.socialmediaprofiletype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SocialMediaProfileType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for a specific social media",
        xsd_type="IDType",
        help="An identifier for a specific social media.",
    )

    ubl23_Name = fields.Char(
        string="The common name of the social media.", xsd_type="NameType"
    )

    ubl23_SocialMediaTypeCode = fields.Char(
        string="A code that specifies the type of social media",
        xsd_type="SocialMediaTypeCodeType",
        help="A code that specifies the type of social media.",
    )

    ubl23_URI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_required=True,
        xsd_type="URIType",
        help=(
            "The Uniform Resource Identifier (URI) of a party profile in the "
            "social media; i.e., its Uniform Resource Locator (URL)."
        ),
    )


class SubcontractTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Subcontract Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe subcontract terms for a tendering
    process.</ns1:Definition>
    <ns1:ObjectClass>Subcontract Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.subcontracttermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubcontractTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Rate = fields.Monetary(
        string="The precise percentage allowed to be subcontracted",
        xsd_type="RateType",
        currency_field="brl_currency_id",
        help="The precise percentage allowed to be subcontracted.",
    )

    ubl23_UnknownPriceIndicator = fields.Boolean(
        string="An indicator that the subcontract price is known",
        help=(
            "An indicator that the subcontract price is known (true) or not " "(false)."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the subcontract terms",
        xsd_type="DescriptionType",
        help="Text describing the subcontract terms.",
    )

    ubl23_Amount = fields.Monetary(
        string="The monetary amount assigned to the subcontracted task",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help="The monetary amount assigned to the subcontracted task.",
    )

    ubl23_SubcontractingConditionsCode = fields.Char(
        string="A code specifying the conditions for subcontracting",
        xsd_type="SubcontractingConditionsCodeType",
        help="A code specifying the conditions for subcontracting.",
    )

    ubl23_MaximumPercent = fields.Char(
        string="The maximum percentage allowed to be subcontracted",
        xsd_type="MaximumPercentType",
        help="The maximum percentage allowed to be subcontracted.",
    )

    ubl23_MinimumPercent = fields.Char(
        string="The minimum percentage allowed to be subcontracted",
        xsd_type="MinimumPercentType",
        help="The minimum percentage allowed to be subcontracted.",
    )


class TemperatureType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Temperature. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a measurement of
    temperature.</ns1:Definition>
    <ns1:ObjectClass>Temperature</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.temperaturetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TemperatureType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AttributeID = fields.Char(
        string="An identifier for this temperature measurement",
        xsd_type="AttributeIDType",
        help="An identifier for this temperature measurement.",
    )

    ubl23_Measure = fields.Char(
        string="The value of this temperature measurement",
        xsd_type="MeasureType",
        help="The value of this temperature measurement.",
    )

    ubl23_MeasureCode = fields.Char(
        string="A code describing the temperature",
        xsd_type="MeasureCodeType",
        help=("A code describing the temperature, when not expressed as a " "measure."),
    )

    ubl23_Description = fields.Char(
        string="Text describing this temperature measurement",
        xsd_type="DescriptionType",
        help="Text describing this temperature measurement.",
    )


class TransportEquipmentSealType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Equipment Seal.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a device (a transport equipment seal) for
    securing the doors of a shipping container.</ns1:Definition>
    <ns1:ObjectClass>Transport Equipment Seal</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Container Seal</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportequipmentsealtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEquipmentSealType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this transport equipment seal",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this transport equipment seal.",
    )

    ubl23_SealIssuerTypeCode = fields.Char(
        string="SealIssuerTypeCode",
        xsd_type="SealIssuerTypeCodeType",
        help=(
            "A code signifying the type of party that issues and is "
            "responsible for this transport equipment seal."
        ),
    )

    ubl23_Condition = fields.Char(
        string="The condition of this transport equipment seal",
        xsd_type="ConditionType",
        help="The condition of this transport equipment seal.",
    )

    ubl23_SealStatusCode = fields.Char(
        string="SealStatusCode",
        xsd_type="SealStatusCodeType",
        help=("A code signifying the condition of this transport equipment seal."),
    )

    ubl23_SealingPartyType = fields.Char(
        string="The role of the sealing party.", xsd_type="SealingPartyTypeType"
    )


class UnstructuredPriceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Unstructured Price. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A simplified version of the Price class intended for
    applications such as telephone billing.</ns1:Definition>
    <ns1:ObjectClass>Unstructured Price</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.unstructuredpricetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnstructuredPriceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PriceAmount = fields.Monetary(
        string="The price amount.",
        xsd_type="PriceAmountType",
        currency_field="brl_currency_id",
    )

    ubl23_TimeAmount = fields.Float(
        string="The usage time upon which the price is based",
        xsd_type="TimeAmountType",
        digits=(
            16,
            4,
        ),
        help="The usage time upon which the price is based.",
    )


class VesselDynamicsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Vessel Dynamics. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the dynamics of a vesssel.</ns1:Definition>
    <ns1:ObjectClass>Vessel Dynamics</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.vesseldynamicstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "VesselDynamicsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_NavigationStatusCode = fields.Char(
        string="A code specifying the navigation status for the vessel",
        xsd_type="NavigationStatusCodeType",
        help="A code specifying the navigation status for the vessel.",
    )

    ubl23_AtAnchorageIndicator = fields.Boolean(
        string="Indicates whether the vessel is at anchor",
        help="Indicates whether the vessel is at anchor.",
    )

    ubl23_CourseOverGroundDirection = fields.Char(
        string="CourseOverGroundDirection",
        xsd_type="CourseOverGroundDirectionType",
        help=(
            "Text describing the actual direction of progress of a vessel, "
            "between two points, in relation to the surface of the earth."
        ),
    )

    ubl23_SpeedOverGroundMeasure = fields.Char(
        string="SpeedOverGroundMeasure",
        xsd_type="SpeedOverGroundMeasureType",
        help=(
            "Text describing the speed of the vessel relative to the surface "
            "of the earth."
        ),
    )

    ubl23_RateOfTurnMeasure = fields.Char(
        string="Text describing the rate at which the vessel is turning",
        xsd_type="RateOfTurnMeasureType",
        help="Text describing the rate at which the vessel is turning.",
    )


class WebSiteAccessType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Web Site Access. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe access to a web site.</ns1:Definition>
    <ns1:ObjectClass>Web Site Access</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.websiteaccesstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WebSiteAccessType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_URI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="URIType",
        help=(
            "The Uniform Resource Identifier (URI) for this web site; i.e., "
            "its Uniform Resource Locator (URL)."
        ),
    )

    ubl23_Password = fields.Char(
        string="A password to the web site.", xsd_required=True, xsd_type="PasswordType"
    )

    ubl23_Login = fields.Char(
        string="Text describing login details.", xsd_required=True, xsd_type="LoginType"
    )


class AccessoryRelatedItem(models.AbstractModel):
    _description = "AccessoryRelatedItem"
    _name = "ubl.23.accessoryrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AccessoryRelatedItem"

    ubl23_AccessoryRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class ActivityPeriod(models.AbstractModel):
    _description = "ActivityPeriod"
    _name = "ubl.23.activityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityPeriod"


class ActivityProperty(models.AbstractModel):
    _description = "ActivityProperty"
    _name = "ubl.23.activityproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityProperty"

    ubl23_ActivityProperty_SalesItemType_id = fields.Many2one(
        comodel_name="ubl.23.salesitemtype", xsd_implicit=True, ondelete="cascade"
    )


class AdditionalCommodityTypeification(models.AbstractModel):
    _description = "AdditionalCommodityClassification"
    _name = "ubl.23.additionalcommoditytypeification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalCommodityTypeification"

    ubl23_AdditionalCommodityClassification_ProcurementProjectType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojecttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AdditionalFee(models.AbstractModel):
    _description = "AdditionalFee"
    _name = "ubl.23.additionalfee"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalFee"

    ubl23_AdditionalFee_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class AdditionalInformationRequestPeriod(models.AbstractModel):
    _description = "AdditionalInformationRequestPeriod"
    _name = "ubl.23.additionalinformationrequestperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalInformationRequestPeriod"


class AdditionalNoticeLanguage(models.AbstractModel):
    _description = "AdditionalNoticeLanguage"
    _name = "ubl.23.additionalnoticelanguage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalNoticeLanguage"


class AdditionalPortCallPurpose(models.AbstractModel):
    _description = "AdditionalPortCallPurpose"
    _name = "ubl.23.additionalportcallpurpose"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalPortCallPurpose"

    ubl23_AdditionalPortCallPurpose_PortCallType_id = fields.Many2one(
        comodel_name="ubl.23.portcalltype", xsd_implicit=True, ondelete="cascade"
    )


class AdditionalSecurityMeasure(models.AbstractModel):
    _description = "AdditionalSecurityMeasure"
    _name = "ubl.23.additionalsecuritymeasure"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalSecurityMeasure"

    ubl23_AdditionalSecurityMeasure_ISPSRequirementsType_id = fields.Many2one(
        comodel_name="ubl.23.ispsrequirementstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AdditionalTemperature(models.AbstractModel):
    _description = "AdditionalTemperature"
    _name = "ubl.23.additionaltemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalTemperature"

    ubl23_AdditionalTemperature_HazardousItemType_id = fields.Many2one(
        comodel_name="ubl.23.hazardousitemtype", xsd_implicit=True, ondelete="cascade"
    )


class AddressLine(models.AbstractModel):
    _description = "AddressLine"
    _name = "ubl.23.addressline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AddressLine"

    ubl23_AddressLine_AddressType_id = fields.Many2one(
        comodel_name="ubl.23.addresstype", xsd_implicit=True, ondelete="cascade"
    )


class AdoptionPeriod(models.AbstractModel):
    _description = "AdoptionPeriod"
    _name = "ubl.23.adoptionperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdoptionPeriod"


class AgreementCountry(models.AbstractModel):
    _description = "AgreementCountry"
    _name = "ubl.23.agreementcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AgreementCountry"


class AirTransport(models.AbstractModel):
    _description = "AirTransport"
    _name = "ubl.23.airtransport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AirTransport"


class AllowedSubcontractTerms(models.AbstractModel):
    _description = "AllowedSubcontractTerms"
    _name = "ubl.23.allowedsubcontractterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AllowedSubcontractTerms"

    ubl23_AllowedSubcontractTerms_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class AnticipatedMonetaryTotal(models.AbstractModel):
    _description = "AnticipatedMonetaryTotal"
    _name = "ubl.23.anticipatedmonetarytotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AnticipatedMonetaryTotal"


class ApplicablePeriod(models.AbstractModel):
    _description = "ApplicablePeriod"
    _name = "ubl.23.applicableperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicablePeriod"

    ubl23_ApplicablePeriod_TenderingCriterionPropertyType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionpropertytype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ApplicablePeriod_TenderingCriterionResponseType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ApplicableRegulation(models.AbstractModel):
    _description = "ApplicableRegulation"
    _name = "ubl.23.applicableregulation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicableRegulation"


class AppliedSecurityMeasure(models.AbstractModel):
    _description = "AppliedSecurityMeasure"
    _name = "ubl.23.appliedsecuritymeasure"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AppliedSecurityMeasure"

    ubl23_AppliedSecurityMeasure_ShipToShipActivityRecordType_id = fields.Many2one(
        comodel_name="ubl.23.shiptoshipactivityrecordtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AuctionTerms(models.AbstractModel):
    _description = "AuctionTerms"
    _name = "ubl.23.auctionterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AuctionTerms"


class AwardingCriterion(models.AbstractModel):
    _description = "AwardingCriterion"
    _name = "ubl.23.awardingcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingCriterion"

    ubl23_AwardingCriterion_AwardingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.awardingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class AwardingCriterionResponse(models.AbstractModel):
    _description = "AwardingCriterionResponse"
    _name = "ubl.23.awardingcriterionresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingCriterionResponse"

    ubl23_AwardingCriterionResponse_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class BallastWaterTemperature(models.AbstractModel):
    _description = "BallastWaterTemperature"
    _name = "ubl.23.ballastwatertemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BallastWaterTemperature"


class CardAccount(models.AbstractModel):
    _description = "CardAccount"
    _name = "ubl.23.cardaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CardAccount"

    ubl23_CardAccount_PaymentMeansType_id = fields.Many2one(
        comodel_name="ubl.23.paymentmeanstype", xsd_implicit=True, ondelete="cascade"
    )


class CatalogueReference(models.AbstractModel):
    _description = "CatalogueReference"
    _name = "ubl.23.cataloguereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueReference"


class CategorizesTypeificationCategory(models.AbstractModel):
    _description = "CategorizesClassificationCategory"
    _name = "ubl.23.categorizestypeificationcategory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CategorizesTypeificationCategory"

    ubl23_CategorizesClassificationCategory_ClassificationCategoryType_id = (
        fields.Many2one(
            comodel_name="ubl.23.typeificationcategorytype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class CitizenshipCountry(models.AbstractModel):
    _description = "CitizenshipCountry"
    _name = "ubl.23.citizenshipcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CitizenshipCountry"


class TypeificationCategory(models.AbstractModel):
    _description = "ClassificationCategory"
    _name = "ubl.23.typeificationcategory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TypeificationCategory"

    ubl23_ClassificationCategory_ClassificationSchemeType_id = fields.Many2one(
        comodel_name="ubl.23.typeificationschemetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Clause(models.AbstractModel):
    _description = "Clause"
    _name = "ubl.23.clause"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Clause"

    ubl23_Clause_PaymentMandateType_id = fields.Many2one(
        comodel_name="ubl.23.paymentmandatetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Clause_TradeFinancingType_id = fields.Many2one(
        comodel_name="ubl.23.tradefinancingtype", xsd_implicit=True, ondelete="cascade"
    )


class CollectedPayment(models.AbstractModel):
    _description = "CollectedPayment"
    _name = "ubl.23.collectedpayment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CollectedPayment"

    ubl23_CollectedPayment_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )


class CommodityTypeification(models.AbstractModel):
    _description = "CommodityClassification"
    _name = "ubl.23.commoditytypeification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CommodityTypeification"

    ubl23_CommodityClassification_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_CommodityClassification_TenderingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_CommodityClassification_TenderingCriterionResponseType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_CommodityClassification_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Communication(models.AbstractModel):
    _description = "Communication"
    _name = "ubl.23.communication"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Communication"


class ComplementaryRelatedItem(models.AbstractModel):
    _description = "ComplementaryRelatedItem"
    _name = "ubl.23.complementaryrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ComplementaryRelatedItem"

    ubl23_ComplementaryRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class ComponentRelatedItem(models.AbstractModel):
    _description = "ComponentRelatedItem"
    _name = "ubl.23.componentrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ComponentRelatedItem"

    ubl23_ComponentRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class Condition(models.AbstractModel):
    _description = "Condition"
    _name = "ubl.23.condition"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Condition"

    ubl23_Condition_StatusType_id = fields.Many2one(
        comodel_name="ubl.23.statustype", xsd_implicit=True, ondelete="cascade"
    )


class ConstitutionPeriod(models.AbstractModel):
    _description = "ConstitutionPeriod"
    _name = "ubl.23.constitutionperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConstitutionPeriod"


class ConsumptionAverage(models.AbstractModel):
    _description = "ConsumptionAverage"
    _name = "ubl.23.consumptionaverage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionAverage"

    ubl23_ConsumptionAverage_EnergyWaterSupplyType_id = fields.Many2one(
        comodel_name="ubl.23.energywatersupplytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ConsumptionCorrection(models.AbstractModel):
    _description = "ConsumptionCorrection"
    _name = "ubl.23.consumptioncorrection"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionCorrection"


class ContractAcceptancePeriod(models.AbstractModel):
    _description = "ContractAcceptancePeriod"
    _name = "ubl.23.contractacceptanceperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractAcceptancePeriod"


class ContractExecutionRequirement(models.AbstractModel):
    _description = "ContractExecutionRequirement"
    _name = "ubl.23.contractexecutionrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractExecutionRequirement"

    ubl23_ContractExecutionRequirement_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class ContractFormalizationPeriod(models.AbstractModel):
    _description = "ContractFormalizationPeriod"
    _name = "ubl.23.contractformalizationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractFormalizationPeriod"


class ContractingActivity(models.AbstractModel):
    _description = "ContractingActivity"
    _name = "ubl.23.contractingactivity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingActivity"

    ubl23_ContractingActivity_ContractingPartyType_1_id = fields.Many2one(
        comodel_name="ubl.23.contractingpartytype1",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ContractingPartyType(models.AbstractModel):
    _description = "ContractingPartyType"
    _name = "ubl.23.contractingpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingPartyType"

    ubl23_ContractingPartyType_ContractingPartyType_1_id = fields.Many2one(
        comodel_name="ubl.23.contractingpartytype1",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ContractingRepresentationType(models.AbstractModel):
    _description = "ContractingRepresentationType"
    _name = "ubl.23.contractingrepresentationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingRepresentationType"


class ContractingSystem(models.AbstractModel):
    _description = "ContractingSystem"
    _name = "ubl.23.contractingsystem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingSystem"

    ubl23_ContractingSystem_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Country(models.AbstractModel):
    _description = "Country"
    _name = "ubl.23.country"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Country"


class CreditAccount(models.AbstractModel):
    _description = "CreditAccount"
    _name = "ubl.23.creditaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CreditAccount"


class DefaultLanguage(models.AbstractModel):
    _description = "DefaultLanguage"
    _name = "ubl.23.defaultlanguage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DefaultLanguage"


class DeletedCatalogueReference(models.AbstractModel):
    _description = "DeletedCatalogueReference"
    _name = "ubl.23.deletedcataloguereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeletedCatalogueReference"


class DeliveryPeriod(models.AbstractModel):
    _description = "DeliveryPeriod"
    _name = "ubl.23.deliveryperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryPeriod"

    ubl23_DeliveryPeriod_RequestForTenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.requestfortenderlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DeliveryUnit(models.AbstractModel):
    _description = "DeliveryUnit"
    _name = "ubl.23.deliveryunit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryUnit"

    ubl23_DeliveryUnit_ItemLocationQuantityType_id = fields.Many2one(
        comodel_name="ubl.23.itemlocationquantitytype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DeliveryUnit_PackageType_id = fields.Many2one(
        comodel_name="ubl.23.packagetype", xsd_implicit=True, ondelete="cascade"
    )


class DestinationCountry(models.AbstractModel):
    _description = "DestinationCountry"
    _name = "ubl.23.destinationcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DestinationCountry"


class DigitalDocumentMetadata(models.AbstractModel):
    _description = "DigitalDocumentMetadata"
    _name = "ubl.23.digitaldocumentmetadata"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalDocumentMetadata"

    ubl23_DigitalDocumentMetadata_DigitalServiceType_id = fields.Many2one(
        comodel_name="ubl.23.digitalservicetype", xsd_implicit=True, ondelete="cascade"
    )


class DigitalMessageDelivery(models.AbstractModel):
    _description = "DigitalMessageDelivery"
    _name = "ubl.23.digitalmessagedelivery"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalMessageDelivery"


class Dimension(models.AbstractModel):
    _description = "Dimension"
    _name = "ubl.23.dimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Dimension"

    ubl23_Dimension_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class DocumentAvailabilityPeriod(models.AbstractModel):
    _description = "DocumentAvailabilityPeriod"
    _name = "ubl.23.documentavailabilityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentAvailabilityPeriod"


class DocumentMetadata(models.AbstractModel):
    _description = "DocumentMetadata"
    _name = "ubl.23.documentmetadata"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentMetadata"


class DurationPeriod(models.AbstractModel):
    _description = "DurationPeriod"
    _name = "ubl.23.durationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DurationPeriod"


class EconomicOperatorRole(models.AbstractModel):
    _description = "EconomicOperatorRole"
    _name = "ubl.23.economicoperatorrole"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorRole"

    ubl23_EconomicOperatorRole_TendererQualificationRequestType_id = fields.Many2one(
        comodel_name="ubl.23.tendererqualificationrequesttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EffectivePeriod(models.AbstractModel):
    _description = "EffectivePeriod"
    _name = "ubl.23.effectiveperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EffectivePeriod"


class EmergencyTemperature(models.AbstractModel):
    _description = "EmergencyTemperature"
    _name = "ubl.23.emergencytemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EmergencyTemperature"


class EncryptionCertificatePathChain(models.AbstractModel):
    _description = "EncryptionCertificatePathChain"
    _name = "ubl.23.encryptioncertificatepathchain"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionCertificatePathChain"

    ubl23_EncryptionCertificatePathChain_EncryptionDataType_id = fields.Many2one(
        comodel_name="ubl.23.encryptiondatatype", xsd_implicit=True, ondelete="cascade"
    )


class EncryptionSymmetricAlgorithm(models.AbstractModel):
    _description = "EncryptionSymmetricAlgorithm"
    _name = "ubl.23.encryptionsymmetricalgorithm"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionSymmetricAlgorithm"

    ubl23_EncryptionSymmetricAlgorithm_EncryptionDataType_id = fields.Many2one(
        comodel_name="ubl.23.encryptiondatatype", xsd_implicit=True, ondelete="cascade"
    )


class EnergyWaterConsumptionCorrection(models.AbstractModel):
    _description = "EnergyWaterConsumptionCorrection"
    _name = "ubl.23.energywaterconsumptioncorrection"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnergyWaterConsumptionCorrection"

    ubl23_EnergyWaterConsumptionCorrection_EnergyWaterSupplyType_id = fields.Many2one(
        comodel_name="ubl.23.energywatersupplytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EstimatedDeliveryPeriod(models.AbstractModel):
    _description = "EstimatedDeliveryPeriod"
    _name = "ubl.23.estimateddeliveryperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedDeliveryPeriod"


class EstimatedDespatchPeriod(models.AbstractModel):
    _description = "EstimatedDespatchPeriod"
    _name = "ubl.23.estimateddespatchperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedDespatchPeriod"


class EstimatedDurationPeriod(models.AbstractModel):
    _description = "EstimatedDurationPeriod"
    _name = "ubl.23.estimateddurationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedDurationPeriod"


class EstimatedTransitPeriod(models.AbstractModel):
    _description = "EstimatedTransitPeriod"
    _name = "ubl.23.estimatedtransitperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedTransitPeriod"


class EventComment(models.AbstractModel):
    _description = "EventComment"
    _name = "ubl.23.eventcomment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventComment"


class EventTacticEnumeration(models.AbstractModel):
    _description = "EventTacticEnumeration"
    _name = "ubl.23.eventtacticenumeration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventTacticEnumeration"


class EvidenceSupplied(models.AbstractModel):
    _description = "EvidenceSupplied"
    _name = "ubl.23.evidencesupplied"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvidenceSupplied"

    ubl23_EvidenceSupplied_CapabilityType_id = fields.Many2one(
        comodel_name="ubl.23.capabilitytype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_EvidenceSupplied_CompletedTaskType_id = fields.Many2one(
        comodel_name="ubl.23.completedtasktype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_EvidenceSupplied_DeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.declarationtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_EvidenceSupplied_TenderingCriterionResponseType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ExceptionObservationPeriod(models.AbstractModel):
    _description = "ExceptionObservationPeriod"
    _name = "ubl.23.exceptionobservationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExceptionObservationPeriod"


class ExportCountry(models.AbstractModel):
    _description = "ExportCountry"
    _name = "ubl.23.exportcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportCountry"


class ExternalReference(models.AbstractModel):
    _description = "ExternalReference"
    _name = "ubl.23.externalreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExternalReference"


class Fee(models.AbstractModel):
    _description = "Fee"
    _name = "ubl.23.fee"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Fee"


class FinalDestinationCountry(models.AbstractModel):
    _description = "FinalDestinationCountry"
    _name = "ubl.23.finaldestinationcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinalDestinationCountry"


class FlashpointTemperature(models.AbstractModel):
    _description = "FlashpointTemperature"
    _name = "ubl.23.flashpointtemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FlashpointTemperature"


class FloorSpaceMeasurementDimension(models.AbstractModel):
    _description = "FloorSpaceMeasurementDimension"
    _name = "ubl.23.floorspacemeasurementdimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FloorSpaceMeasurementDimension"


class ForecastException(models.AbstractModel):
    _description = "ForecastException"
    _name = "ubl.23.forecastexception"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastException"


class ForecastExceptionCriterionLine(models.AbstractModel):
    _description = "ForecastExceptionCriterionLine"
    _name = "ubl.23.forecastexceptioncriterionline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastExceptionCriterionLine"


class ForecastPeriod(models.AbstractModel):
    _description = "ForecastPeriod"
    _name = "ubl.23.forecastperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastPeriod"


class FrequencyPeriod(models.AbstractModel):
    _description = "FrequencyPeriod"
    _name = "ubl.23.frequencyperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FrequencyPeriod"


class GoodsItemContainer(models.AbstractModel):
    _description = "GoodsItemContainer"
    _name = "ubl.23.goodsitemcontainer"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemContainer"

    ubl23_GoodsItemContainer_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )


class InventoryPeriod(models.AbstractModel):
    _description = "InventoryPeriod"
    _name = "ubl.23.inventoryperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InventoryPeriod"


class InvitationSubmissionPeriod(models.AbstractModel):
    _description = "InvitationSubmissionPeriod"
    _name = "ubl.23.invitationsubmissionperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InvitationSubmissionPeriod"


class InvoicePeriod(models.AbstractModel):
    _description = "InvoicePeriod"
    _name = "ubl.23.invoiceperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InvoicePeriod"

    ubl23_InvoicePeriod_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_InvoicePeriod_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_InvoicePeriod_RemittanceAdviceLineType_id = fields.Many2one(
        comodel_name="ubl.23.remittanceadvicelinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_InvoicePeriod_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )


class IssuingCountry(models.AbstractModel):
    _description = "IssuingCountry"
    _name = "ubl.23.issuingcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IssuingCountry"


class ItemComparison(models.AbstractModel):
    _description = "ItemComparison"
    _name = "ubl.23.itemcomparison"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemComparison"

    ubl23_ItemComparison_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class ItemPropertyGroup(models.AbstractModel):
    _description = "ItemPropertyGroup"
    _name = "ubl.23.itempropertygroup"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPropertyGroup"

    ubl23_ItemPropertyGroup_ItemPropertyType_id = fields.Many2one(
        comodel_name="ubl.23.itempropertytype", xsd_implicit=True, ondelete="cascade"
    )


class ItemPropertyRange(models.AbstractModel):
    _description = "ItemPropertyRange"
    _name = "ubl.23.itempropertyrange"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPropertyRange"


class Language(models.AbstractModel):
    _description = "Language"
    _name = "ubl.23.language"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Language"

    ubl23_Language_LegislationType_id = fields.Many2one(
        comodel_name="ubl.23.legislationtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Language_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class LegalMonetaryTotal(models.AbstractModel):
    _description = "LegalMonetaryTotal"
    _name = "ubl.23.legalmonetarytotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LegalMonetaryTotal"


class LineValidityPeriod(models.AbstractModel):
    _description = "LineValidityPeriod"
    _name = "ubl.23.linevalidityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineValidityPeriod"


class LocationCoordinate(models.AbstractModel):
    _description = "LocationCoordinate"
    _name = "ubl.23.locationcoordinate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LocationCoordinate"

    ubl23_LocationCoordinate_AddressType_id = fields.Many2one(
        comodel_name="ubl.23.addresstype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_LocationCoordinate_LocationType_id = fields.Many2one(
        comodel_name="ubl.23.locationtype", xsd_implicit=True, ondelete="cascade"
    )


class MainCommodityTypeification(models.AbstractModel):
    _description = "MainCommodityClassification"
    _name = "ubl.23.maincommoditytypeification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainCommodityTypeification"

    ubl23_MainCommodityClassification_ProcurementProjectType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojecttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class MainPeriod(models.AbstractModel):
    _description = "MainPeriod"
    _name = "ubl.23.mainperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainPeriod"


class MaximumDeliveryUnit(models.AbstractModel):
    _description = "MaximumDeliveryUnit"
    _name = "ubl.23.maximumdeliveryunit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaximumDeliveryUnit"


class MaximumTemperature(models.AbstractModel):
    _description = "MaximumTemperature"
    _name = "ubl.23.maximumtemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaximumTemperature"


class MeasurementDimension(models.AbstractModel):
    _description = "MeasurementDimension"
    _name = "ubl.23.measurementdimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeasurementDimension"

    ubl23_MeasurementDimension_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_MeasurementDimension_ItemIdentificationType_id = fields.Many2one(
        comodel_name="ubl.23.itemidentificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_MeasurementDimension_PackageType_id = fields.Many2one(
        comodel_name="ubl.23.packagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_MeasurementDimension_StowageType_id = fields.Many2one(
        comodel_name="ubl.23.stowagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_MeasurementDimension_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_MeasurementDimension_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_MeasurementDimension_TransportMeansType_id = fields.Many2one(
        comodel_name="ubl.23.transportmeanstype", xsd_implicit=True, ondelete="cascade"
    )


class MessageDelivery(models.AbstractModel):
    _description = "MessageDelivery"
    _name = "ubl.23.messagedelivery"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MessageDelivery"


class MeterProperty(models.AbstractModel):
    _description = "MeterProperty"
    _name = "ubl.23.meterproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeterProperty"

    ubl23_MeterProperty_MeterType_id = fields.Many2one(
        comodel_name="ubl.23.metertype", xsd_implicit=True, ondelete="cascade"
    )


class MeterReading(models.AbstractModel):
    _description = "MeterReading"
    _name = "ubl.23.meterreading"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeterReading"

    ubl23_MeterReading_MeterType_id = fields.Many2one(
        comodel_name="ubl.23.metertype", xsd_implicit=True, ondelete="cascade"
    )


class MinimumDeliveryUnit(models.AbstractModel):
    _description = "MinimumDeliveryUnit"
    _name = "ubl.23.minimumdeliveryunit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MinimumDeliveryUnit"


class MinimumTemperature(models.AbstractModel):
    _description = "MinimumTemperature"
    _name = "ubl.23.minimumtemperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MinimumTemperature"


class MonetaryTotal(models.AbstractModel):
    _description = "MonetaryTotal"
    _name = "ubl.23.monetarytotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MonetaryTotal"


class NominationPeriod(models.AbstractModel):
    _description = "NominationPeriod"
    _name = "ubl.23.nominationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NominationPeriod"


class NotificationPeriod(models.AbstractModel):
    _description = "NotificationPeriod"
    _name = "ubl.23.notificationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotificationPeriod"

    ubl23_NotificationPeriod_NotificationRequirementType_id = fields.Many2one(
        comodel_name="ubl.23.notificationrequirementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OptionValidityPeriod(models.AbstractModel):
    _description = "OptionValidityPeriod"
    _name = "ubl.23.optionvalidityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OptionValidityPeriod"


class OriginCountry(models.AbstractModel):
    _description = "OriginCountry"
    _name = "ubl.23.origincountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginCountry"


class OriginalDepartureCountry(models.AbstractModel):
    _description = "OriginalDepartureCountry"
    _name = "ubl.23.originaldeparturecountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginalDepartureCountry"


class OtherCommunication(models.AbstractModel):
    _description = "OtherCommunication"
    _name = "ubl.23.othercommunication"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OtherCommunication"

    ubl23_OtherCommunication_ContactType_id = fields.Many2one(
        comodel_name="ubl.23.contacttype", xsd_implicit=True, ondelete="cascade"
    )


class PalletSpaceMeasurementDimension(models.AbstractModel):
    _description = "PalletSpaceMeasurementDimension"
    _name = "ubl.23.palletspacemeasurementdimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PalletSpaceMeasurementDimension"


class ParticipationInvitationPeriod(models.AbstractModel):
    _description = "ParticipationInvitationPeriod"
    _name = "ubl.23.participationinvitationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParticipationInvitationPeriod"


class ParticipationRequestReceptionPeriod(models.AbstractModel):
    _description = "ParticipationRequestReceptionPeriod"
    _name = "ubl.23.participationrequestreceptionperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParticipationRequestReceptionPeriod"


class PartyIdentification(models.AbstractModel):
    _description = "PartyIdentification"
    _name = "ubl.23.partyidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyIdentification"

    ubl23_PartyIdentification_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class PartyName(models.AbstractModel):
    _description = "PartyName"
    _name = "ubl.23.partyname"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyName"

    ubl23_PartyName_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class Payment(models.AbstractModel):
    _description = "Payment"
    _name = "ubl.23.payment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Payment"


class PaymentReversalPeriod(models.AbstractModel):
    _description = "PaymentReversalPeriod"
    _name = "ubl.23.paymentreversalperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentReversalPeriod"


class PenaltyClause(models.AbstractModel):
    _description = "PenaltyClause"
    _name = "ubl.23.penaltyclause"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PenaltyClause"

    ubl23_PenaltyClause_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class PenaltyPeriod(models.AbstractModel):
    _description = "PenaltyPeriod"
    _name = "ubl.23.penaltyperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PenaltyPeriod"


class Period(models.AbstractModel):
    _description = "Period"
    _name = "ubl.23.period"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Period"

    ubl23_Period_ItemInformationRequestLineType_id = fields.Many2one(
        comodel_name="ubl.23.iteminformationrequestlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_Period_TransportEventType_id = fields.Many2one(
        comodel_name="ubl.23.transporteventtype", xsd_implicit=True, ondelete="cascade"
    )


class PhysicalAttribute(models.AbstractModel):
    _description = "PhysicalAttribute"
    _name = "ubl.23.physicalattribute"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PhysicalAttribute"

    ubl23_PhysicalAttribute_ItemIdentificationType_id = fields.Many2one(
        comodel_name="ubl.23.itemidentificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PlannedPeriod(models.AbstractModel):
    _description = "PlannedPeriod"
    _name = "ubl.23.plannedperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedPeriod"


class PortCallPurpose(models.AbstractModel):
    _description = "PortCallPurpose"
    _name = "ubl.23.portcallpurpose"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCallPurpose"


class PostAwardProcess(models.AbstractModel):
    _description = "PostAwardProcess"
    _name = "ubl.23.postawardprocess"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PostAwardProcess"


class PrepaidPayment(models.AbstractModel):
    _description = "PrepaidPayment"
    _name = "ubl.23.prepaidpayment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PrepaidPayment"


class PresentationPeriod(models.AbstractModel):
    _description = "PresentationPeriod"
    _name = "ubl.23.presentationperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PresentationPeriod"


class PrimaryPortCallPurpose(models.AbstractModel):
    _description = "PrimaryPortCallPurpose"
    _name = "ubl.23.primaryportcallpurpose"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PrimaryPortCallPurpose"


class Prize(models.AbstractModel):
    _description = "Prize"
    _name = "ubl.23.prize"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Prize"

    ubl23_Prize_AwardingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.awardingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class ProcessJustification(models.AbstractModel):
    _description = "ProcessJustification"
    _name = "ubl.23.processjustification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcessJustification"

    ubl23_ProcessJustification_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ProcurementAdditionalType(models.AbstractModel):
    _description = "ProcurementAdditionalType"
    _name = "ubl.23.procurementadditionaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementAdditionalType"

    ubl23_ProcurementAdditionalType_ProcurementProjectType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojecttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ProcurementProjectLotReference(models.AbstractModel):
    _description = "ProcurementProjectLotReference"
    _name = "ubl.23.procurementprojectlotreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProjectLotReference"

    ubl23_ProcurementProjectLotReference_LotsGroupType_id = fields.Many2one(
        comodel_name="ubl.23.lotsgrouptype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ProcurementProjectLotReference_TenderingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ProcurementProjectLotReference_TenderingCriterionResponseType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tenderingcriterionresponsetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class PromisedDeliveryPeriod(models.AbstractModel):
    _description = "PromisedDeliveryPeriod"
    _name = "ubl.23.promiseddeliveryperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromisedDeliveryPeriod"


class QuotedMonetaryTotal(models.AbstractModel):
    _description = "QuotedMonetaryTotal"
    _name = "ubl.23.quotedmonetarytotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuotedMonetaryTotal"


class RailTransport(models.AbstractModel):
    _description = "RailTransport"
    _name = "ubl.23.railtransport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RailTransport"


class RangeDimension(models.AbstractModel):
    _description = "RangeDimension"
    _name = "ubl.23.rangedimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RangeDimension"


class Regulation(models.AbstractModel):
    _description = "Regulation"
    _name = "ubl.23.regulation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Regulation"


class RelatedCatalogueReference(models.AbstractModel):
    _description = "RelatedCatalogueReference"
    _name = "ubl.23.relatedcataloguereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RelatedCatalogueReference"


class RelatedItem(models.AbstractModel):
    _description = "RelatedItem"
    _name = "ubl.23.relateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RelatedItem"


class ReminderPeriod(models.AbstractModel):
    _description = "ReminderPeriod"
    _name = "ubl.23.reminderperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReminderPeriod"

    ubl23_ReminderPeriod_ReminderLineType_id = fields.Many2one(
        comodel_name="ubl.23.reminderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class ReplacedRelatedItem(models.AbstractModel):
    _description = "ReplacedRelatedItem"
    _name = "ubl.23.replacedrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReplacedRelatedItem"

    ubl23_ReplacedRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class ReplacementRelatedItem(models.AbstractModel):
    _description = "ReplacementRelatedItem"
    _name = "ubl.23.replacementrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReplacementRelatedItem"

    ubl23_ReplacementRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ReplacementRelatedItem_TenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.tenderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class RequestedCatalogueReference(models.AbstractModel):
    _description = "RequestedCatalogueReference"
    _name = "ubl.23.requestedcataloguereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedCatalogueReference"


class RequestedDeliveryPeriod(models.AbstractModel):
    _description = "RequestedDeliveryPeriod"
    _name = "ubl.23.requesteddeliveryperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedDeliveryPeriod"


class RequestedDespatchPeriod(models.AbstractModel):
    _description = "RequestedDespatchPeriod"
    _name = "ubl.23.requesteddespatchperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedDespatchPeriod"


class RequestedLanguage(models.AbstractModel):
    _description = "RequestedLanguage"
    _name = "ubl.23.requestedlanguage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedLanguage"


class RequestedMonetaryTotal(models.AbstractModel):
    _description = "RequestedMonetaryTotal"
    _name = "ubl.23.requestedmonetarytotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedMonetaryTotal"


class RequestedStatusPeriod(models.AbstractModel):
    _description = "RequestedStatusPeriod"
    _name = "ubl.23.requestedstatusperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedStatusPeriod"


class RequestedValidityPeriod(models.AbstractModel):
    _description = "RequestedValidityPeriod"
    _name = "ubl.23.requestedvalidityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedValidityPeriod"


class RequiredRelatedItem(models.AbstractModel):
    _description = "RequiredRelatedItem"
    _name = "ubl.23.requiredrelateditem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredRelatedItem"

    ubl23_RequiredRelatedItem_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class ResponseValue(models.AbstractModel):
    _description = "ResponseValue"
    _name = "ubl.23.responsevalue"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponseValue"

    ubl23_ResponseValue_TenderingCriterionResponseType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ResultOfVerification(models.AbstractModel):
    _description = "ResultOfVerification"
    _name = "ubl.23.resultofverification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResultOfVerification"


class RoadTransport(models.AbstractModel):
    _description = "RoadTransport"
    _name = "ubl.23.roadtransport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RoadTransport"


class SanitaryMeasure(models.AbstractModel):
    _description = "SanitaryMeasure"
    _name = "ubl.23.sanitarymeasure"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SanitaryMeasure"

    ubl23_SanitaryMeasure_MaritimeHealthDeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.maritimehealthdeclarationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ScheduledServiceFrequency(models.AbstractModel):
    _description = "ScheduledServiceFrequency"
    _name = "ubl.23.scheduledservicefrequency"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ScheduledServiceFrequency"

    ubl23_ScheduledServiceFrequency_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SecondaryHazard(models.AbstractModel):
    _description = "SecondaryHazard"
    _name = "ubl.23.secondaryhazard"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecondaryHazard"

    ubl23_SecondaryHazard_HazardousItemType_id = fields.Many2one(
        comodel_name="ubl.23.hazardousitemtype", xsd_implicit=True, ondelete="cascade"
    )


class SecurityClearanceTerm(models.AbstractModel):
    _description = "SecurityClearanceTerm"
    _name = "ubl.23.securityclearanceterm"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecurityClearanceTerm"

    ubl23_SecurityClearanceTerm_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class SecurityMeasure(models.AbstractModel):
    _description = "SecurityMeasure"
    _name = "ubl.23.securitymeasure"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecurityMeasure"

    ubl23_SecurityMeasure_PortCallRecordType_id = fields.Many2one(
        comodel_name="ubl.23.portcallrecordtype", xsd_implicit=True, ondelete="cascade"
    )


class ServiceAvailabilityPeriod(models.AbstractModel):
    _description = "ServiceAvailabilityPeriod"
    _name = "ubl.23.serviceavailabilityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceAvailabilityPeriod"

    ubl23_ServiceAvailabilityPeriod_ServiceLevelAgreementType_id = fields.Many2one(
        comodel_name="ubl.23.servicelevelagreementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ServiceEndTimePeriod(models.AbstractModel):
    _description = "ServiceEndTimePeriod"
    _name = "ubl.23.serviceendtimeperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceEndTimePeriod"


class ServiceFrequency(models.AbstractModel):
    _description = "ServiceFrequency"
    _name = "ubl.23.servicefrequency"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceFrequency"


class ServiceMaintenancePeriod(models.AbstractModel):
    _description = "ServiceMaintenancePeriod"
    _name = "ubl.23.servicemaintenanceperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceMaintenancePeriod"

    ubl23_ServiceMaintenancePeriod_ServiceLevelAgreementType_id = fields.Many2one(
        comodel_name="ubl.23.servicelevelagreementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ServiceStartTimePeriod(models.AbstractModel):
    _description = "ServiceStartTimePeriod"
    _name = "ubl.23.servicestarttimeperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceStartTimePeriod"


class SettlementPeriod(models.AbstractModel):
    _description = "SettlementPeriod"
    _name = "ubl.23.settlementperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SettlementPeriod"


class ShareholderParty(models.AbstractModel):
    _description = "ShareholderParty"
    _name = "ubl.23.shareholderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShareholderParty"

    ubl23_ShareholderParty_PartyLegalEntityType_id = fields.Many2one(
        comodel_name="ubl.23.partylegalentitytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ShipRequirement(models.AbstractModel):
    _description = "ShipRequirement"
    _name = "ubl.23.shiprequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipRequirement"

    ubl23_ShipRequirement_PortCallType_id = fields.Many2one(
        comodel_name="ubl.23.portcalltype", xsd_implicit=True, ondelete="cascade"
    )


class SocialMediaProfile(models.AbstractModel):
    _description = "SocialMediaProfile"
    _name = "ubl.23.socialmediaprofile"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SocialMediaProfile"

    ubl23_SocialMediaProfile_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class SourceCatalogueReference(models.AbstractModel):
    _description = "SourceCatalogueReference"
    _name = "ubl.23.sourcecataloguereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SourceCatalogueReference"


class StatementPeriod(models.AbstractModel):
    _description = "StatementPeriod"
    _name = "ubl.23.statementperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatementPeriod"


class StatusPeriod(models.AbstractModel):
    _description = "StatusPeriod"
    _name = "ubl.23.statusperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatusPeriod"


class SubcontractTerms(models.AbstractModel):
    _description = "SubcontractTerms"
    _name = "ubl.23.subcontractterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubcontractTerms"

    ubl23_SubcontractTerms_TenderResultType_id = fields.Many2one(
        comodel_name="ubl.23.tenderresulttype", xsd_implicit=True, ondelete="cascade"
    )


class SubordinateAwardingCriterion(models.AbstractModel):
    _description = "SubordinateAwardingCriterion"
    _name = "ubl.23.subordinateawardingcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubordinateAwardingCriterion"

    ubl23_SubordinateAwardingCriterion_AwardingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.awardingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SubordinateAwardingCriterionResponse(models.AbstractModel):
    _description = "SubordinateAwardingCriterionResponse"
    _name = "ubl.23.subordinateawardingcriterionresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubordinateAwardingCriterionResponse"

    ubl23_SubordinateAwardingCriterionResponse_AwardingCriterionResponseType_id = (
        fields.Many2one(
            comodel_name="ubl.23.awardingcriterionresponsetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class SupportedCommodityTypeification(models.AbstractModel):
    _description = "SupportedCommodityClassification"
    _name = "ubl.23.supportedcommoditytypeification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupportedCommodityTypeification"

    ubl23_SupportedCommodityClassification_TransportationServiceType_id = (
        fields.Many2one(
            comodel_name="ubl.23.transportationservicetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class Temperature(models.AbstractModel):
    _description = "Temperature"
    _name = "ubl.23.temperature"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Temperature"

    ubl23_Temperature_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )


class TenderSubmissionDeadlinePeriod(models.AbstractModel):
    _description = "TenderSubmissionDeadlinePeriod"
    _name = "ubl.23.tendersubmissiondeadlineperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderSubmissionDeadlinePeriod"


class TenderValidityPeriod(models.AbstractModel):
    _description = "TenderValidityPeriod"
    _name = "ubl.23.tendervalidityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderValidityPeriod"


class TotalCapacityDimension(models.AbstractModel):
    _description = "TotalCapacityDimension"
    _name = "ubl.23.totalcapacitydimension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TotalCapacityDimension"


class TransitCountry(models.AbstractModel):
    _description = "TransitCountry"
    _name = "ubl.23.transitcountry"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransitCountry"

    ubl23_TransitCountry_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class TransitPeriod(models.AbstractModel):
    _description = "TransitPeriod"
    _name = "ubl.23.transitperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransitPeriod"


class TransportEquipmentSeal(models.AbstractModel):
    _description = "TransportEquipmentSeal"
    _name = "ubl.23.transportequipmentseal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEquipmentSeal"

    ubl23_TransportEquipmentSeal_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TransportServiceProviderResponseDeadlinePeriod(models.AbstractModel):
    _description = "TransportServiceProviderResponseDeadlinePeriod"
    _name = "ubl.23.transportserviceproviderresponsedeadlineperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportServiceProviderResponseDeadlinePeriod"


class TransportServiceProviderResponseRequiredPeriod(models.AbstractModel):
    _description = "TransportServiceProviderResponseRequiredPeriod"
    _name = "ubl.23.transportserviceproviderresponserequiredperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportServiceProviderResponseRequiredPeriod"


class TransportUserResponseRequiredPeriod(models.AbstractModel):
    _description = "TransportUserResponseRequiredPeriod"
    _name = "ubl.23.transportuserresponserequiredperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportUserResponseRequiredPeriod"


class UnstructuredPrice(models.AbstractModel):
    _description = "UnstructuredPrice"
    _name = "ubl.23.unstructuredprice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnstructuredPrice"


class UnsupportedCommodityTypeification(models.AbstractModel):
    _description = "UnsupportedCommodityClassification"
    _name = "ubl.23.unsupportedcommoditytypeification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnsupportedCommodityTypeification"

    ubl23_UnsupportedCommodityClassification_TransportationServiceType_id = (
        fields.Many2one(
            comodel_name="ubl.23.transportationservicetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class UsabilityPeriod(models.AbstractModel):
    _description = "UsabilityPeriod"
    _name = "ubl.23.usabilityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UsabilityPeriod"


class ValidityPeriod(models.AbstractModel):
    _description = "ValidityPeriod"
    _name = "ubl.23.validityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ValidityPeriod"

    ubl23_ValidityPeriod_LocationType_id = fields.Many2one(
        comodel_name="ubl.23.locationtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ValidityPeriod_PriceType_id = fields.Many2one(
        comodel_name="ubl.23.pricetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ValidityPeriod_PriceListType_id = fields.Many2one(
        comodel_name="ubl.23.pricelisttype", xsd_implicit=True, ondelete="cascade"
    )


class VesselDynamics(models.AbstractModel):
    _description = "VesselDynamics"
    _name = "ubl.23.vesseldynamics"
    _inherit = "spec.mixin.ubl"
    _binding_type = "VesselDynamics"


class WarrantyValidityPeriod(models.AbstractModel):
    _description = "WarrantyValidityPeriod"
    _name = "ubl.23.warrantyvalidityperiod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WarrantyValidityPeriod"


class WebSiteAccess(models.AbstractModel):
    _description = "WebSiteAccess"
    _name = "ubl.23.websiteaccess"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WebSiteAccess"

    ubl23_WebSiteAccess_WebSiteType_id = fields.Many2one(
        comodel_name="ubl.23.websitetype", xsd_implicit=True, ondelete="cascade"
    )


class AddressType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Address. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define common information related to an
    address.</ns1:Definition>
    <ns1:ObjectClass>Address</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.addresstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AddressType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_type="IDType",
        help=(
            "An identifier for this address within an agreed scheme of address"
            " identifiers."
        ),
    )

    ubl23_AddressTypeCode = fields.Char(
        string="A mutually agreed code signifying the type of this address",
        xsd_type="AddressTypeCodeType",
        help="A mutually agreed code signifying the type of this address.",
    )

    ubl23_AddressFormatCode = fields.Char(
        string="AddressFormatCode",
        xsd_type="AddressFormatCodeType",
        help=("A mutually agreed code signifying the format of this address."),
    )

    ubl23_Postbox = fields.Char(
        string="Postbox",
        xsd_type="PostboxType",
        help=(
            "A post office box number registered for postal delivery by a "
            "postal service provider."
        ),
    )

    ubl23_Floor = fields.Char(
        string="An identifiable floor of a building.", xsd_type="FloorType"
    )

    ubl23_Room = fields.Char(
        string="An identifiable room",
        xsd_type="RoomType",
        help="An identifiable room, suite, or apartment of a building.",
    )

    ubl23_StreetName = fields.Char(
        string="The name of the street",
        xsd_type="StreetNameType",
        help=(
            "The name of the street, road, avenue, way, etc. to which the "
            "number of the building is attached."
        ),
    )

    ubl23_AdditionalStreetName = fields.Char(
        string="AdditionalStreetName",
        xsd_type="AdditionalStreetNameType",
        help=("An additional street name used to further clarify the address."),
    )

    ubl23_BlockName = fields.Char(
        string="The name of the block",
        xsd_type="BlockNameType",
        help=(
            "The name of the block (an area surrounded by streets and usually "
            "containing several buildings) in which this address is located."
        ),
    )

    ubl23_BuildingName = fields.Char(
        string="The name of a building.", xsd_type="BuildingNameType"
    )

    ubl23_BuildingNumber = fields.Char(
        string="The number of a building within the street",
        xsd_type="BuildingNumberType",
        help="The number of a building within the street.",
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("Text describing this address for clarification or specificity"),
    )

    ubl23_InhouseMail = fields.Char(
        string="InhouseMail",
        xsd_type="InhouseMailType",
        help=(
            "The specific identifable location within a building where mail is"
            " delivered."
        ),
    )

    ubl23_Department = fields.Char(
        string="The department of the addressee.", xsd_type="DepartmentType"
    )

    ubl23_MarkAttention = fields.Char(
        string="The name",
        xsd_type="MarkAttentionType",
        help=(
            "The name, expressed as text, of a person or department in an "
            "organization to whose attention incoming mail is directed; "
            "corresponds to the printed forms for the attention of, FAO, and "
            "ATTN:."
        ),
    )

    ubl23_MarkCare = fields.Char(
        string="The name (MarkCare)",
        xsd_type="MarkCareType",
        help=(
            "The name, expressed as text, of a person or organization at this "
            "address into whose care incoming mail is entrusted; corresponds "
            "to the printed forms care of and c/o."
        ),
    )

    ubl23_PlotIdentification = fields.Char(
        string="An identifier (e.g.",
        xsd_type="PlotIdentificationType",
        help=(
            "An identifier (e.g., a parcel number) for the piece of land "
            "associated with this address."
        ),
    )

    ubl23_CitySubdivisionName = fields.Char(
        string="The name of the subdivision of a city",
        xsd_type="CitySubdivisionNameType",
        help=(
            "The name of the subdivision of a city, town, or village in which "
            "this address is located, such as the name of its district or "
            "borough."
        ),
    )

    ubl23_CityName = fields.Char(
        string="The name of a city",
        xsd_type="CityNameType",
        help="The name of a city, town, or village.",
    )

    ubl23_PostalZone = fields.Char(
        string="PostalZone",
        xsd_type="PostalZoneType",
        help=(
            "The postal identifier for this address according to the relevant "
            "national postal service, such as a ZIP code or Post Code."
        ),
    )

    ubl23_CountrySubentity = fields.Char(
        string="CountrySubentity",
        xsd_type="CountrySubentityType",
        help=(
            "The political or administrative division of a country in which "
            "this address is located, such as the name of its county, "
            "province, or state, expressed as text."
        ),
    )

    ubl23_CountrySubentityCode = fields.Char(
        string="CountrySubentityCode",
        xsd_type="CountrySubentityCodeType",
        help=(
            "The political or administrative division of a country in which "
            "this address is located, such as a county, province, or state, "
            "expressed as a code (typically nationally agreed)."
        ),
    )

    ubl23_Region = fields.Char(
        string="Region",
        xsd_type="RegionType",
        help=(
            "The recognized geographic or economic region or group of "
            "countries in which this address is located."
        ),
    )

    ubl23_District = fields.Char(
        string="District",
        xsd_type="DistrictType",
        help=(
            "The district or geographical division of a country or region in "
            "which this address is located."
        ),
    )

    ubl23_TimezoneOffset = fields.Char(
        string="The time zone in which this address is located",
        xsd_type="TimezoneOffsetType",
        help=(
            "The time zone in which this address is located (as an offset from"
            " Universal Coordinated Time (UTC)) at the time of exchange."
        ),
    )

    ubl23_AddressLine = fields.One2many(
        "ubl.23.addressline",
        "ubl23_AddressLine_AddressType_id",
        string="An unstructured address line.",
    )

    ubl23_Country = fields.Many2one(
        comodel_name="ubl.23.country",
        string="The country in which this address is situated",
        help="The country in which this address is situated.",
    )

    ubl23_LocationCoordinate = fields.One2many(
        "ubl.23.locationcoordinate",
        "ubl23_LocationCoordinate_AddressType_id",
        string="The geographical coordinates of this address",
        help="The geographical coordinates of this address.",
    )


class AttachmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Attachment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an attached document. An attachment can
    refer to an external document or be included with the document being
    exchanged.</ns1:Definition>
    <ns1:ObjectClass>Attachment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.attachmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AttachmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EmbeddedDocumentBinaryObject = fields.Char(
        string="A binary large object containing an attached document",
        xsd_type="EmbeddedDocumentBinaryObjectType",
        help="A binary large object containing an attached document.",
    )

    ubl23_EmbeddedDocument = fields.Char(
        string="A clear text object containing an attached document",
        xsd_type="EmbeddedDocumentType",
        help="A clear text object containing an attached document.",
    )

    ubl23_ExternalReference = fields.Many2one(
        comodel_name="ubl.23.externalreference",
        string="ExternalReference",
        help=(
            "A reference to an attached document that is external to the "
            "document(s) being exchanged."
        ),
    )


class TypeificationSchemeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Classification Scheme.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a classification scheme, such as a taxonomy
    for classifying goods or services.</ns1:Definition>
    <ns1:ObjectClass>Classification Scheme</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.typeificationschemetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TypeificationSchemeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this classification scheme",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this classification scheme.",
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help=("A universally unique identifier for this classification scheme."),
    )

    ubl23_LastRevisionDate = fields.Date(
        string="LastRevisionDate",
        help=("The date on which this classification scheme was last revised."),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Name = fields.Char(
        string="The name of this classification scheme",
        xsd_type="NameType",
        help="The name of this classification scheme.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this classification scheme",
        xsd_type="DescriptionType",
        help="Text describing this classification scheme.",
    )

    ubl23_AgencyID = fields.Char(
        string="AgencyID",
        xsd_type="AgencyIDType",
        help=(
            "An identifier for the agency that maintains this classification " "scheme."
        ),
    )

    ubl23_AgencyName = fields.Char(
        string="AgencyName",
        xsd_type="AgencyNameType",
        help=("The name of the agency that maintains the classification scheme."),
    )

    ubl23_VersionID = fields.Char(
        string="VersionID",
        xsd_type="VersionIDType",
        help="An identifier for the version of this classification scheme.",
    )

    ubl23_URI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="URIType",
        help=(
            "The Uniform Resource Identifier (URI) of the documentation for "
            "this classification scheme."
        ),
    )

    ubl23_SchemeURI = fields.Char(
        string="The Uniform Resource Identifier (SchemeURI)",
        xsd_type="SchemeURIType",
        help=(
            "The Uniform Resource Identifier (URI) of this classification " "scheme."
        ),
    )

    ubl23_LanguageID = fields.Char(
        string="LanguageID",
        xsd_type="LanguageIDType",
        help=("An identifier for the language of this classification scheme."),
    )

    ubl23_ClassificationCategory = fields.One2many(
        "ubl.23.typeificationcategory",
        "ubl23_ClassificationCategory_ClassificationSchemeType_id",
        string="ClassificationCategory",
        help=("A description of a category within this classification scheme."),
    )


class ConsumptionHistoryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption History. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the measurement of a type of consumption
    during a particular period, used for the subscriber to get an overview of
    his consumption</ns1:Definition>
    <ns1:ObjectClass>Consumption History</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionhistorytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionHistoryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MeterNumber = fields.Char(
        string="A text identifier for the meter measuring the consumption",
        xsd_type="MeterNumberType",
        help="A text identifier for the meter measuring the consumption.",
    )

    ubl23_Quantity = fields.Float(
        string="The quantity consumed.",
        xsd_required=True,
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_Amount = fields.Monetary(
        string="Amount",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help="The monetary amount to be charged for the quantity consumed.",
    )

    ubl23_ConsumptionLevelCode = fields.Char(
        string="The consumption level",
        xsd_type="ConsumptionLevelCodeType",
        help=(
            "The consumption level, expressed as a code used explain the "
            "consumption quantity, e.g.. diversion from the normal."
        ),
    )

    ubl23_ConsumptionLevel = fields.Char(
        string="The consumption level (ConsumptionLevel)",
        xsd_type="ConsumptionLevelType",
        help=(
            "The consumption level, expressed as text, used explain the "
            "consumption quantity, e.g.. diversion from the normal."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the consumption itself",
        xsd_type="DescriptionType",
        help="Text describing the consumption itself.",
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period during which the consumption took place",
        xsd_required=True,
        help="The period during which the consumption took place.",
    )


class ConsumptionReportReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Report Reference.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to an earlier consumption report
    (e.g., last year's consumption).</ns1:Definition>
    <ns1:ObjectClass>Consumption Report Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionreportreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionReportReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ConsumptionReportID = fields.Char(
        string="An identifier for the referenced consumption report",
        xsd_required=True,
        xsd_type="ConsumptionReportIDType",
        help="An identifier for the referenced consumption report.",
    )

    ubl23_ConsumptionType = fields.Char(
        string="The reported consumption type",
        xsd_type="ConsumptionTypeType",
        help="The reported consumption type, expressed as text.",
    )

    ubl23_ConsumptionTypeCode = fields.Char(
        string="The reported consumption type (ConsumptionTypeCode)",
        xsd_type="ConsumptionTypeCodeType",
        help="The reported consumption type, expressed as a code.",
    )

    ubl23_TotalConsumedQuantity = fields.Float(
        string="TotalConsumedQuantity",
        xsd_required=True,
        xsd_type="TotalConsumedQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total quantity consumed during the period of the referenced " "report."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period of consumption covered by the referenced report",
        xsd_required=True,
        help="The period of consumption covered by the referenced report.",
    )


class ContactType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contact. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a contactable person or department in an
    organization.</ns1:Definition>
    <ns1:ObjectClass>Contact</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contacttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContactType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this contact.", xsd_type="IDType")

    ubl23_Name = fields.Char(
        string="The name of this contact",
        xsd_type="NameType",
        help=(
            "The name of this contact. It is recommended that this be used for"
            " a functional name and not a personal name."
        ),
    )

    ubl23_JobTitle = fields.Char(
        string="The job title or function of this contact", xsd_type="JobTitleType"
    )

    ubl23_Department = fields.Char(
        string="The department where this contact works", xsd_type="DepartmentType"
    )

    ubl23_Telephone = fields.Char(
        string="The primary telephone number of this contact",
        xsd_type="TelephoneType",
        help="The primary telephone number of this contact.",
    )

    ubl23_Telefax = fields.Char(
        string="The primary fax number of this contact",
        xsd_type="TelefaxType",
        help="The primary fax number of this contact.",
    )

    ubl23_ElectronicMail = fields.Char(
        string="The primary email address of this contact",
        xsd_type="ElectronicMailType",
        help="The primary email address of this contact.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures; in particular, a textual "
            "description of the circumstances under which this contact can be "
            "used (e.g., emergency or after hours)."
        ),
    )

    ubl23_OtherCommunication = fields.One2many(
        "ubl.23.othercommunication",
        "ubl23_OtherCommunication_ContactType_id",
        string="Another means of communication with this contact",
        help="Another means of communication with this contact.",
    )


class DeclarationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Declaration. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a declaration by an economic operator of
    certain characteristics or capabilities in fulfilment of requirements
    specified in a call for tenders.</ns1:Definition>
    <ns1:ObjectClass>Declaration</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.declarationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeclarationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="The name of this declaration.", xsd_type="NameType"
    )

    ubl23_DeclarationTypeCode = fields.Char(
        string="A code signifying the type of this declaration",
        xsd_type="DeclarationTypeCodeType",
        help="A code signifying the type of this declaration.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this declaration.", xsd_type="DescriptionType"
    )

    ubl23_EvidenceSupplied = fields.One2many(
        "ubl.23.evidencesupplied",
        "ubl23_EvidenceSupplied_DeclarationType_id",
        string="The evidence supporting this declaration",
        help="The evidence supporting this declaration.",
    )


class EventTacticType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Event Tactic. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining a specific type of action or situation
    arranged by the Buyer or the Seller to promote the product or
    products.</ns1:Definition>
    <ns1:ObjectClass>Event Tactic</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.eventtactictype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventTacticType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Comment = fields.Char(
        string="Comment",
        xsd_type="CommentType",
        help=(
            "Generic field to add additional information or to specify "
            "mutually defined eventTacticTypes that are not currently listed."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The currencies, units, etc",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The currencies, units, etc. that describes what is need for the "
            "event or promotion Usage example: Number of pallets per store for"
            " a stack display"
        ),
    )

    ubl23_EventTacticEnumeration = fields.Many2one(
        comodel_name="ubl.23.eventtacticenumeration",
        string="The set of codes that describes this event tactic",
        xsd_required=True,
        help="The set of codes that describes this event tactic.",
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period covered by this event tactic",
        help="The period covered by this event tactic.",
    )


class FinancialGuaranteeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Financial Guarantee. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the bond guarantee of a tenderer or bid
    submitter's actual entry into a contract in the event that it is the
    successful bidder.</ns1:Definition>
    <ns1:ObjectClass>Financial Guarantee</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.financialguaranteetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialGuaranteeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_GuaranteeTypeCode = fields.Char(
        string="A code signifying the type of financial guarantee",
        xsd_required=True,
        xsd_type="GuaranteeTypeCodeType",
        help=(
            "A code signifying the type of financial guarantee. For instance "
            "Provisional Guarantee or Final Guarantee"
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this financial guarantee",
        xsd_type="DescriptionType",
        help="Text describing this financial guarantee.",
    )

    ubl23_LiabilityAmount = fields.Float(
        string="The amount of liability in this financial guarantee",
        xsd_type="LiabilityAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount of liability in this financial guarantee.",
    )

    ubl23_AmountRate = fields.Char(
        string="AmountRate",
        xsd_type="AmountRateType",
        help=(
            "The rate used to calculate the amount of liability in this "
            "financial guarantee."
        ),
    )

    ubl23_ConstitutionPeriod = fields.Many2one(
        comodel_name="ubl.23.constitutionperiod",
        string="ConstitutionPeriod",
        help=(
            "The period during the tendering process to which this financial "
            "guarantee has to be settled."
        ),
    )


class HazardousGoodsTransitType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Hazardous Goods Transit.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe hazardous goods in
    transit.</ns1:Definition>
    <ns1:ObjectClass>Hazardous Goods Transit</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.hazardousgoodstransittype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HazardousGoodsTransitType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TransportEmergencyCardCode = fields.Char(
        string="TransportEmergencyCardCode",
        xsd_type="TransportEmergencyCardCodeType",
        help=(
            "An identifier for a transport emergency card describing the "
            "actions to be taken in an emergency in transporting the hazardous"
            " goods. It may be the identity number of a hazardous emergency "
            "response plan assigned by the appropriate authority."
        ),
    )

    ubl23_PackingCriteriaCode = fields.Char(
        string="PackingCriteriaCode",
        xsd_type="PackingCriteriaCodeType",
        help=(
            "A code signifying the packaging requirement for transportation of"
            " the hazardous goods as assigned by IATA, IMDB, ADR, RID etc."
        ),
    )

    ubl23_HazardousRegulationCode = fields.Char(
        string="HazardousRegulationCode",
        xsd_type="HazardousRegulationCodeType",
        help=(
            "A code signifying the set of legal regulations governing the "
            "transportation of the hazardous goods."
        ),
    )

    ubl23_InhalationToxicityZoneCode = fields.Char(
        string="InhalationToxicityZoneCode",
        xsd_type="InhalationToxicityZoneCodeType",
        help=(
            "A code signifying the Inhalation Toxicity Hazard Zone for the "
            "hazardous goods, as defined by the US Department of "
            "Transportation."
        ),
    )

    ubl23_TransportAuthorizationCode = fields.Char(
        string="TransportAuthorizationCode",
        xsd_type="TransportAuthorizationCodeType",
        help=(
            "A code signifying authorization for the transportation of "
            "hazardous cargo."
        ),
    )

    ubl23_TransitDescription = fields.Char(
        string="A textual description of this hazardous goods transit",
        xsd_type="TransitDescriptionType",
        help="A textual description of this hazardous goods transit.",
    )

    ubl23_MaximumTemperature = fields.Many2one(
        comodel_name="ubl.23.maximumtemperature",
        string="MaximumTemperature",
        help=(
            "The maximum temperature at which the hazardous goods can safely "
            "be transported."
        ),
    )

    ubl23_MinimumTemperature = fields.Many2one(
        comodel_name="ubl.23.minimumtemperature",
        string="MinimumTemperature",
        help=(
            "The minimum temperature at which the hazardous goods can safely "
            "be transported."
        ),
    )


class LotsGroupType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Lots Group. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for defining set of lots.</ns1:Definition>
    <ns1:ObjectClass>Lots Group</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.lotsgrouptype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotsGroupType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LotsGroupID = fields.Char(
        string="An identifier for the lotsgroup.",
        xsd_required=True,
        xsd_type="LotsGroupIDType",
    )

    ubl23_ProcurementProjectLotReference = fields.One2many(
        "ubl.23.procurementprojectlotreference",
        "ubl23_ProcurementProjectLotReference_LotsGroupType_id",
        string="ProcurementProjectLotReference",
        help=("A Procurement project lot that is included in this LotsGroup."),
    )


class MeterType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Meter. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a meter and its readings.</ns1:Definition>
    <ns1:ObjectClass>Meter</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.metertype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeterType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MeterNumber = fields.Char(
        string="The meter number, expressed as text.", xsd_type="MeterNumberType"
    )

    ubl23_MeterName = fields.Char(
        string="The name of this meter",
        xsd_type="MeterNameType",
        help=(
            "The name of this meter, which serves as an identifier to "
            "distinguish a main meter from a submeter."
        ),
    )

    ubl23_MeterConstant = fields.Char(
        string="MeterConstant",
        xsd_type="MeterConstantType",
        help=(
            "The factor by which readings of this meter must be multiplied to "
            "calculate consumption, expressed as text."
        ),
    )

    ubl23_MeterConstantCode = fields.Char(
        string="MeterConstantCode",
        xsd_type="MeterConstantCodeType",
        help=(
            "A code signifying the formula to be used in applying the meter "
            "constant."
        ),
    )

    ubl23_TotalDeliveredQuantity = fields.Float(
        string="TotalDeliveredQuantity",
        xsd_type="TotalDeliveredQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity delivered; the total quantity consumed as calculated"
            " from the meter readings."
        ),
    )

    ubl23_MeterReading = fields.One2many(
        "ubl.23.meterreading",
        "ubl23_MeterReading_MeterType_id",
        string="A reading of this meter.",
    )

    ubl23_MeterProperty = fields.One2many(
        "ubl.23.meterproperty",
        "ubl23_MeterProperty_MeterType_id",
        string="A property of this meter.",
    )


class PaymentTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Payment Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a set of payment terms.</ns1:Definition>
    <ns1:ObjectClass>Payment Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.paymenttermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this set of payment terms",
        xsd_type="IDType",
        help="An identifier for this set of payment terms.",
    )

    ubl23_PaymentMeansID = fields.Char(
        string="PaymentMeansID",
        xsd_type="PaymentMeansIDType",
        help=(
            "An identifier for a means of payment associated with these "
            "payment terms."
        ),
    )

    ubl23_PrepaidPaymentReferenceID = fields.Char(
        string="An identifier for a reference to a prepaid payment",
        xsd_type="PrepaidPaymentReferenceIDType",
        help="An identifier for a reference to a prepaid payment.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_ReferenceEventCode = fields.Char(
        string="ReferenceEventCode",
        xsd_type="ReferenceEventCodeType",
        help=("A code signifying the event during which these terms are offered."),
    )

    ubl23_SettlementDiscountPercent = fields.Char(
        string="SettlementDiscountPercent",
        xsd_type="SettlementDiscountPercentType",
        help=(
            "The percentage for the settlement discount that is offered for "
            "payment under these payment terms."
        ),
    )

    ubl23_PenaltySurchargePercent = fields.Char(
        string="The penalty for payment after the settlement period",
        xsd_type="PenaltySurchargePercentType",
        help=(
            "The penalty for payment after the settlement period, expressed as"
            " a percentage of the payment."
        ),
    )

    ubl23_PaymentPercent = fields.Char(
        string="The part of a payment",
        xsd_type="PaymentPercentType",
        help=(
            "The part of a payment, expressed as a percent, relevant for these"
            " payment terms."
        ),
    )

    ubl23_Amount = fields.Monetary(
        string="The monetary amount covered by these payment terms",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help="The monetary amount covered by these payment terms.",
    )

    ubl23_SettlementDiscountAmount = fields.Float(
        string="SettlementDiscountAmount",
        xsd_type="SettlementDiscountAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount of a settlement discount offered for payment under "
            "these payment terms."
        ),
    )

    ubl23_PenaltyAmount = fields.Float(
        string="PenaltyAmount",
        xsd_type="PenaltyAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount of the penalty for payment after the "
            "settlement period."
        ),
    )

    ubl23_PaymentTermsDetailsURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="PaymentTermsDetailsURIType",
        help=(
            "The Uniform Resource Identifier (URI) of a document providing "
            "additional details regarding these payment terms."
        ),
    )

    ubl23_PaymentDueDate = fields.Date(
        string="The due date for these payment terms",
        help="The due date for these payment terms.",
    )

    ubl23_InstallmentDueDate = fields.Date(
        string="InstallmentDueDate",
        help=("The due date for an installment payment for these payment terms."),
    )

    ubl23_InvoicingPartyReference = fields.Char(
        string="InvoicingPartyReference",
        xsd_type="InvoicingPartyReferenceType",
        help=(
            "A reference to the payment terms used by the invoicing party. "
            "This may have been requested of the payer by the payee to "
            "accompany its remittance."
        ),
    )

    ubl23_SettlementPeriod = fields.Many2one(
        comodel_name="ubl.23.settlementperiod",
        string="The period during which settlement may occur",
        help="The period during which settlement may occur.",
    )

    ubl23_PenaltyPeriod = fields.Many2one(
        comodel_name="ubl.23.penaltyperiod",
        string="The period during which penalties may apply",
        help="The period during which penalties may apply.",
    )

    ubl23_ExchangeRate = fields.Many2one(
        comodel_name="ubl.23.exchangerate",
        string="ExchangeRate",
        help=("The currency exchange rate for purposes of these payment terms."),
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which these payment terms are valid",
        help="The period during which these payment terms are valid.",
    )


class PriceListType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Price List. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a price list.</ns1:Definition>
    <ns1:ObjectClass>Price List</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.pricelisttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PriceListType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this price list.", xsd_type="IDType"
    )

    ubl23_StatusCode = fields.Char(
        string="A code signifying whether this price list is an original",
        xsd_type="StatusCodeType",
        help=(
            "A code signifying whether this price list is an original, copy, "
            "revision, or cancellation."
        ),
    )

    ubl23_ValidityPeriod = fields.One2many(
        "ubl.23.validityperiod",
        "ubl23_ValidityPeriod_PriceListType_id",
        string="A period during which this price list is valid",
        help="A period during which this price list is valid.",
    )

    ubl23_PreviousPriceList = fields.Many2one(
        comodel_name="ubl.23.previouspricelist", string="The previous price list."
    )


class RenewalType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Renewal. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the renewal of a commercial arrangement,
    such as a contract or licence fee.</ns1:Definition>
    <ns1:ObjectClass>Renewal</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.renewaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RenewalType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Amount = fields.Monetary(
        string="The monetary amount of this renewal.",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period for which the arrangement is now valid",
    )


class RetailPlannedImpactType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Retail Planned Impact.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a planned effect of a retail event (e.g., a
    promotion or a change in inventory policy) upon supply or
    demand.</ns1:Definition>
    <ns1:ObjectClass>Retail Planned Impact</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.retailplannedimpacttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RetailPlannedImpactType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Amount = fields.Monetary(
        string="Estimated monetary value of the planned event as an impact",
        xsd_required=True,
        xsd_type="AmountType",
        currency_field="brl_currency_id",
    )

    ubl23_ForecastPurposeCode = fields.Char(
        string="ForecastPurposeCode",
        xsd_required=True,
        xsd_type="ForecastPurposeCodeType",
        help=("It will have impact on either Sales forecast or Order Forecast"),
    )

    ubl23_ForecastTypeCode = fields.Char(
        string="A code signifying the type of forecast",
        xsd_required=True,
        xsd_type="ForecastTypeCodeType",
        help=(
            "A code signifying the type of forecast. Examples of values are: "
            "BASE PROMOTIONAL SEASONAL TOTAL"
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period to which this impact applies",
        help="The period to which this impact applies.",
    )


class ServiceLevelAgreementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Service Level Agreement.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a service level agreement which regulates
    the quality, availability and responsibilities of digital
    services.</ns1:Definition>
    <ns1:ObjectClass>Service Level Agreement</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>SLA</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.servicelevelagreementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceLevelAgreementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this service level agreement",
        xsd_type="IDType",
        help="An identifier for this service level agreement.",
    )

    ubl23_ServiceTypeCode = fields.Char(
        string="ServiceTypeCode",
        xsd_type="ServiceTypeCodeType",
        help=("A specific type of service subject to this service level " "agreement."),
    )

    ubl23_ServiceType = fields.Char(
        string="ServiceType",
        xsd_type="ServiceTypeType",
        help=(
            "A specific type of service subject to this service level "
            "agreement, expressed as text."
        ),
    )

    ubl23_AvailabilityTimePercent = fields.Char(
        string="The availability percentage (e.g",
        xsd_type="AvailabilityTimePercentType",
        help="The availability percentage (e.g. 98.5% of the time).",
    )

    ubl23_MondayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on monday",
        help=(
            "Indicates whether this service is available on monday (true) or "
            "not (false)."
        ),
    )

    ubl23_TuesdayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on tuesday",
        help=(
            "Indicates whether this service is available on tuesday (true) or "
            "not (false)."
        ),
    )

    ubl23_WednesdayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on wednesday",
        help=(
            "Indicates whether this service is available on wednesday (true) "
            "or not (false)."
        ),
    )

    ubl23_ThursdayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on thursday",
        help=(
            "Indicates whether this service is available on thursday (true) or"
            " not (false)."
        ),
    )

    ubl23_FridayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on friday",
        help=(
            "Indicates whether this service is available on friday (true) or "
            "not (false)."
        ),
    )

    ubl23_SaturdayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on saturday",
        help=(
            "Indicates whether this service is available on saturday (true) or"
            " not (false)."
        ),
    )

    ubl23_SundayAvailabilityIndicator = fields.Boolean(
        string="Indicates whether this service is available on sunday",
        help=(
            "Indicates whether this service is available on sunday (true) or "
            "not (false)."
        ),
    )

    ubl23_MinimumResponseTimeDurationMeasure = fields.Char(
        string="The response time for aknowledgment",
        xsd_type="MinimumResponseTimeDurationMeasureType",
        help=(
            "The response time for aknowledgment (e.g. to send a receipt to a "
            "sending Access Point within 300 seconds)."
        ),
    )

    ubl23_MinimumDownTimeScheduleDurationMeasure = fields.Char(
        string="The minimum down time schedule for programmed maintenance",
        xsd_type="MinimumDownTimeScheduleDurationMeasureType",
        help=(
            "The minimum down time schedule for programmed maintenance (e.g. "
            "scheduled 3 days before)."
        ),
    )

    ubl23_MaximumIncidentNotificationDurationMeasure = fields.Char(
        string="MaximumIncidentNotificationDurationMeasure",
        xsd_type="MaximumIncidentNotificationDurationMeasureType",
        help=(
            "The maximum length of time between the occurrence of an incident "
            "and the issuance of a notification (e.g. within 4 hours)."
        ),
    )

    ubl23_MaximumDataLossDurationMeasure = fields.Char(
        string="The maximum data loss permitted (e.g",
        xsd_type="MaximumDataLossDurationMeasureType",
        help="The maximum data loss permitted (e.g. last 24 hours).",
    )

    ubl23_MeanTimeToRecoverDurationMeasure = fields.Char(
        string="The time taken to recover after an outage of service",
        xsd_type="MeanTimeToRecoverDurationMeasureType",
        help=(
            "The time taken to recover after an outage of service (e.g. 3 " "hours)."
        ),
    )

    ubl23_ServiceAvailabilityPeriod = fields.One2many(
        "ubl.23.serviceavailabilityperiod",
        "ubl23_ServiceAvailabilityPeriod_ServiceLevelAgreementType_id",
        string="The period for which the service is available",
        help="The period for which the service is available.",
    )

    ubl23_ServiceMaintenancePeriod = fields.One2many(
        "ubl.23.servicemaintenanceperiod",
        "ubl23_ServiceMaintenancePeriod_ServiceLevelAgreementType_id",
        string="ServiceMaintenancePeriod",
        help=(
            "The period of time designated in advance by the technical staff, "
            "during which preventive maintenance that could cause disruption "
            "of service may be performed."
        ),
    )


class StatusType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Status. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the condition or position of an
    object.</ns1:Definition>
    <ns1:ObjectClass>Status</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.statustype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatusType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ConditionCode = fields.Char(
        string="Specifies the status condition of the related object",
        xsd_type="ConditionCodeType",
        help="Specifies the status condition of the related object.",
    )

    ubl23_ReferenceDate = fields.Date(string="The reference date for this status.")

    ubl23_Description = fields.Char(
        string="Text describing this status.", xsd_type="DescriptionType"
    )

    ubl23_StatusReasonCode = fields.Char(
        string="The reason for this status condition or position",
        xsd_type="StatusReasonCodeType",
        help=(
            "The reason for this status condition or position, expressed as a " "code."
        ),
    )

    ubl23_StatusReason = fields.Char(
        string="StatusReason",
        xsd_type="StatusReasonType",
        help=(
            "The reason for this status condition or position, expressed as " "text."
        ),
    )

    ubl23_SequenceID = fields.Char(
        string="A sequence identifier for this status",
        xsd_type="SequenceIDType",
        help="A sequence identifier for this status.",
    )

    ubl23_Text = fields.Char(
        string="Provides any textual information related to this status",
        xsd_type="TextType",
        help="Provides any textual information related to this status.",
    )

    ubl23_IndicationIndicator = fields.Boolean(
        string="Specifies an indicator relevant to a specific status",
        help="Specifies an indicator relevant to a specific status.",
    )

    ubl23_Percent = fields.Char(
        string="A percentage meaningful in the context of this status",
        xsd_type="PercentType",
        help="A percentage meaningful in the context of this status.",
    )

    ubl23_ReliabilityPercent = fields.Char(
        string="The reliability of this status",
        xsd_type="ReliabilityPercentType",
        help="The reliability of this status, expressed as a percentage.",
    )

    ubl23_SubStatus = fields.One2many(
        "ubl.23.substatus",
        "ubl23_SubStatus_StatusType_id",
        string="SubStatus",
        help=("An additional sub status to clarify or ellaborate on the status"),
    )

    ubl23_Condition = fields.One2many(
        "ubl.23.condition",
        "ubl23_Condition_StatusType_id",
        string="Condition",
        help=(
            "Measurements that quantify the condition of the objects covered "
            "by the status."
        ),
    )


class StowageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Stowage. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a location on board a means of transport
    where specified goods or transport equipment have been stowed or are to be
    stowed.</ns1:Definition>
    <ns1:ObjectClass>Stowage</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.stowagetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StowageType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LocationID = fields.Char(
        string="An identifier for the location.", xsd_type="LocationIDType"
    )

    ubl23_Location = fields.Char(
        string="Text describing the location.", xsd_type="LocationType"
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_StowageType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "stowage."
        ),
    )


class TenderingCriterionResponseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Criterion Response.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a response to a criterion
    property.</ns1:Definition>
    <ns1:ObjectClass>Tendering Criterion Response</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingcriterionresponsetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionResponseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this criterion property response",
        xsd_type="IDType",
        help="An identifier for this criterion property response.",
    )

    ubl23_Name = fields.Char(
        string="The name of the criterion property response", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="A description of the criterion response", xsd_type="DescriptionType"
    )

    ubl23_ValidatedCriterionPropertyID = fields.Char(
        string="An identifier for this item of criterion support",
        xsd_type="ValidatedCriterionPropertyIDType",
        help="An identifier for this item of criterion support.",
    )

    ubl23_ConfidentialityLevelCode = fields.Char(
        string="ConfidentialityLevelCode",
        xsd_type="ConfidentialityLevelCodeType",
        help=(
            "A code specifying the confidentiality level of the response to "
            "this criterion."
        ),
    )

    ubl23_ResponseValue = fields.One2many(
        "ubl.23.responsevalue",
        "ubl23_ResponseValue_TenderingCriterionResponseType_id",
        string="The criterion requirement property values",
        help="The criterion requirement property values.",
    )

    ubl23_ApplicablePeriod = fields.One2many(
        "ubl.23.applicableperiod",
        "ubl23_ApplicablePeriod_TenderingCriterionResponseType_id",
        string="ApplicablePeriod",
        help=("The period to which this criterion property response applies."),
    )

    ubl23_EvidenceSupplied = fields.One2many(
        "ubl.23.evidencesupplied",
        "ubl23_EvidenceSupplied_TenderingCriterionResponseType_id",
        string="EvidenceSupplied",
        help=(
            "A reference to the evidence supporting this criterion property "
            "response."
        ),
    )

    ubl23_ProcurementProjectLotReference = fields.One2many(
        "ubl.23.procurementprojectlotreference",
        "ubl23_ProcurementProjectLotReference_TenderingCriterionResponseType_id",
        string="One or more lots to which the criterion response applies",
    )

    ubl23_CommodityClassification = fields.One2many(
        "ubl.23.commoditytypeification",
        "ubl23_CommodityClassification_TenderingCriterionResponseType_id",
        string="CommodityClassification",
        help=("One or more classification to which this criterion response " "applies"),
    )


class WebSiteType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Web Site. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a web site.</ns1:Definition>
    <ns1:ObjectClass>Web Site</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.websitetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WebSiteType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for a specific web site",
        xsd_type="IDType",
        help="An identifier for a specific web site.",
    )

    ubl23_Name = fields.Char(
        string="The common name of the web site.", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="Text describing the web site.", xsd_type="DescriptionType"
    )

    ubl23_WebSiteTypeCode = fields.Char(
        string="A code that specifies the type web site",
        xsd_type="WebSiteTypeCodeType",
        help="A code that specifies the type web site.",
    )

    ubl23_URI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_required=True,
        xsd_type="URIType",
        help=(
            "The Uniform Resource Identifier (URI) of the web site; i.e., its "
            "Uniform Resource Locator (URL)."
        ),
    )

    ubl23_WebSiteAccess = fields.One2many(
        "ubl.23.websiteaccess",
        "ubl23_WebSiteAccess_WebSiteType_id",
        string="Access information for the website",
        help="Access information for the website (e.g. guest credentials).",
    )


class AccountingContact(models.AbstractModel):
    _description = "AccountingContact"
    _name = "ubl.23.accountingcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AccountingContact"


class AdditionalWebSite(models.AbstractModel):
    _description = "AdditionalWebSite"
    _name = "ubl.23.additionalwebsite"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalWebSite"

    ubl23_AdditionalWebSite_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class Address(models.AbstractModel):
    _description = "Address"
    _name = "ubl.23.address"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Address"


class ApplicableAddress(models.AbstractModel):
    _description = "ApplicableAddress"
    _name = "ubl.23.applicableaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicableAddress"


class ApplicableTerritoryAddress(models.AbstractModel):
    _description = "ApplicableTerritoryAddress"
    _name = "ubl.23.applicableterritoryaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicableTerritoryAddress"

    ubl23_ApplicableTerritoryAddress_ItemLocationQuantityType_id = fields.Many2one(
        comodel_name="ubl.23.itemlocationquantitytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Attachment(models.AbstractModel):
    _description = "Attachment"
    _name = "ubl.23.attachment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Attachment"


class BonusPaymentTerms(models.AbstractModel):
    _description = "BonusPaymentTerms"
    _name = "ubl.23.bonuspaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BonusPaymentTerms"


class BusinessTypeificationScheme(models.AbstractModel):
    _description = "BusinessClassificationScheme"
    _name = "ubl.23.businesstypeificationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BusinessTypeificationScheme"


class BuyerContact(models.AbstractModel):
    _description = "BuyerContact"
    _name = "ubl.23.buyercontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BuyerContact"


class TypeificationScheme(models.AbstractModel):
    _description = "ClassificationScheme"
    _name = "ubl.23.typeificationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TypeificationScheme"


class CollectPaymentTerms(models.AbstractModel):
    _description = "CollectPaymentTerms"
    _name = "ubl.23.collectpaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CollectPaymentTerms"


class CommercialContact(models.AbstractModel):
    _description = "CommercialContact"
    _name = "ubl.23.commercialcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CommercialContact"


class CommissionPaymentTerms(models.AbstractModel):
    _description = "CommissionPaymentTerms"
    _name = "ubl.23.commissionpaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CommissionPaymentTerms"


class ConsumptionHistory(models.AbstractModel):
    _description = "ConsumptionHistory"
    _name = "ubl.23.consumptionhistory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionHistory"

    ubl23_ConsumptionHistory_ConsumptionReportType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionreporttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ConsumptionReportReference(models.AbstractModel):
    _description = "ConsumptionReportReference"
    _name = "ubl.23.consumptionreportreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionReportReference"

    ubl23_ConsumptionReportReference_ConsumptionReportType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionreporttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Contact(models.AbstractModel):
    _description = "Contact"
    _name = "ubl.23.contact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Contact"

    ubl23_Contact_EventType_id = fields.Many2one(
        comodel_name="ubl.23.eventtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Contact_TransportEventType_id = fields.Many2one(
        comodel_name="ubl.23.transporteventtype", xsd_implicit=True, ondelete="cascade"
    )


class CurrentStatus(models.AbstractModel):
    _description = "CurrentStatus"
    _name = "ubl.23.currentstatus"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CurrentStatus"

    ubl23_CurrentStatus_EventType_id = fields.Many2one(
        comodel_name="ubl.23.eventtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_CurrentStatus_TransportEventType_id = fields.Many2one(
        comodel_name="ubl.23.transporteventtype", xsd_implicit=True, ondelete="cascade"
    )


class Declaration(models.AbstractModel):
    _description = "Declaration"
    _name = "ubl.23.declaration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Declaration"

    ubl23_Declaration_QualifyingPartyType_id = fields.Many2one(
        comodel_name="ubl.23.qualifyingpartytype", xsd_implicit=True, ondelete="cascade"
    )


class DeliveryAddress(models.AbstractModel):
    _description = "DeliveryAddress"
    _name = "ubl.23.deliveryaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryAddress"


class DeliveryContact(models.AbstractModel):
    _description = "DeliveryContact"
    _name = "ubl.23.deliverycontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryContact"


class DespatchAddress(models.AbstractModel):
    _description = "DespatchAddress"
    _name = "ubl.23.despatchaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchAddress"


class DespatchContact(models.AbstractModel):
    _description = "DespatchContact"
    _name = "ubl.23.despatchcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchContact"


class DigitalSignatureAttachment(models.AbstractModel):
    _description = "DigitalSignatureAttachment"
    _name = "ubl.23.digitalsignatureattachment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalSignatureAttachment"


class DisbursementPaymentTerms(models.AbstractModel):
    _description = "DisbursementPaymentTerms"
    _name = "ubl.23.disbursementpaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DisbursementPaymentTerms"


class EncryptionCertificateAttachment(models.AbstractModel):
    _description = "EncryptionCertificateAttachment"
    _name = "ubl.23.encryptioncertificateattachment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionCertificateAttachment"


class EventTactic(models.AbstractModel):
    _description = "EventTactic"
    _name = "ubl.23.eventtactic"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventTactic"

    ubl23_EventTactic_PromotionalSpecificationType_id = fields.Many2one(
        comodel_name="ubl.23.promotionalspecificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class FinalFinancialGuarantee(models.AbstractModel):
    _description = "FinalFinancialGuarantee"
    _name = "ubl.23.finalfinancialguarantee"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinalFinancialGuarantee"


class FinancialGuarantee(models.AbstractModel):
    _description = "FinancialGuarantee"
    _name = "ubl.23.financialguarantee"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialGuarantee"


class GoodsItemPassportAttachment(models.AbstractModel):
    _description = "GoodsItemPassportAttachment"
    _name = "ubl.23.goodsitempassportattachment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemPassportAttachment"


class HazardousGoodsTransit(models.AbstractModel):
    _description = "HazardousGoodsTransit"
    _name = "ubl.23.hazardousgoodstransit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HazardousGoodsTransit"

    ubl23_HazardousGoodsTransit_HazardousItemType_id = fields.Many2one(
        comodel_name="ubl.23.hazardousitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_HazardousGoodsTransit_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_HazardousGoodsTransit_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class JurisdictionRegionAddress(models.AbstractModel):
    _description = "JurisdictionRegionAddress"
    _name = "ubl.23.jurisdictionregionaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "JurisdictionRegionAddress"

    ubl23_JurisdictionRegionAddress_CorporateRegistrationSchemeType_id = (
        fields.Many2one(
            comodel_name="ubl.23.corporateregistrationschemetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )
    ubl23_JurisdictionRegionAddress_LegislationType_id = fields.Many2one(
        comodel_name="ubl.23.legislationtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_JurisdictionRegionAddress_TaxSchemeType_id = fields.Many2one(
        comodel_name="ubl.23.taxschemetype", xsd_implicit=True, ondelete="cascade"
    )


class LegalContact(models.AbstractModel):
    _description = "LegalContact"
    _name = "ubl.23.legalcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LegalContact"


class LocationAddress(models.AbstractModel):
    _description = "LocationAddress"
    _name = "ubl.23.locationaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LocationAddress"


class LotsGroup(models.AbstractModel):
    _description = "LotsGroup"
    _name = "ubl.23.lotsgroup"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotsGroup"

    ubl23_LotsGroup_LotDistributionType_id = fields.Many2one(
        comodel_name="ubl.23.lotdistributiontype", xsd_implicit=True, ondelete="cascade"
    )


class Meter(models.AbstractModel):
    _description = "Meter"
    _name = "ubl.23.meter"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Meter"


class OriginAddress(models.AbstractModel):
    _description = "OriginAddress"
    _name = "ubl.23.originaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginAddress"

    ubl23_OriginAddress_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class PaymentTerms(models.AbstractModel):
    _description = "PaymentTerms"
    _name = "ubl.23.paymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentTerms"

    ubl23_PaymentTerms_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_PaymentTerms_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_PaymentTerms_OnAccountPaymentType_id = fields.Many2one(
        comodel_name="ubl.23.onaccountpaymenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_PaymentTerms_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_PaymentTerms_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_PaymentTerms_TransportExecutionTermsType_id = fields.Many2one(
        comodel_name="ubl.23.transportexecutiontermstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PenaltyPaymentTerms(models.AbstractModel):
    _description = "PenaltyPaymentTerms"
    _name = "ubl.23.penaltypaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PenaltyPaymentTerms"


class PositionOnBoardStowage(models.AbstractModel):
    _description = "PositionOnBoardStowage"
    _name = "ubl.23.positiononboardstowage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PositionOnBoardStowage"


class PostalAddress(models.AbstractModel):
    _description = "PostalAddress"
    _name = "ubl.23.postaladdress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PostalAddress"


class PrepaidPaymentTerms(models.AbstractModel):
    _description = "PrepaidPaymentTerms"
    _name = "ubl.23.prepaidpaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PrepaidPaymentTerms"


class PreviousPriceList(models.AbstractModel):
    _description = "PreviousPriceList"
    _name = "ubl.23.previouspricelist"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreviousPriceList"


class PriceList(models.AbstractModel):
    _description = "PriceList"
    _name = "ubl.23.pricelist"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PriceList"


class RegistrationAddress(models.AbstractModel):
    _description = "RegistrationAddress"
    _name = "ubl.23.registrationaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RegistrationAddress"


class Renewal(models.AbstractModel):
    _description = "Renewal"
    _name = "ubl.23.renewal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Renewal"

    ubl23_Renewal_ContractExtensionType_id = fields.Many2one(
        comodel_name="ubl.23.contractextensiontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class RequestedTypeificationScheme(models.AbstractModel):
    _description = "RequestedClassificationScheme"
    _name = "ubl.23.requestedtypeificationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedTypeificationScheme"


class RequiredBusinessTypeificationScheme(models.AbstractModel):
    _description = "RequiredBusinessClassificationScheme"
    _name = "ubl.23.requiredbusinesstypeificationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredBusinessTypeificationScheme"

    ubl23_RequiredBusinessClassificationScheme_TendererQualificationRequestType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tendererqualificationrequesttype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class RequiredTypeificationScheme(models.AbstractModel):
    _description = "RequiredClassificationScheme"
    _name = "ubl.23.requiredtypeificationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredTypeificationScheme"


class RequiredFinancialGuarantee(models.AbstractModel):
    _description = "RequiredFinancialGuarantee"
    _name = "ubl.23.requiredfinancialguarantee"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredFinancialGuarantee"

    ubl23_RequiredFinancialGuarantee_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class ResidenceAddress(models.AbstractModel):
    _description = "ResidenceAddress"
    _name = "ubl.23.residenceaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResidenceAddress"


class RetailPlannedImpact(models.AbstractModel):
    _description = "RetailPlannedImpact"
    _name = "ubl.23.retailplannedimpact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RetailPlannedImpact"

    ubl23_RetailPlannedImpact_EventLineItemType_id = fields.Many2one(
        comodel_name="ubl.23.eventlineitemtype", xsd_implicit=True, ondelete="cascade"
    )


class ReturnAddress(models.AbstractModel):
    _description = "ReturnAddress"
    _name = "ubl.23.returnaddress"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReturnAddress"


class SellerContact(models.AbstractModel):
    _description = "SellerContact"
    _name = "ubl.23.sellercontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SellerContact"


class ServiceChargePaymentTerms(models.AbstractModel):
    _description = "ServiceChargePaymentTerms"
    _name = "ubl.23.servicechargepaymentterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceChargePaymentTerms"


class ServiceLevelAgreement(models.AbstractModel):
    _description = "ServiceLevelAgreement"
    _name = "ubl.23.servicelevelagreement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceLevelAgreement"

    ubl23_ServiceLevelAgreement_DigitalAgreementTermsType_id = fields.Many2one(
        comodel_name="ubl.23.digitalagreementtermstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SignatoryContact(models.AbstractModel):
    _description = "SignatoryContact"
    _name = "ubl.23.signatorycontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SignatoryContact"


class Status(models.AbstractModel):
    _description = "Status"
    _name = "ubl.23.status"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Status"

    ubl23_Status_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Status_ResponseType_id = fields.Many2one(
        comodel_name="ubl.23.responsetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Status_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Stowage(models.AbstractModel):
    _description = "Stowage"
    _name = "ubl.23.stowage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Stowage"


class SubStatus(models.AbstractModel):
    _description = "SubStatus"
    _name = "ubl.23.substatus"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubStatus"

    ubl23_SubStatus_StatusType_id = fields.Many2one(
        comodel_name="ubl.23.statustype", xsd_implicit=True, ondelete="cascade"
    )


class SupportContact(models.AbstractModel):
    _description = "SupportContact"
    _name = "ubl.23.supportcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupportContact"


class TechnicalContact(models.AbstractModel):
    _description = "TechnicalContact"
    _name = "ubl.23.technicalcontact"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TechnicalContact"


class TenderingCriterionResponse(models.AbstractModel):
    _description = "TenderingCriterionResponse"
    _name = "ubl.23.tenderingcriterionresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionResponse"


class UtilityMeter(models.AbstractModel):
    _description = "UtilityMeter"
    _name = "ubl.23.utilitymeter"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilityMeter"

    ubl23_UtilityMeter_ConsumptionPointType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionpointtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class WebSite(models.AbstractModel):
    _description = "WebSite"
    _name = "ubl.23.website"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WebSite"


class BudgetAccountType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Budget Account. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a budget account.</ns1:Definition>
    <ns1:ObjectClass>Budget Account</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.budgetaccounttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BudgetAccountType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the budget account",
        xsd_type="IDType",
        help=(
            "An identifier for the budget account, typically an internal "
            "accounting reference."
        ),
    )

    ubl23_BudgetYearNumeric = fields.Float(
        string="The number of the year for this budget account",
        xsd_type="BudgetYearNumericType",
        digits=(
            16,
            4,
        ),
        help="The number of the year for this budget account, e.g. 2012",
    )

    ubl23_RequiredClassificationScheme = fields.Many2one(
        comodel_name="ubl.23.requiredtypeificationscheme",
        string="A classification scheme required for this budget account",
        help="A classification scheme required for this budget account.",
    )


class CapabilityType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Capability. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a specific capability of an
    organization.</ns1:Definition>
    <ns1:ObjectClass>Capability</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.capabilitytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CapabilityType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CapabilityTypeCode = fields.Char(
        string="CapabilityTypeCode",
        xsd_type="CapabilityTypeCodeType",
        help=(
            "This class can be used as Financial or Technical capabilities. "
            "For instance, Turnover or Qualified Engineers are two possible "
            "codes."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this capability.", xsd_type="DescriptionType"
    )

    ubl23_ValueAmount = fields.Float(
        string="A monetary amount as a measure of this capability",
        xsd_type="ValueAmountType",
        digits=(
            16,
            4,
        ),
        help="A monetary amount as a measure of this capability.",
    )

    ubl23_ValueQuantity = fields.Float(
        string="A quantity as a measure of this capability",
        xsd_type="ValueQuantityType",
        digits=(
            16,
            4,
        ),
        help="A quantity as a measure of this capability.",
    )

    ubl23_EvidenceSupplied = fields.One2many(
        "ubl.23.evidencesupplied",
        "ubl23_EvidenceSupplied_CapabilityType_id",
        string="The evidence that supports the capability claim",
        help="The evidence that supports the capability claim.",
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period of time for which this capability is",
        help=(
            "The period of time for which this capability is (or has been) " "valid."
        ),
    )

    ubl23_WebSite = fields.Many2one(
        comodel_name="ubl.23.website",
        string="A web site where the capability is detailed",
        help="A web site where the capability is detailed.",
    )


class ConsumptionPointType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Point. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define the point of consumption for a utility, such
    as a meter.</ns1:Definition>
    <ns1:ObjectClass>Consumption Point</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionpointtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionPointType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this point of consumption",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this point of consumption.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this consumption point",
        xsd_type="DescriptionType",
        help="Text describing this consumption point.",
    )

    ubl23_SubscriberID = fields.Char(
        string="SubscriberID",
        xsd_type="SubscriberIDType",
        help=(
            "An identifier for the subscriber responsible for the consumption "
            "at this consumption point."
        ),
    )

    ubl23_SubscriberType = fields.Char(
        string="The type of subscriber",
        xsd_type="SubscriberTypeType",
        help="The type of subscriber, expressed as text.",
    )

    ubl23_SubscriberTypeCode = fields.Char(
        string="The type of subscriber (SubscriberTypeCode)",
        xsd_type="SubscriberTypeCodeType",
        help="The type of subscriber, expressed as a code.",
    )

    ubl23_TotalDeliveredQuantity = fields.Float(
        string="The total quantity delivered",
        xsd_type="TotalDeliveredQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The total quantity delivered, calculated at this consumption " "point."),
    )

    ubl23_Address = fields.Many2one(
        comodel_name="ubl.23.address",
        string="The address of this consumption point",
        help="The address of this consumption point.",
    )

    ubl23_WebSiteAccess = fields.Many2one(
        comodel_name="ubl.23.websiteaccess",
        string="WebSiteAccess",
        help=("Access information for the website of this consumption point."),
    )

    ubl23_UtilityMeter = fields.One2many(
        "ubl.23.utilitymeter",
        "ubl23_UtilityMeter_ConsumptionPointType_id",
        string="A meter at this consumption point.",
    )


class ContractExtensionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contract Extension. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe possible extensions to a
    contract.</ns1:Definition>
    <ns1:ObjectClass>Contract Extension</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractextensiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractExtensionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_OptionsDescription = fields.Char(
        string="OptionsDescription",
        xsd_type="OptionsDescriptionType",
        help=(
            "A description for the possible options that can be carried out "
            "during the execution of the contract."
        ),
    )

    ubl23_MinimumNumberNumeric = fields.Float(
        string="MinimumNumberNumeric",
        xsd_type="MinimumNumberNumericType",
        digits=(
            16,
            4,
        ),
        help="The fixed minimum number of contract extensions or renewals.",
    )

    ubl23_MaximumNumberNumeric = fields.Float(
        string="The maximum allowed number of contract extensions",
        xsd_type="MaximumNumberNumericType",
        digits=(
            16,
            4,
        ),
        help="The maximum allowed number of contract extensions.",
    )

    ubl23_RenewalsIndicator = fields.Boolean(
        string="Indicates that the contract can be extended using renewals",
        help="Indicates that the contract can be extended using renewals.",
    )

    ubl23_OptionValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.optionvalidityperiod",
        string="OptionValidityPeriod",
        help=(
            "The period during which the option for extending the contract is "
            "available."
        ),
    )

    ubl23_Renewal = fields.One2many(
        "ubl.23.renewal",
        "ubl23_Renewal_ContractExtensionType_id",
        string="The period allowed for each contract extension",
        help="The period allowed for each contract extension.",
    )


class CorporateRegistrationSchemeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Corporate Registration Scheme.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a scheme for corporate
    registration.</ns1:Definition>
    <ns1:ObjectClass>Corporate Registration Scheme</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.corporateregistrationschemetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CorporateRegistrationSchemeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this registration scheme",
        xsd_type="IDType",
        help="An identifier for this registration scheme.",
    )

    ubl23_Name = fields.Char(
        string="The name of this registration scheme",
        xsd_type="NameType",
        help="The name of this registration scheme.",
    )

    ubl23_CorporateRegistrationTypeCode = fields.Char(
        string="A code signifying the type of this registration scheme",
        xsd_type="CorporateRegistrationTypeCodeType",
        help="A code signifying the type of this registration scheme.",
    )

    ubl23_JurisdictionRegionAddress = fields.One2many(
        "ubl.23.jurisdictionregionaddress",
        "ubl23_JurisdictionRegionAddress_CorporateRegistrationSchemeType_id",
        string="JurisdictionRegionAddress",
        help="A geographic area in which this registration scheme applies.",
    )


class DigitalAgreementTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Digital Agreement Terms.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the terms and conditions of a digital
    agreement.</ns1:Definition>
    <ns1:ObjectClass>Digital Agreement Terms</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Trading Partner Agreement
    Terms</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.digitalagreementtermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalAgreementTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("Text describing the terms and conditions of a digital agreement."),
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="ValidityPeriod",
        help=("The period of time for which this digital agreement is valid."),
    )

    ubl23_AdoptionPeriod = fields.Many2one(
        comodel_name="ubl.23.adoptionperiod",
        string="AdoptionPeriod",
        help="The period during which a digital agreement must be adopted.",
    )

    ubl23_ServiceLevelAgreement = fields.One2many(
        "ubl.23.servicelevelagreement",
        "ubl23_ServiceLevelAgreement_DigitalAgreementTermsType_id",
        string="The service level agreement which regulates the quality",
        help=(
            "The service level agreement which regulates the quality, "
            "availability and responsibilities of digital services."
        ),
    )


class DocumentReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Document Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a document.</ns1:Definition>
    <ns1:ObjectClass>Document Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.documentreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the referenced document",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the referenced document.",
    )

    ubl23_CopyIndicator = fields.Boolean(
        string="An indicator that the referenced document is a copy",
        help=(
            "An indicator that the referenced document is a copy (true) or the"
            " original (false)."
        ),
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help="A universally unique identifier for this document reference.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date",
        help=(
            "The date, assigned by the sender of the referenced document, on "
            "which the document was issued."
        ),
    )

    ubl23_DocumentTypeCode = fields.Char(
        string="The type of document being referenced",
        xsd_type="DocumentTypeCodeType",
        help="The type of document being referenced, expressed as a code.",
    )

    ubl23_DocumentType = fields.Char(
        string="The type of document being referenced (DocumentType)",
        xsd_type="DocumentTypeType",
        help="The type of document being referenced, expressed as text.",
    )

    ubl23_XPath = fields.Char(
        string="XPath",
        xsd_type="XPathType",
        help=(
            "An unambiguous location within the bounding document or the "
            "document referenced by the parent DocumentReference, expressed as"
            " an XPath"
        ),
    )

    ubl23_ReferencedDocumentInternalAddress = fields.Char(
        string="ReferencedDocumentInternalAddress",
        xsd_type="ReferencedDocumentInternalAddressType",
        help="A pointer to a location within the document being referenced",
    )

    ubl23_LanguageID = fields.Char(
        string="LanguageID",
        xsd_type="LanguageIDType",
        help=("An identifier for the language used in the referenced document."),
    )

    ubl23_LocaleCode = fields.Char(
        string="LocaleCode",
        xsd_type="LocaleCodeType",
        help=(
            "A code signifying the locale in which the language in the "
            "referenced document is used."
        ),
    )

    ubl23_VersionID = fields.Char(
        string="VersionID",
        xsd_type="VersionIDType",
        help=("An identifier for the current version of the referenced document."),
    )

    ubl23_DocumentStatusCode = fields.Char(
        string="DocumentStatusCode",
        xsd_type="DocumentStatusCodeType",
        help=(
            "A code signifying the status of the reference document with "
            "respect to its original state."
        ),
    )

    ubl23_DocumentDescription = fields.Char(
        string="Text describing the referenced document",
        xsd_type="DocumentDescriptionType",
        help="Text describing the referenced document.",
    )

    ubl23_Attachment = fields.Many2one(
        comodel_name="ubl.23.attachment",
        string="Attachment",
        help=(
            "The referenced document as an attachment to the document from "
            "which it is referenced."
        ),
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period for which this document reference is valid",
        help="The period for which this document reference is valid.",
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="The party who issued the referenced document",
        help="The party who issued the referenced document.",
    )

    ubl23_ResultOfVerification = fields.Many2one(
        comodel_name="ubl.23.resultofverification",
        string="ResultOfVerification",
        help=(
            "The result of an attempt to verify a signature associated with "
            "the referenced document."
        ),
    )


class EncryptionDataType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Encryption Data. Details</ns1:DictionaryEntryName>
    <ns1:Definition>Details of an encryption process</ns1:Definition>
    <ns1:ObjectClass>Encryption Data</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.encryptiondatatype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionDataType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MessageFormat = fields.Char(
        string="The format of the encrypted message.",
        xsd_required=True,
        xsd_type="MessageFormatType",
    )

    ubl23_EncryptionCertificateAttachment = fields.Many2one(
        comodel_name="ubl.23.encryptioncertificateattachment",
        string="EncryptionCertificateAttachment",
        help=("A reference to the certificate used in the encryption process."),
    )

    ubl23_EncryptionCertificatePathChain = fields.One2many(
        "ubl.23.encryptioncertificatepathchain",
        "ubl23_EncryptionCertificatePathChain_EncryptionDataType_id",
        string="EncryptionCertificatePathChain",
        help=("A reference to the path chain defined for the encryption process."),
    )

    ubl23_EncryptionSymmetricAlgorithm = fields.One2many(
        "ubl.23.encryptionsymmetricalgorithm",
        "ubl23_EncryptionSymmetricAlgorithm_EncryptionDataType_id",
        string="EncryptionSymmetricAlgorithm",
        help=(
            "A reference to the symmetric algorithm used for the encryption " "process."
        ),
    )


class FinancialInstitutionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Financial Institution.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a financial institution.</ns1:Definition>
    <ns1:ObjectClass>Financial Institution</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.financialinstitutiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialInstitutionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this financial institution",
        xsd_type="IDType",
        help=(
            "An identifier for this financial institution. It is recommended "
            "that the ISO 9362 Bank Identification Code (BIC) be used as the "
            "ID."
        ),
    )

    ubl23_Name = fields.Char(
        string="The name of this financial institution",
        xsd_type="NameType",
        help="The name of this financial institution.",
    )

    ubl23_Address = fields.Many2one(
        comodel_name="ubl.23.address",
        string="The address of this financial institution",
        help="The address of this financial institution.",
    )


class LegislationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Legislation. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a reference to a piece of
    legislation.</ns1:Definition>
    <ns1:ObjectClass>Legislation</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.legislationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LegislationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier to refer to the legislation",
        xsd_type="IDType",
        help="An identifier to refer to the legislation.",
    )

    ubl23_Title = fields.Char(
        string="The title of the legislation.", xsd_type="TitleType"
    )

    ubl23_Description = fields.Char(
        string="The textual description of the legislation",
        xsd_type="DescriptionType",
        help="The textual description of the legislation.",
    )

    ubl23_JurisdictionLevel = fields.Char(
        string="The jurisdiction level for the legislation",
        xsd_type="JurisdictionLevelType",
        help="The jurisdiction level for the legislation.",
    )

    ubl23_Article = fields.Char(
        string="The article of the legislation.", xsd_type="ArticleType"
    )

    ubl23_URI = fields.Char(string="A URI to the legislation.", xsd_type="URIType")

    ubl23_Language = fields.One2many(
        "ubl.23.language",
        "ubl23_Language_LegislationType_id",
        string="The language of the legislation.",
    )

    ubl23_JurisdictionRegionAddress = fields.One2many(
        "ubl.23.jurisdictionregionaddress",
        "ubl23_JurisdictionRegionAddress_LegislationType_id",
        string="The geopolitical region in which this legislation applies",
        help="The geopolitical region in which this legislation applies.",
    )


class LotDistributionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Lot Distribution. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining how to treat different lots in a single
    procurement.</ns1:Definition>
    <ns1:ObjectClass>Lot Distribution</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.lotdistributiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotDistributionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MaximumLotsAwardedNumeric = fields.Float(
        string="MaximumLotsAwardedNumeric",
        xsd_type="MaximumLotsAwardedNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of lots that can be awarded to a single " "tenderer."
        ),
    )

    ubl23_MaximumLotsSubmittedNumeric = fields.Float(
        string="MaximumLotsSubmittedNumeric",
        xsd_type="MaximumLotsSubmittedNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of lots to which a tenderer can submit an " "offer to."
        ),
    )

    ubl23_GroupingLots = fields.Char(
        string="GroupingLots",
        xsd_type="GroupingLotsType",
        help="Description on how to combine lots when submitting a tender.",
    )

    ubl23_LotsGroup = fields.One2many(
        "ubl.23.lotsgroup",
        "ubl23_LotsGroup_LotDistributionType_id",
        string="A combination of lots used when evaluating a tender",
        help="A combination of lots used when evaluating a tender.",
    )


class OnAccountPaymentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>On Account Payment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A scheduled prepayment (on-account payment) for a estimated
    utility consumption</ns1:Definition>
    <ns1:ObjectClass>On Account Payment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.onaccountpaymenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OnAccountPaymentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EstimatedConsumedQuantity = fields.Float(
        string="The estimated consumed quantity covered by the payment",
        xsd_required=True,
        xsd_type="EstimatedConsumedQuantityType",
        digits=(
            16,
            4,
        ),
        help="The estimated consumed quantity covered by the payment.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_OnAccountPaymentType_id",
        string="PaymentTerms",
        help=("A specification of payment terms associated with this payment."),
    )


class ResponseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Response. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an application-level response to a
    document.</ns1:Definition>
    <ns1:ObjectClass>Response</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.responsetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ReferenceID = fields.Char(
        string="An identifier for the section",
        xsd_type="ReferenceIDType",
        help=(
            "An identifier for the section (or line) of the document to which "
            "this response applies."
        ),
    )

    ubl23_ResponseCode = fields.Char(
        string="A code signifying the type of response",
        xsd_type="ResponseCodeType",
        help="A code signifying the type of response.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this response.", xsd_type="DescriptionType"
    )

    ubl23_EffectiveDate = fields.Date(
        string="The date upon which this response is valid",
        help="The date upon which this response is valid.",
    )

    ubl23_Status = fields.One2many(
        "ubl.23.status",
        "ubl23_Status_ResponseType_id",
        string="A status report associated with this response",
        help="A status report associated with this response.",
    )


class ServiceProviderPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Service Provider Party.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a party contracting to provide services,
    such as transportation, finance, etc.</ns1:Definition>
    <ns1:ObjectClass>Service Provider Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.serviceproviderpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceProviderPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this service provider",
        xsd_type="IDType",
        help="An identifier for this service provider.",
    )

    ubl23_ServiceTypeCode = fields.Char(
        string="The type of service provided",
        xsd_type="ServiceTypeCodeType",
        help="The type of service provided, expressed as a code.",
    )

    ubl23_ServiceType = fields.Char(
        string="The type of service provided (ServiceType)",
        xsd_type="ServiceTypeType",
        help="The type of service provided, expressed as text.",
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="The party providing the service.",
        xsd_required=True,
    )

    ubl23_SellerContact = fields.Many2one(
        comodel_name="ubl.23.sellercontact",
        string="The contact for the service provider",
        help="The contact for the service provider.",
    )


class ShipStoreArticleType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ship Store Article. Details</ns1:DictionaryEntryName>
    <ns1:Definition>An article in the ship's stores during a shipment
    stage.</ns1:Definition>
    <ns1:ObjectClass>Ship Store Article</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shipstorearticletype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipStoreArticleType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An indentifier for this ship store article",
        xsd_required=True,
        xsd_type="IDType",
        help="An indentifier for this ship store article.",
    )

    ubl23_Name = fields.Char(
        string="A name for this ship store article.", xsd_type="NameType"
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of this ship store article",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of this ship store article.",
    )

    ubl23_OfficialUse = fields.Char(
        string="OfficialUse",
        xsd_type="OfficialUseType",
        help=("A text describing the official use of this ship store article."),
    )

    ubl23_Stowage = fields.Many2one(
        comodel_name="ubl.23.stowage",
        string="Stowage",
        help="The stowage or location on board of this ship store article.",
    )


class TaxSchemeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tax Scheme. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a taxation scheme (e.g., VAT, State tax,
    County tax).</ns1:Definition>
    <ns1:ObjectClass>Tax Scheme</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.taxschemetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxSchemeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this taxation scheme",
        xsd_type="IDType",
        help="An identifier for this taxation scheme.",
    )

    ubl23_Name = fields.Char(
        string="The name of this taxation scheme.", xsd_type="NameType"
    )

    ubl23_TaxTypeCode = fields.Char(
        string="A code signifying the type of tax.", xsd_type="TaxTypeCodeType"
    )

    ubl23_CurrencyCode = fields.Char(
        string="CurrencyCode",
        xsd_type="CurrencyCodeType",
        help=(
            "A code signifying the currency in which the tax is collected and "
            "reported."
        ),
    )

    ubl23_JurisdictionRegionAddress = fields.One2many(
        "ubl.23.jurisdictionregionaddress",
        "ubl23_JurisdictionRegionAddress_TaxSchemeType_id",
        string="A geographic area in which this taxation scheme applies",
        help="A geographic area in which this taxation scheme applies.",
    )


class TradingTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Trading Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for describing the terms of a trade
    agreement.</ns1:Definition>
    <ns1:ObjectClass>Trading Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tradingtermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TradingTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Information = fields.Char(
        string="Text describing the terms of a trade agreement",
        xsd_type="InformationType",
        help="Text describing the terms of a trade agreement.",
    )

    ubl23_Reference = fields.Char(
        string="A reference quoting the basis of the terms", xsd_type="ReferenceType"
    )

    ubl23_ApplicableAddress = fields.Many2one(
        comodel_name="ubl.23.applicableaddress",
        string="The address at which these trading terms apply",
        help="The address at which these trading terms apply.",
    )


class AdditionalDocumentReference(models.AbstractModel):
    _description = "AdditionalDocumentReference"
    _name = "ubl.23.additionaldocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalDocumentReference"

    ubl23_AdditionalDocumentReference_CustomsDeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.customsdeclarationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_AdditionalDocumentReference_ProcurementProjectLotType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlottype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_AdditionalDocumentReference_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class BrochureDocumentReference(models.AbstractModel):
    _description = "BrochureDocumentReference"
    _name = "ubl.23.brochuredocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BrochureDocumentReference"


class BudgetAccount(models.AbstractModel):
    _description = "BudgetAccount"
    _name = "ubl.23.budgetaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BudgetAccount"

    ubl23_BudgetAccount_BudgetAccountLineType_id = fields.Many2one(
        comodel_name="ubl.23.budgetaccountlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class BusinessCapability(models.AbstractModel):
    _description = "BusinessCapability"
    _name = "ubl.23.businesscapability"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BusinessCapability"


class CallForTenderDocumentReference(models.AbstractModel):
    _description = "CallForTenderDocumentReference"
    _name = "ubl.23.callfortenderdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CallForTenderDocumentReference"


class CallForTendersDocumentReference(models.AbstractModel):
    _description = "CallForTendersDocumentReference"
    _name = "ubl.23.callfortendersdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CallForTendersDocumentReference"

    ubl23_CallForTendersDocumentReference_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class Capability(models.AbstractModel):
    _description = "Capability"
    _name = "ubl.23.capability"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Capability"


class CatalogueDocumentReference(models.AbstractModel):
    _description = "CatalogueDocumentReference"
    _name = "ubl.23.cataloguedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueDocumentReference"


class CertificationDocumentReference(models.AbstractModel):
    _description = "CertificationDocumentReference"
    _name = "ubl.23.certificationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CertificationDocumentReference"

    ubl23_CertificationDocumentReference_DigitalProcessType_id = fields.Many2one(
        comodel_name="ubl.23.digitalprocesstype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_CertificationDocumentReference_DigitalServiceType_id = fields.Many2one(
        comodel_name="ubl.23.digitalservicetype", xsd_implicit=True, ondelete="cascade"
    )


class ConsumptionPoint(models.AbstractModel):
    _description = "ConsumptionPoint"
    _name = "ubl.23.consumptionpoint"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionPoint"


class ContractDocumentReference(models.AbstractModel):
    _description = "ContractDocumentReference"
    _name = "ubl.23.contractdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractDocumentReference"

    ubl23_ContractDocumentReference_ContractType_id = fields.Many2one(
        comodel_name="ubl.23.contracttype", xsd_implicit=True, ondelete="cascade"
    )


class ContractExtension(models.AbstractModel):
    _description = "ContractExtension"
    _name = "ubl.23.contractextension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractExtension"


class ContractualDocumentReference(models.AbstractModel):
    _description = "ContractualDocumentReference"
    _name = "ubl.23.contractualdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractualDocumentReference"

    ubl23_ContractualDocumentReference_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class CorporateRegistrationScheme(models.AbstractModel):
    _description = "CorporateRegistrationScheme"
    _name = "ubl.23.corporateregistrationscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CorporateRegistrationScheme"


class CreditNoteDocumentReference(models.AbstractModel):
    _description = "CreditNoteDocumentReference"
    _name = "ubl.23.creditnotedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CreditNoteDocumentReference"


class DebitNoteDocumentReference(models.AbstractModel):
    _description = "DebitNoteDocumentReference"
    _name = "ubl.23.debitnotedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DebitNoteDocumentReference"


class DespatchDocumentReference(models.AbstractModel):
    _description = "DespatchDocumentReference"
    _name = "ubl.23.despatchdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchDocumentReference"


class DigitalAgreementTerms(models.AbstractModel):
    _description = "DigitalAgreementTerms"
    _name = "ubl.23.digitalagreementterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalAgreementTerms"


class DiscrepancyResponse(models.AbstractModel):
    _description = "DiscrepancyResponse"
    _name = "ubl.23.discrepancyresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DiscrepancyResponse"

    ubl23_DiscrepancyResponse_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DiscrepancyResponse_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )


class DocumentReference(models.AbstractModel):
    _description = "DocumentReference"
    _name = "ubl.23.documentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentReference"

    ubl23_DocumentReference_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_CertificateType_id = fields.Many2one(
        comodel_name="ubl.23.certificatetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_DespatchLineType_id = fields.Many2one(
        comodel_name="ubl.23.despatchlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_DocumentResponseType_id = fields.Many2one(
        comodel_name="ubl.23.documentresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_EvidenceType_id = fields.Many2one(
        comodel_name="ubl.23.evidencetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_ExceptionNotificationLineType_id = fields.Many2one(
        comodel_name="ubl.23.exceptionnotificationlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_OrderLineType_id = fields.Many2one(
        comodel_name="ubl.23.orderlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_QuotationLineType_id = fields.Many2one(
        comodel_name="ubl.23.quotationlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_ReceiptLineType_id = fields.Many2one(
        comodel_name="ubl.23.receiptlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_RemittanceAdviceLineType_id = fields.Many2one(
        comodel_name="ubl.23.remittanceadvicelinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_RequestForQuotationLineType_id = fields.Many2one(
        comodel_name="ubl.23.requestforquotationlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_RequestForTenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.requestfortenderlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_TenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.tenderlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_TradeFinancingType_id = fields.Many2one(
        comodel_name="ubl.23.tradefinancingtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DocumentReference_TransactionConditionsType_id = fields.Many2one(
        comodel_name="ubl.23.transactionconditionstype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_DocumentReference_VerifiedGrossMassType_id = fields.Many2one(
        comodel_name="ubl.23.verifiedgrossmasstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EmploymentLegislationDocumentReference(models.AbstractModel):
    _description = "EmploymentLegislationDocumentReference"
    _name = "ubl.23.employmentlegislationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EmploymentLegislationDocumentReference"

    ubl23_EmploymentLegislationDocumentReference_TenderingTermsType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tenderingtermstype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class EncryptionData(models.AbstractModel):
    _description = "EncryptionData"
    _name = "ubl.23.encryptiondata"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EncryptionData"


class EnvironmentalLegislationDocumentReference(models.AbstractModel):
    _description = "EnvironmentalLegislationDocumentReference"
    _name = "ubl.23.environmentallegislationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnvironmentalLegislationDocumentReference"

    ubl23_EnvironmentalLegislationDocumentReference_TenderingTermsType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tenderingtermstype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class EvidenceDocumentReference(models.AbstractModel):
    _description = "EvidenceDocumentReference"
    _name = "ubl.23.evidencedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvidenceDocumentReference"

    ubl23_EvidenceDocumentReference_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class ExportationDocumentReference(models.AbstractModel):
    _description = "ExportationDocumentReference"
    _name = "ubl.23.exportationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportationDocumentReference"

    ubl23_ExportationDocumentReference_GoodsItemPassportCounterfoilType_id = (
        fields.Many2one(
            comodel_name="ubl.23.goodsitempassportcounterfoiltype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class ExpressionOfInterestDocumentReference(models.AbstractModel):
    _description = "ExpressionOfInterestDocumentReference"
    _name = "ubl.23.expressionofinterestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExpressionOfInterestDocumentReference"


class FinancialCapability(models.AbstractModel):
    _description = "FinancialCapability"
    _name = "ubl.23.financialcapability"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialCapability"

    ubl23_FinancialCapability_QualifyingPartyType_id = fields.Many2one(
        comodel_name="ubl.23.qualifyingpartytype", xsd_implicit=True, ondelete="cascade"
    )


class FinancialInstitution(models.AbstractModel):
    _description = "FinancialInstitution"
    _name = "ubl.23.financialinstitution"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialInstitution"


class FiscalLegislationDocumentReference(models.AbstractModel):
    _description = "FiscalLegislationDocumentReference"
    _name = "ubl.23.fiscallegislationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FiscalLegislationDocumentReference"

    ubl23_FiscalLegislationDocumentReference_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class GuaranteeDocumentReference(models.AbstractModel):
    _description = "GuaranteeDocumentReference"
    _name = "ubl.23.guaranteedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GuaranteeDocumentReference"


class GuidanceDocumentReference(models.AbstractModel):
    _description = "GuidanceDocumentReference"
    _name = "ubl.23.guidancedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GuidanceDocumentReference"


class HaulageTradingTerms(models.AbstractModel):
    _description = "HaulageTradingTerms"
    _name = "ubl.23.haulagetradingterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HaulageTradingTerms"

    ubl23_HaulageTradingTerms_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class IdentityDocumentReference(models.AbstractModel):
    _description = "IdentityDocumentReference"
    _name = "ubl.23.identitydocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IdentityDocumentReference"

    ubl23_IdentityDocumentReference_PersonType_id = fields.Many2one(
        comodel_name="ubl.23.persontype", xsd_implicit=True, ondelete="cascade"
    )


class ImportationDocumentReference(models.AbstractModel):
    _description = "ImportationDocumentReference"
    _name = "ubl.23.importationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImportationDocumentReference"

    ubl23_ImportationDocumentReference_GoodsItemPassportCounterfoilType_id = (
        fields.Many2one(
            comodel_name="ubl.23.goodsitempassportcounterfoiltype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class InvoiceDocumentReference(models.AbstractModel):
    _description = "InvoiceDocumentReference"
    _name = "ubl.23.invoicedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InvoiceDocumentReference"


class ItemSpecificationDocumentReference(models.AbstractModel):
    _description = "ItemSpecificationDocumentReference"
    _name = "ubl.23.itemspecificationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemSpecificationDocumentReference"

    ubl23_ItemSpecificationDocumentReference_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class LegalDocumentReference(models.AbstractModel):
    _description = "LegalDocumentReference"
    _name = "ubl.23.legaldocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LegalDocumentReference"

    ubl23_LegalDocumentReference_ProcurementProjectLotType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlottype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Legislation(models.AbstractModel):
    _description = "Legislation"
    _name = "ubl.23.legislation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Legislation"

    ubl23_Legislation_TenderingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class LotDistribution(models.AbstractModel):
    _description = "LotDistribution"
    _name = "ubl.23.lotdistribution"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotDistribution"


class MainOnAccountPayment(models.AbstractModel):
    _description = "MainOnAccountPayment"
    _name = "ubl.23.mainonaccountpayment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainOnAccountPayment"


class MandateDocumentReference(models.AbstractModel):
    _description = "MandateDocumentReference"
    _name = "ubl.23.mandatedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MandateDocumentReference"

    ubl23_MandateDocumentReference_PowerOfAttorneyType_id = fields.Many2one(
        comodel_name="ubl.23.powerofattorneytype", xsd_implicit=True, ondelete="cascade"
    )


class MinutesDocumentReference(models.AbstractModel):
    _description = "MinutesDocumentReference"
    _name = "ubl.23.minutesdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MinutesDocumentReference"


class NoticeDocumentReference(models.AbstractModel):
    _description = "NoticeDocumentReference"
    _name = "ubl.23.noticedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NoticeDocumentReference"

    ubl23_NoticeDocumentReference_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OnAccountPayment(models.AbstractModel):
    _description = "OnAccountPayment"
    _name = "ubl.23.onaccountpayment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OnAccountPayment"

    ubl23_OnAccountPayment_SubscriberConsumptionType_id = fields.Many2one(
        comodel_name="ubl.23.subscriberconsumptiontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OrderChangeDocumentReference(models.AbstractModel):
    _description = "OrderChangeDocumentReference"
    _name = "ubl.23.orderchangedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderChangeDocumentReference"


class OrderDocumentReference(models.AbstractModel):
    _description = "OrderDocumentReference"
    _name = "ubl.23.orderdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderDocumentReference"


class OriginalDocumentReference(models.AbstractModel):
    _description = "OriginalDocumentReference"
    _name = "ubl.23.originaldocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginalDocumentReference"


class OriginatorDocumentReference(models.AbstractModel):
    _description = "OriginatorDocumentReference"
    _name = "ubl.23.originatordocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginatorDocumentReference"


class ParentDocumentReference(models.AbstractModel):
    _description = "ParentDocumentReference"
    _name = "ubl.23.parentdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParentDocumentReference"


class PreviousDocumentReference(models.AbstractModel):
    _description = "PreviousDocumentReference"
    _name = "ubl.23.previousdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreviousDocumentReference"


class ProcurementLegislationDocumentReference(models.AbstractModel):
    _description = "ProcurementLegislationDocumentReference"
    _name = "ubl.23.procurementlegislationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementLegislationDocumentReference"

    ubl23_ProcurementLegislationDocumentReference_TenderingTermsType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tenderingtermstype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class ProofOfReexportationRequestDocumentReference(models.AbstractModel):
    _description = "ProofOfReexportationRequestDocumentReference"
    _name = "ubl.23.proofofreexportationrequestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProofOfReexportationRequestDocumentReference"


class ProvidedDocumentReference(models.AbstractModel):
    _description = "ProvidedDocumentReference"
    _name = "ubl.23.provideddocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProvidedDocumentReference"

    ubl23_ProvidedDocumentReference_ProcurementProjectLotType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlottype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class QuotationDocumentReference(models.AbstractModel):
    _description = "QuotationDocumentReference"
    _name = "ubl.23.quotationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuotationDocumentReference"


class ReceiptDocumentReference(models.AbstractModel):
    _description = "ReceiptDocumentReference"
    _name = "ubl.23.receiptdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiptDocumentReference"


class ReexportationDocumentReference(models.AbstractModel):
    _description = "ReexportationDocumentReference"
    _name = "ubl.23.reexportationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReexportationDocumentReference"

    ubl23_ReexportationDocumentReference_GoodsItemPassportCounterfoilType_id = (
        fields.Many2one(
            comodel_name="ubl.23.goodsitempassportcounterfoiltype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class RegistryCertificateDocumentReference(models.AbstractModel):
    _description = "RegistryCertificateDocumentReference"
    _name = "ubl.23.registrycertificatedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RegistryCertificateDocumentReference"


class ReimportationDocumentReference(models.AbstractModel):
    _description = "ReimportationDocumentReference"
    _name = "ubl.23.reimportationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReimportationDocumentReference"

    ubl23_ReimportationDocumentReference_GoodsItemPassportCounterfoilType_id = (
        fields.Many2one(
            comodel_name="ubl.23.goodsitempassportcounterfoiltype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class ReminderDocumentReference(models.AbstractModel):
    _description = "ReminderDocumentReference"
    _name = "ubl.23.reminderdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReminderDocumentReference"


class ReplacedNoticeDocumentReference(models.AbstractModel):
    _description = "ReplacedNoticeDocumentReference"
    _name = "ubl.23.replacednoticedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReplacedNoticeDocumentReference"


class RequestForQuotationDocumentReference(models.AbstractModel):
    _description = "RequestForQuotationDocumentReference"
    _name = "ubl.23.requestforquotationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestForQuotationDocumentReference"


class RequestedDocumentReference(models.AbstractModel):
    _description = "RequestedDocumentReference"
    _name = "ubl.23.requesteddocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedDocumentReference"


class RequiredCertificationDocumentReference(models.AbstractModel):
    _description = "RequiredCertificationDocumentReference"
    _name = "ubl.23.requiredcertificationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredCertificationDocumentReference"


class RequiredDocumentReference(models.AbstractModel):
    _description = "RequiredDocumentReference"
    _name = "ubl.23.requireddocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredDocumentReference"

    ubl23_RequiredDocumentReference_ProcurementProjectLotType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlottype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ResolutionDocumentReference(models.AbstractModel):
    _description = "ResolutionDocumentReference"
    _name = "ubl.23.resolutiondocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResolutionDocumentReference"


class Response(models.AbstractModel):
    _description = "Response"
    _name = "ubl.23.response"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Response"

    ubl23_Response_LineResponseType_id = fields.Many2one(
        comodel_name="ubl.23.lineresponsetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Response_ResponseValueType_id = fields.Many2one(
        comodel_name="ubl.23.responsevaluetype", xsd_implicit=True, ondelete="cascade"
    )


class SelfBilledCreditNoteDocumentReference(models.AbstractModel):
    _description = "SelfBilledCreditNoteDocumentReference"
    _name = "ubl.23.selfbilledcreditnotedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SelfBilledCreditNoteDocumentReference"


class SelfBilledInvoiceDocumentReference(models.AbstractModel):
    _description = "SelfBilledInvoiceDocumentReference"
    _name = "ubl.23.selfbilledinvoicedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SelfBilledInvoiceDocumentReference"


class ServiceProviderParty(models.AbstractModel):
    _description = "ServiceProviderParty"
    _name = "ubl.23.serviceproviderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceProviderParty"

    ubl23_ServiceProviderParty_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class ShipSanitationControlExemptionDocumentReference(models.AbstractModel):
    _description = "ShipSanitationControlExemptionDocumentReference"
    _name = "ubl.23.shipsanitationcontrolexemptiondocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipSanitationControlExemptionDocumentReference"

    ubl23_ShipSanitationControlExemptionDocumentReference_MaritimeHealthDeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.maritimehealthdeclarationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ShipStoreArticle(models.AbstractModel):
    _description = "ShipStoreArticle"
    _name = "ubl.23.shipstorearticle"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipStoreArticle"

    ubl23_ShipStoreArticle_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class ShipmentDocumentReference(models.AbstractModel):
    _description = "ShipmentDocumentReference"
    _name = "ubl.23.shipmentdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipmentDocumentReference"

    ubl23_ShipmentDocumentReference_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ShipmentDocumentReference_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class StatementDocumentReference(models.AbstractModel):
    _description = "StatementDocumentReference"
    _name = "ubl.23.statementdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatementDocumentReference"


class SupportingDocumentReference(models.AbstractModel):
    _description = "SupportingDocumentReference"
    _name = "ubl.23.supportingdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupportingDocumentReference"

    ubl23_SupportingDocumentReference_CertificateOfOriginApplicationType_id = (
        fields.Many2one(
            comodel_name="ubl.23.certificateoforiginapplicationtype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class TaxScheme(models.AbstractModel):
    _description = "TaxScheme"
    _name = "ubl.23.taxscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxScheme"


class TechnicalCapability(models.AbstractModel):
    _description = "TechnicalCapability"
    _name = "ubl.23.technicalcapability"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TechnicalCapability"

    ubl23_TechnicalCapability_QualifyingPartyType_id = fields.Many2one(
        comodel_name="ubl.23.qualifyingpartytype", xsd_implicit=True, ondelete="cascade"
    )


class TechnicalDocumentReference(models.AbstractModel):
    _description = "TechnicalDocumentReference"
    _name = "ubl.23.technicaldocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TechnicalDocumentReference"

    ubl23_TechnicalDocumentReference_ProcurementProjectLotType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlottype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TemplateDocumentReference(models.AbstractModel):
    _description = "TemplateDocumentReference"
    _name = "ubl.23.templatedocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TemplateDocumentReference"


class TenderDocumentReference(models.AbstractModel):
    _description = "TenderDocumentReference"
    _name = "ubl.23.tenderdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderDocumentReference"


class TenderEncryptionData(models.AbstractModel):
    _description = "TenderEncryptionData"
    _name = "ubl.23.tenderencryptiondata"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderEncryptionData"

    ubl23_TenderEncryptionData_TenderPreparationType_id = fields.Many2one(
        comodel_name="ubl.23.tenderpreparationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TenderNotificationDocumentReference(models.AbstractModel):
    _description = "TenderNotificationDocumentReference"
    _name = "ubl.23.tendernotificationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderNotificationDocumentReference"


class TenderStatusInquiryDocumentReference(models.AbstractModel):
    _description = "TenderStatusInquiryDocumentReference"
    _name = "ubl.23.tenderstatusinquirydocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderStatusInquiryDocumentReference"


class TendererQualificationDocumentReference(models.AbstractModel):
    _description = "TendererQualificationDocumentReference"
    _name = "ubl.23.tendererqualificationdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererQualificationDocumentReference"


class TradingTerms(models.AbstractModel):
    _description = "TradingTerms"
    _name = "ubl.23.tradingterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TradingTerms"


class TransportExecutionPlanDocumentReference(models.AbstractModel):
    _description = "TransportExecutionPlanDocumentReference"
    _name = "ubl.23.transportexecutionplandocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportExecutionPlanDocumentReference"


class TransportExecutionPlanRequestDocumentReference(models.AbstractModel):
    _description = "TransportExecutionPlanRequestDocumentReference"
    _name = "ubl.23.transportexecutionplanrequestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportExecutionPlanRequestDocumentReference"


class TransportProgressStatusRequestDocumentReference(models.AbstractModel):
    _description = "TransportProgressStatusRequestDocumentReference"
    _name = "ubl.23.transportprogressstatusrequestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportProgressStatusRequestDocumentReference"


class TransportServiceDescriptionDocumentReference(models.AbstractModel):
    _description = "TransportServiceDescriptionDocumentReference"
    _name = "ubl.23.transportservicedescriptiondocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportServiceDescriptionDocumentReference"


class TransportServiceDescriptionRequestDocumentReference(models.AbstractModel):
    _description = "TransportServiceDescriptionRequestDocumentReference"
    _name = "ubl.23.transportservicedescriptionrequestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportServiceDescriptionRequestDocumentReference"


class TransportationStatusRequestDocumentReference(models.AbstractModel):
    _description = "TransportationStatusRequestDocumentReference"
    _name = "ubl.23.transportationstatusrequestdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportationStatusRequestDocumentReference"


class UnsubscribeToProcedureDocumentReference(models.AbstractModel):
    _description = "UnsubscribeToProcedureDocumentReference"
    _name = "ubl.23.unsubscribetoproceduredocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnsubscribeToProcedureDocumentReference"


class UtilityConsumptionPoint(models.AbstractModel):
    _description = "UtilityConsumptionPoint"
    _name = "ubl.23.utilityconsumptionpoint"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilityConsumptionPoint"


class VoucherDocumentReference(models.AbstractModel):
    _description = "VoucherDocumentReference"
    _name = "ubl.23.voucherdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "VoucherDocumentReference"

    ubl23_VoucherDocumentReference_GoodsItemPassportCounterfoilType_id = (
        fields.Many2one(
            comodel_name="ubl.23.goodsitempassportcounterfoiltype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class WorkOrderDocumentReference(models.AbstractModel):
    _description = "WorkOrderDocumentReference"
    _name = "ubl.23.workorderdocumentreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WorkOrderDocumentReference"

    ubl23_WorkOrderDocumentReference_WorkPhaseReferenceType_id = fields.Many2one(
        comodel_name="ubl.23.workphasereferencetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class BranchType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Branch. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a branch or a division of an
    organization.</ns1:Definition>
    <ns1:ObjectClass>Branch</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.branchtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BranchType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_type="IDType",
        help=("An identifier for this branch or division of an organization."),
    )

    ubl23_Name = fields.Char(
        string="The name of this branch or division of an organization",
        xsd_type="NameType",
        help="The name of this branch or division of an organization.",
    )

    ubl23_FinancialInstitution = fields.Many2one(
        comodel_name="ubl.23.financialinstitution",
        string="The financial institution that this branch belongs to",
        help=(
            "The financial institution that this branch belongs to (if " "applicable)."
        ),
    )

    ubl23_Address = fields.Many2one(
        comodel_name="ubl.23.address",
        string="The address of this branch or division",
        help="The address of this branch or division.",
    )


class BudgetAccountLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Budget Account Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a budget account line.</ns1:Definition>
    <ns1:ObjectClass>Budget Account Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.budgetaccountlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BudgetAccountLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this budget account line",
        xsd_type="IDType",
        help="An identifier for this budget account line.",
    )

    ubl23_TotalAmount = fields.Float(
        string="The total monetary amount for this budget account line",
        xsd_type="TotalAmountType",
        digits=(
            16,
            4,
        ),
        help="The total monetary amount for this budget account line.",
    )

    ubl23_BudgetAccount = fields.One2many(
        "ubl.23.budgetaccount",
        "ubl23_BudgetAccount_BudgetAccountLineType_id",
        string="An account covering this budget account line",
        help="An account covering this budget account line.",
    )


class ConsumptionReportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Report. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe utility consumption, including details of
    the environment in which consumption takes place.</ns1:Definition>
    <ns1:ObjectClass>Consumption Report</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionreporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionReportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this consumption report",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this consumption report.",
    )

    ubl23_ConsumptionType = fields.Char(
        string="The type of consumption",
        xsd_type="ConsumptionTypeType",
        help="The type of consumption, expressed as text.",
    )

    ubl23_ConsumptionTypeCode = fields.Char(
        string="The type of consumption (ConsumptionTypeCode)",
        xsd_type="ConsumptionTypeCodeType",
        help="The type of consumption, expressed as a code.",
    )

    ubl23_Description = fields.Char(
        string="Text reporting utility consumption.", xsd_type="DescriptionType"
    )

    ubl23_TotalConsumedQuantity = fields.Float(
        string="The total quantity consumed.",
        xsd_type="TotalConsumedQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_BasicConsumedQuantity = fields.Float(
        string="The basic quantity consumed",
        xsd_type="BasicConsumedQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The basic quantity consumed, excluding additional consumption."),
    )

    ubl23_ResidentOccupantsNumeric = fields.Float(
        string="ResidentOccupantsNumeric",
        xsd_type="ResidentOccupantsNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of people occupying the residence covered by this " "report."
        ),
    )

    ubl23_ConsumersEnergyLevelCode = fields.Char(
        string="The level of energy consumed",
        xsd_type="ConsumersEnergyLevelCodeType",
        help=(
            "The level of energy consumed, compared to the average for this "
            "residence type and the number of people living in the residence, "
            "expressed as a code."
        ),
    )

    ubl23_ConsumersEnergyLevel = fields.Char(
        string="The level of energy consumed (ConsumersEnergyLevel)",
        xsd_type="ConsumersEnergyLevelType",
        help=(
            "The level of energy consumed, compared to the average for this "
            "residence type and the number of people living in the residence, "
            "expressed as text."
        ),
    )

    ubl23_ResidenceType = fields.Char(
        string="The type of residence (house",
        xsd_type="ResidenceTypeType",
        help=(
            "The type of residence (house, apartment, etc.) covered in this "
            "report, expressed as text."
        ),
    )

    ubl23_ResidenceTypeCode = fields.Char(
        string="The type of residence (house (ResidenceTypeCode)",
        xsd_type="ResidenceTypeCodeType",
        help=(
            "The type of residence (house, apartment, etc.) covered in this "
            "report, expressed as a code."
        ),
    )

    ubl23_HeatingType = fields.Char(
        string="HeatingType",
        xsd_type="HeatingTypeType",
        help=(
            "The type of heating in the residence covered in this report, "
            "expressed as text."
        ),
    )

    ubl23_HeatingTypeCode = fields.Char(
        string="HeatingTypeCode",
        xsd_type="HeatingTypeCodeType",
        help=(
            "The type of heating in the residence covered in this report, "
            "expressed as a code."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period of consumption covered in this report",
        help="The period of consumption covered in this report.",
    )

    ubl23_GuidanceDocumentReference = fields.Many2one(
        comodel_name="ubl.23.guidancedocumentreference",
        string="GuidanceDocumentReference",
        help=(
            "A reference to a document providing an explanation of this kind "
            "of report."
        ),
    )

    ubl23_DocumentReference = fields.Many2one(
        comodel_name="ubl.23.documentreference",
        string="A reference to some other document",
        help=(
            "A reference to some other document (for example, this report in "
            "another format)."
        ),
    )

    ubl23_ConsumptionReportReference = fields.One2many(
        "ubl.23.consumptionreportreference",
        "ubl23_ConsumptionReportReference_ConsumptionReportType_id",
        string="A reference to a previous consumption report",
        help="A reference to a previous consumption report.",
    )

    ubl23_ConsumptionHistory = fields.One2many(
        "ubl.23.consumptionhistory",
        "ubl23_ConsumptionHistory_ConsumptionReportType_id",
        string="ConsumptionHistory",
        help=(
            "A report describing historical parameters relating to a specific "
            "instance of consumption."
        ),
    )


class EnergyTaxReportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Energy Tax Report. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe energy taxes.</ns1:Definition>
    <ns1:ObjectClass>Energy Tax Report</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.energytaxreporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnergyTaxReportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TaxEnergyAmount = fields.Float(
        string="The monetary amount of taxes",
        xsd_type="TaxEnergyAmountType",
        digits=(
            16,
            4,
        ),
        help="The monetary amount of taxes (and duties).",
    )

    ubl23_TaxEnergyOnAccountAmount = fields.Float(
        string="The monetary amount of taxes (TaxEnergyOnAccountAmount)",
        xsd_type="TaxEnergyOnAccountAmountType",
        digits=(
            16,
            4,
        ),
        help="The monetary amount of taxes (and duties) paid on account.",
    )

    ubl23_TaxEnergyBalanceAmount = fields.Float(
        string="The monetary amount of the balance of taxes owing",
        xsd_type="TaxEnergyBalanceAmountType",
        digits=(
            16,
            4,
        ),
        help="The monetary amount of the balance of taxes owing.",
    )

    ubl23_TaxScheme = fields.Many2one(
        comodel_name="ubl.23.taxscheme",
        string="The relevant taxation scheme.",
        xsd_required=True,
    )


class LineReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Line Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a line in a
    document.</ns1:Definition>
    <ns1:ObjectClass>Line Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.linereferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LineID = fields.Char(
        string="Identifies the referenced line in the document",
        xsd_required=True,
        xsd_type="LineIDType",
        help="Identifies the referenced line in the document.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this line reference",
        xsd_type="UUIDType",
        help="A universally unique identifier for this line reference.",
    )

    ubl23_LineStatusCode = fields.Char(
        string="LineStatusCode",
        xsd_type="LineStatusCodeType",
        help=(
            "A code signifying the status of the referenced line with respect "
            "to its original state."
        ),
    )

    ubl23_DocumentReference = fields.Many2one(
        comodel_name="ubl.23.documentreference",
        string="A reference to the document containing the referenced line",
        help="A reference to the document containing the referenced line.",
    )


class OrderReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Order Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to an Order.</ns1:Definition>
    <ns1:ObjectClass>Order Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.orderreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this order reference",
        xsd_required=True,
        xsd_type="IDType",
        help=("An identifier for this order reference, assigned by the buyer."),
    )

    ubl23_SalesOrderID = fields.Char(
        string="An identifier for this order reference (SalesOrderID)",
        xsd_type="SalesOrderIDType",
        help=("An identifier for this order reference, assigned by the seller."),
    )

    ubl23_CopyIndicator = fields.Boolean(
        string="Indicates whether the referenced Order is a copy",
        help=(
            "Indicates whether the referenced Order is a copy (true) or the "
            "original (false)."
        ),
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this order reference",
        xsd_type="UUIDType",
        help="A universally unique identifier for this order reference.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which the referenced Order was issued",
        help="The date on which the referenced Order was issued.",
    )

    ubl23_CustomerReference = fields.Char(
        string="Text used for tagging purchasing card transactions",
        xsd_type="CustomerReferenceType",
        help="Text used for tagging purchasing card transactions.",
    )

    ubl23_OrderTypeCode = fields.Char(
        string="A code signifying the type of the referenced Order",
        xsd_type="OrderTypeCodeType",
        help="A code signifying the type of the referenced Order.",
    )

    ubl23_DocumentReference = fields.Many2one(
        comodel_name="ubl.23.documentreference",
        string="A document associated with this reference to an Order",
        help="A document associated with this reference to an Order.",
    )


class PartyLegalEntityType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Party Legal Entity. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a party as a legal entity.</ns1:Definition>
    <ns1:ObjectClass>Party Legal Entity</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.partylegalentitytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyLegalEntityType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RegistrationName = fields.Char(
        string="RegistrationName",
        xsd_type="RegistrationNameType",
        help=(
            "The name of the party as registered with the relevant legal " "authority."
        ),
    )

    ubl23_CompanyID = fields.Char(
        string="CompanyID",
        xsd_type="CompanyIDType",
        help=(
            "An identifier for the party as registered within a company "
            "registration scheme."
        ),
    )

    ubl23_RegistrationDate = fields.Date(
        string="The registration date of the CompanyID",
        help="The registration date of the CompanyID.",
    )

    ubl23_RegistrationExpirationDate = fields.Date(
        string="The date upon which a registration expires",
        help=(
            "The date upon which a registration expires (e.g., registration "
            "for an import/export license)."
        ),
    )

    ubl23_CompanyLegalFormCode = fields.Char(
        string="A code signifying the party's legal status",
        xsd_type="CompanyLegalFormCodeType",
        help="A code signifying the party's legal status.",
    )

    ubl23_CompanyLegalForm = fields.Char(
        string="The company legal status",
        xsd_type="CompanyLegalFormType",
        help="The company legal status, expressed as a text.",
    )

    ubl23_SoleProprietorshipIndicator = fields.Boolean(
        string="SoleProprietorshipIndicator",
        help=(
            "An indicator that the company is owned and controlled by one "
            "person (true) or not (false)."
        ),
    )

    ubl23_CompanyLiquidationStatusCode = fields.Char(
        string="A code signifying the party's liquidation status",
        xsd_type="CompanyLiquidationStatusCodeType",
        help="A code signifying the party's liquidation status.",
    )

    ubl23_CorporateStockAmount = fields.Float(
        string="The number of shares in the capital stock of a corporation",
        xsd_type="CorporateStockAmountType",
        digits=(
            16,
            4,
        ),
        help="The number of shares in the capital stock of a corporation.",
    )

    ubl23_FullyPaidSharesIndicator = fields.Boolean(
        string="FullyPaidSharesIndicator",
        help=(
            "An indicator that all shares of corporate stock have been paid by"
            " shareholders (true) or not (false)."
        ),
    )

    ubl23_RegistrationAddress = fields.Many2one(
        comodel_name="ubl.23.registrationaddress",
        string="RegistrationAddress",
        help=(
            "The registered address of the party within a corporate "
            "registration scheme."
        ),
    )

    ubl23_CorporateRegistrationScheme = fields.Many2one(
        comodel_name="ubl.23.corporateregistrationscheme",
        string="CorporateRegistrationScheme",
        help=("The corporate registration scheme used to register the party."),
    )

    ubl23_HeadOfficeParty = fields.Many2one(
        comodel_name="ubl.23.headofficeparty",
        string="The head office of the legal entity",
    )

    ubl23_ShareholderParty = fields.One2many(
        "ubl.23.shareholderparty",
        "ubl23_ShareholderParty_PartyLegalEntityType_id",
        string="A party owning shares in this legal entity",
        help="A party owning shares in this legal entity.",
    )


class PartyTaxSchemeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Party Tax Scheme. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a taxation scheme applying to a
    party.</ns1:Definition>
    <ns1:ObjectClass>Party Tax Scheme</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.partytaxschemetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyTaxSchemeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RegistrationName = fields.Char(
        string="RegistrationName",
        xsd_type="RegistrationNameType",
        help=(
            "The name of the party as registered with the relevant fiscal " "authority."
        ),
    )

    ubl23_CompanyID = fields.Char(
        string="CompanyID",
        xsd_type="CompanyIDType",
        help=(
            "An identifier for the party assigned for tax purposes by the "
            "taxation authority."
        ),
    )

    ubl23_TaxLevelCode = fields.Char(
        string="TaxLevelCode",
        xsd_type="TaxLevelCodeType",
        help=(
            "A code signifying the tax level applicable to the party within "
            "this taxation scheme."
        ),
    )

    ubl23_ExemptionReasonCode = fields.Char(
        string="A reason for the party's exemption from tax",
        xsd_type="ExemptionReasonCodeType",
        help=("A reason for the party's exemption from tax, expressed as a code."),
    )

    ubl23_ExemptionReason = fields.Char(
        string="ExemptionReason",
        xsd_type="ExemptionReasonType",
        help=("A reason for the party's exemption from tax, expressed as text."),
    )

    ubl23_RegistrationAddress = fields.Many2one(
        comodel_name="ubl.23.registrationaddress",
        string="The address of the party as registered for tax purposes",
        help="The address of the party as registered for tax purposes.",
    )

    ubl23_TaxScheme = fields.Many2one(
        comodel_name="ubl.23.taxscheme",
        string="The taxation scheme applicable to the party",
        xsd_required=True,
        help="The taxation scheme applicable to the party.",
    )


class PowerOfAttorneyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Power Of Attorney. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a power of attorney.</ns1:Definition>
    <ns1:ObjectClass>Power Of Attorney</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.powerofattorneytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PowerOfAttorneyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this power of attorney",
        xsd_type="IDType",
        help="An identifier for this power of attorney.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which this power of attorney was issued",
        help="The date on which this power of attorney was issued.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this power of attorney",
        xsd_type="DescriptionType",
        help="Text describing this power of attorney.",
    )

    ubl23_NotaryParty = fields.Many2one(
        comodel_name="ubl.23.notaryparty",
        string="The party notarizing this power of attorney",
        help="The party notarizing this power of attorney.",
    )

    ubl23_AgentParty = fields.Many2one(
        comodel_name="ubl.23.agentparty",
        string="AgentParty",
        xsd_required=True,
        help=(
            "The party who acts as an agent or fiduciary for the principal and"
            " who holds this power of attorney on behalf of the principal."
        ),
    )

    ubl23_WitnessParty = fields.One2many(
        "ubl.23.witnessparty",
        "ubl23_WitnessParty_PowerOfAttorneyType_id",
        string="An association to a WitnessParty.",
    )

    ubl23_MandateDocumentReference = fields.One2many(
        "ubl.23.mandatedocumentreference",
        "ubl23_MandateDocumentReference_PowerOfAttorneyType_id",
        string="MandateDocumentReference",
        help=("A reference to a mandate associated with this power of attorney."),
    )


class TaxCategoryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tax Category. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe one of the tax categories within a taxation
    scheme (e.g., High Rate VAT, Low Rate VAT).</ns1:Definition>
    <ns1:ObjectClass>Tax Category</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.taxcategorytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxCategoryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this tax category.", xsd_type="IDType"
    )

    ubl23_Name = fields.Char(
        string="The name of this tax category.", xsd_type="NameType"
    )

    ubl23_Percent = fields.Char(
        string="The tax rate for this category",
        xsd_type="PercentType",
        help="The tax rate for this category, expressed as a percentage.",
    )

    ubl23_BaseUnitMeasure = fields.Char(
        string="BaseUnitMeasure",
        xsd_type="BaseUnitMeasureType",
        help=(
            "A Unit of Measures used as the basic for the tax calculation "
            "applied at a certain rate per unit."
        ),
    )

    ubl23_PerUnitAmount = fields.Float(
        string="Where a tax is applied at a certain rate per unit",
        xsd_type="PerUnitAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "Where a tax is applied at a certain rate per unit, the rate per "
            "unit applied."
        ),
    )

    ubl23_TaxExemptionReasonCode = fields.Char(
        string="The reason for tax being exempted",
        xsd_type="TaxExemptionReasonCodeType",
        help="The reason for tax being exempted, expressed as a code.",
    )

    ubl23_TaxExemptionReason = fields.Char(
        string="The reason for tax being exempted (TaxExemptionReason)",
        xsd_type="TaxExemptionReasonType",
        help="The reason for tax being exempted, expressed as text.",
    )

    ubl23_TierRange = fields.Char(
        string="Where a tax is tiered",
        xsd_type="TierRangeType",
        help=(
            "Where a tax is tiered, the range of taxable amounts that "
            "determines the rate of tax applicable to this tax category."
        ),
    )

    ubl23_TierRatePercent = fields.Char(
        string="Where a tax is tiered (TierRatePercent)",
        xsd_type="TierRatePercentType",
        help=(
            "Where a tax is tiered, the tax rate that applies within the "
            "specified range of taxable amounts for this tax category."
        ),
    )

    ubl23_TaxScheme = fields.Many2one(
        comodel_name="ubl.23.taxscheme",
        string="TaxScheme",
        xsd_required=True,
        help=("The taxation scheme within which this tax category is defined."),
    )


class TenderRequirementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tender Requirement. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A template for a required document in a tendering
    process.</ns1:Definition>
    <ns1:ObjectClass>Tender Requirement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderrequirementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderRequirementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="A name of this tender requirement.", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="Text describing this tender requirement",
        xsd_type="DescriptionType",
        help="Text describing this tender requirement.",
    )

    ubl23_TemplateDocumentReference = fields.Many2one(
        comodel_name="ubl.23.templatedocumentreference",
        string="A reference to the template for a required document",
        help="A reference to the template for a required document.",
    )


class TransactionConditionsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transaction Conditions.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe purchasing, sales, or payment
    conditions.</ns1:Definition>
    <ns1:ObjectClass>Transaction Conditions</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Payment Conditions, Sales
    Conditions</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transactionconditionstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransactionConditionsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for conditions of the transaction",
        xsd_type="IDType",
        help=(
            "An identifier for conditions of the transaction, typically "
            "purchase/sales conditions."
        ),
    )

    ubl23_ActionCode = fields.Char(
        string="ActionCode",
        xsd_type="ActionCodeType",
        help=(
            "A code signifying a type of action relating to sales or payment "
            "conditions."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the transaction conditions",
        xsd_type="DescriptionType",
        help="Text describing the transaction conditions.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_TransactionConditionsType_id",
        string="A document associated with these transaction conditions",
        help="A document associated with these transaction conditions.",
    )


class WorkPhaseReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Work Phase Reference.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class that refers to a phase of work. Used for instance to
    specify what part of the contract the billing is referring
    to.</ns1:Definition>
    <ns1:ObjectClass>Work Phase Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.workphasereferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WorkPhaseReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this phase of work",
        xsd_type="IDType",
        help="An identifier for this phase of work.",
    )

    ubl23_WorkPhaseCode = fields.Char(
        string="A code signifying this phase of work",
        xsd_type="WorkPhaseCodeType",
        help="A code signifying this phase of work.",
    )

    ubl23_WorkPhase = fields.Char(
        string="Text describing this phase of work.", xsd_type="WorkPhaseType"
    )

    ubl23_ProgressPercent = fields.Char(
        string="The progress percentage of the work phase",
        xsd_type="ProgressPercentType",
        help="The progress percentage of the work phase.",
    )

    ubl23_StartDate = fields.Date(
        string="The date on which this phase of work begins",
        help="The date on which this phase of work begins.",
    )

    ubl23_EndDate = fields.Date(
        string="The date on which this phase of work ends",
        help="The date on which this phase of work ends.",
    )

    ubl23_WorkOrderDocumentReference = fields.One2many(
        "ubl.23.workorderdocumentreference",
        "ubl23_WorkOrderDocumentReference_WorkPhaseReferenceType_id",
        string="WorkOrderDocumentReference",
        help=(
            "A reference to a document regarding the work order for the "
            "project in which this phase of work takes place."
        ),
    )


class ApplicableTaxCategory(models.AbstractModel):
    _description = "ApplicableTaxCategory"
    _name = "ubl.23.applicabletaxcategory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicableTaxCategory"

    ubl23_ApplicableTaxCategory_ItemLocationQuantityType_id = fields.Many2one(
        comodel_name="ubl.23.itemlocationquantitytype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ApplicableTaxCategory_RequestedTenderTotalType_id = fields.Many2one(
        comodel_name="ubl.23.requestedtendertotaltype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Branch(models.AbstractModel):
    _description = "Branch"
    _name = "ubl.23.branch"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Branch"


class BudgetAccountLine(models.AbstractModel):
    _description = "BudgetAccountLine"
    _name = "ubl.23.budgetaccountline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BudgetAccountLine"

    ubl23_BudgetAccountLine_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class CallForTendersLineReference(models.AbstractModel):
    _description = "CallForTendersLineReference"
    _name = "ubl.23.callfortenderslinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CallForTendersLineReference"


class CatalogueLineReference(models.AbstractModel):
    _description = "CatalogueLineReference"
    _name = "ubl.23.cataloguelinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueLineReference"


class TypeifiedTaxCategory(models.AbstractModel):
    _description = "ClassifiedTaxCategory"
    _name = "ubl.23.typeifiedtaxcategory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TypeifiedTaxCategory"

    ubl23_ClassifiedTaxCategory_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class ConsumptionReport(models.AbstractModel):
    _description = "ConsumptionReport"
    _name = "ubl.23.consumptionreport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionReport"

    ubl23_ConsumptionReport_EnergyWaterSupplyType_id = fields.Many2one(
        comodel_name="ubl.23.energywatersupplytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DependentLineReference(models.AbstractModel):
    _description = "DependentLineReference"
    _name = "ubl.23.dependentlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DependentLineReference"


class DespatchLineReference(models.AbstractModel):
    _description = "DespatchLineReference"
    _name = "ubl.23.despatchlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchLineReference"

    ubl23_DespatchLineReference_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DespatchLineReference_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DespatchLineReference_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DespatchLineReference_ReceiptLineType_id = fields.Many2one(
        comodel_name="ubl.23.receiptlinetype", xsd_implicit=True, ondelete="cascade"
    )


class DocumentTenderRequirement(models.AbstractModel):
    _description = "DocumentTenderRequirement"
    _name = "ubl.23.documenttenderrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentTenderRequirement"

    ubl23_DocumentTenderRequirement_TenderPreparationType_id = fields.Many2one(
        comodel_name="ubl.23.tenderpreparationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EnergyTaxReport(models.AbstractModel):
    _description = "EnergyTaxReport"
    _name = "ubl.23.energytaxreport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnergyTaxReport"

    ubl23_EnergyTaxReport_EnergyWaterSupplyType_id = fields.Many2one(
        comodel_name="ubl.23.energywatersupplytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class FinancialInstitutionBranch(models.AbstractModel):
    _description = "FinancialInstitutionBranch"
    _name = "ubl.23.financialinstitutionbranch"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialInstitutionBranch"


class LineReference(models.AbstractModel):
    _description = "LineReference"
    _name = "ubl.23.linereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineReference"

    ubl23_LineReference_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )


class OrderReference(models.AbstractModel):
    _description = "OrderReference"
    _name = "ubl.23.orderreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderReference"


class ParentDocumentLineReference(models.AbstractModel):
    _description = "ParentDocumentLineReference"
    _name = "ubl.23.parentdocumentlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParentDocumentLineReference"


class PartyLegalEntity(models.AbstractModel):
    _description = "PartyLegalEntity"
    _name = "ubl.23.partylegalentity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyLegalEntity"

    ubl23_PartyLegalEntity_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class PartyTaxScheme(models.AbstractModel):
    _description = "PartyTaxScheme"
    _name = "ubl.23.partytaxscheme"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyTaxScheme"

    ubl23_PartyTaxScheme_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class PowerOfAttorney(models.AbstractModel):
    _description = "PowerOfAttorney"
    _name = "ubl.23.powerofattorney"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PowerOfAttorney"

    ubl23_PowerOfAttorney_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class QuotationLineReference(models.AbstractModel):
    _description = "QuotationLineReference"
    _name = "ubl.23.quotationlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuotationLineReference"


class ReceiptLineReference(models.AbstractModel):
    _description = "ReceiptLineReference"
    _name = "ubl.23.receiptlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiptLineReference"

    ubl23_ReceiptLineReference_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ReceiptLineReference_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ReceiptLineReference_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )


class RequestLineReference(models.AbstractModel):
    _description = "RequestLineReference"
    _name = "ubl.23.requestlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestLineReference"


class SubsequentProcessTenderRequirement(models.AbstractModel):
    _description = "SubsequentProcessTenderRequirement"
    _name = "ubl.23.subsequentprocesstenderrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubsequentProcessTenderRequirement"

    ubl23_SubsequentProcessTenderRequirement_FrameworkAgreementType_id = (
        fields.Many2one(
            comodel_name="ubl.23.frameworkagreementtype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class TaxCategory(models.AbstractModel):
    _description = "TaxCategory"
    _name = "ubl.23.taxcategory"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxCategory"

    ubl23_TaxCategory_AllowanceChargeType_id = fields.Many2one(
        comodel_name="ubl.23.allowancechargetype", xsd_implicit=True, ondelete="cascade"
    )


class TenderRequirement(models.AbstractModel):
    _description = "TenderRequirement"
    _name = "ubl.23.tenderrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderRequirement"


class TransactionConditions(models.AbstractModel):
    _description = "TransactionConditions"
    _name = "ubl.23.transactionconditions"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransactionConditions"

    ubl23_TransactionConditions_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class WorkPhaseReference(models.AbstractModel):
    _description = "WorkPhaseReference"
    _name = "ubl.23.workphasereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WorkPhaseReference"

    ubl23_WorkPhaseReference_ProjectReferenceType_id = fields.Many2one(
        comodel_name="ubl.23.projectreferencetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class CertificateType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Certificate. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a certificate applied to the item.
    Certificated can be a requirement to sell goods or services in a
    jurisdiction.</ns1:Definition>
    <ns1:ObjectClass>Certificate</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.certificatetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CertificateType"

    ubl23_CertificateType_CertificateType_id = fields.Many2one(
        comodel_name="ubl.23.certificatetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this certificate.",
        xsd_required=True,
        xsd_type="IDType",
    )

    ubl23_CertificateTypeCode = fields.Char(
        string="The type of this certificate",
        xsd_type="CertificateTypeCodeType",
        help=(
            "The type of this certificate, expressed as a code. The type "
            "specifies what array it belongs to, e.g.. Environmental, "
            "security, health improvement etc."
        ),
    )

    ubl23_CertificateType = fields.Char(
        string="The type of this certificate (CertificateType)",
        xsd_type="CertificateTypeType",
        help="The type of this certificate, expressed as a text.",
    )

    ubl23_Remarks = fields.Char(
        string="Remarks by the applicant for this certificate",
        xsd_type="RemarksType",
        help="Remarks by the applicant for this certificate.",
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="The authorized organization that issued this certificate",
        help=(
            "The authorized organization that issued this certificate, the "
            "provider of the certificate."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_CertificateType_id",
        string="DocumentReference",
        help=(
            "A reference to a document relevant to this certificate or an "
            "application for this certificate."
        ),
    )


class DependentPriceReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Dependent Price Reference.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define the price of an item as a percentage of the
    price of a different item.</ns1:Definition>
    <ns1:ObjectClass>Dependent Price Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.dependentpricereferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DependentPriceReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Percent = fields.Char(
        string="Percent",
        xsd_type="PercentType",
        help=(
            "The percentage by which the price of the different item is "
            "multiplied to calculate the price of the item."
        ),
    )

    ubl23_LocationAddress = fields.Many2one(
        comodel_name="ubl.23.locationaddress",
        string="The reference location for this dependent price reference",
        help="The reference location for this dependent price reference.",
    )

    ubl23_DependentLineReference = fields.Many2one(
        comodel_name="ubl.23.dependentlinereference",
        string="A reference to a line that the price is depended of",
        help="A reference to a line that the price is depended of.",
    )


class DutyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Duty. Details</ns1:DictionaryEntryName>
    <ns1:Definition>The charging rate used for both call charging and time
    dependent charging</ns1:Definition>
    <ns1:ObjectClass>Duty</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.dutytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DutyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Amount = fields.Monetary(
        string="The amount of this duty.",
        xsd_required=True,
        xsd_type="AmountType",
        currency_field="brl_currency_id",
    )

    ubl23_Duty = fields.Char(string="Text describing this duty.", xsd_type="DutyType")

    ubl23_DutyCode = fields.Char(
        string="The type of this charge rate",
        xsd_type="DutyCodeType",
        help="The type of this charge rate, expressed as a code.",
    )

    ubl23_TaxCategory = fields.Many2one(
        comodel_name="ubl.23.taxcategory",
        string="The tax category applicable to this duty",
        help="The tax category applicable to this duty.",
    )


class EnergyWaterSupplyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Energy Water Supply. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the supply (and therefore consumption) of
    an amount of energy or water.</ns1:Definition>
    <ns1:ObjectClass>Energy Water Supply</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.energywatersupplytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnergyWaterSupplyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ConsumptionReport = fields.One2many(
        "ubl.23.consumptionreport",
        "ubl23_ConsumptionReport_EnergyWaterSupplyType_id",
        string="An amount of energy or water consumed",
        help="An amount of energy or water consumed.",
    )

    ubl23_EnergyTaxReport = fields.One2many(
        "ubl.23.energytaxreport",
        "ubl23_EnergyTaxReport_EnergyWaterSupplyType_id",
        string="A tax on the consumption of energy or water",
        help="A tax on the consumption of energy or water.",
    )

    ubl23_ConsumptionAverage = fields.One2many(
        "ubl.23.consumptionaverage",
        "ubl23_ConsumptionAverage_EnergyWaterSupplyType_id",
        string="A consumption average.",
    )

    ubl23_EnergyWaterConsumptionCorrection = fields.One2many(
        "ubl.23.energywaterconsumptioncorrection",
        "ubl23_EnergyWaterConsumptionCorrection_EnergyWaterSupplyType_id",
        string="EnergyWaterConsumptionCorrection",
        help=(
            "Describes any corrections or adjustments to the supply of energy "
            "or water."
        ),
    )


class FinancialAccountType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Financial Account. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a financial account.</ns1:Definition>
    <ns1:ObjectClass>Financial Account</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.financialaccounttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialAccountType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_type="IDType",
        help=("The identifier for this financial account; the bank account " "number."),
    )

    ubl23_Name = fields.Char(
        string="The name of this financial account.", xsd_type="NameType"
    )

    ubl23_AliasName = fields.Char(
        string="An alias for the name of this financial account",
        xsd_type="AliasNameType",
        help=(
            "An alias for the name of this financial account, to be used in "
            "place of the actual account name for security reasons."
        ),
    )

    ubl23_AccountTypeCode = fields.Char(
        string="A code signifying the type of this financial account",
        xsd_type="AccountTypeCodeType",
        help="A code signifying the type of this financial account.",
    )

    ubl23_AccountFormatCode = fields.Char(
        string="A code signifying the format of this financial account",
        xsd_type="AccountFormatCodeType",
        help="A code signifying the format of this financial account.",
    )

    ubl23_CurrencyCode = fields.Char(
        string="CurrencyCode",
        xsd_type="CurrencyCodeType",
        help=(
            "A code signifying the currency in which this financial account is" " held."
        ),
    )

    ubl23_PaymentNote = fields.Char(
        string="Free",
        xsd_type="PaymentNoteType",
        help=(
            "Free-form text applying to the Payment for the owner of this " "account."
        ),
    )

    ubl23_FinancialInstitutionBranch = fields.Many2one(
        comodel_name="ubl.23.financialinstitutionbranch",
        string="FinancialInstitutionBranch",
        help=(
            "The branch of the financial institution associated with this "
            "financial account."
        ),
    )

    ubl23_Country = fields.Many2one(
        comodel_name="ubl.23.country",
        string="Country",
        help=(
            "The country in which the holder of the financial account is " "domiciled."
        ),
    )


class FrameworkAgreementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Framework Agreement. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a tendering framework
    agreement.</ns1:Definition>
    <ns1:ObjectClass>Framework Agreement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.frameworkagreementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FrameworkAgreementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ExpectedOperatorQuantity = fields.Float(
        string="ExpectedOperatorQuantity",
        xsd_type="ExpectedOperatorQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of economic operators expected to participate in this "
            "framework agreement."
        ),
    )

    ubl23_MaximumOperatorQuantity = fields.Float(
        string="MaximumOperatorQuantity",
        xsd_type="MaximumOperatorQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of economic operators allowed to participate "
            "in this framework agreement."
        ),
    )

    ubl23_Justification = fields.Char(
        string="Justification",
        xsd_type="JustificationType",
        help=("Text describing the justification for this framework agreement."),
    )

    ubl23_Frequency = fields.Char(
        string="Frequency",
        xsd_type="FrequencyType",
        help=(
            "Text describing the frequency with which subsequent contracts "
            "will be awarded."
        ),
    )

    ubl23_EstimatedMaximumValueAmount = fields.Float(
        string="EstimatedMaximumValueAmount",
        xsd_type="EstimatedMaximumValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The estimated value which will be spent within a framework "
            "agreement over its whole duration, including options and "
            "renewals."
        ),
    )

    ubl23_MaximumValueAmount = fields.Float(
        string="MaximumValueAmount",
        xsd_type="MaximumValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum Value which can be spent within a framework agreement"
            " over its whole duration, including options and renewals."
        ),
    )

    ubl23_DurationPeriod = fields.Many2one(
        comodel_name="ubl.23.durationperiod",
        string="The period during which this framework agreement applies",
        help="The period during which this framework agreement applies.",
    )

    ubl23_SubsequentProcessTenderRequirement = fields.One2many(
        "ubl.23.subsequentprocesstenderrequirement",
        "ubl23_SubsequentProcessTenderRequirement_FrameworkAgreementType_id",
        string="SubsequentProcessTenderRequirement",
        help=(
            "A tender requirement intended for consumption by downstream "
            "tendering processes derived from the establishment of this "
            "framework agreement."
        ),
    )


class LineResponseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Line Response. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe responses to a line in a
    document.</ns1:Definition>
    <ns1:ObjectClass>Line Response</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.lineresponsetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineResponseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LineReference = fields.Many2one(
        comodel_name="ubl.23.linereference",
        string="A reference to the line being responded to",
        xsd_required=True,
        help="A reference to the line being responded to.",
    )

    ubl23_Response = fields.One2many(
        "ubl.23.response",
        "ubl23_Response_LineResponseType_id",
        string="A response to the referenced line.",
    )


class OrderLineReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Order Line Reference.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to an order
    line.</ns1:Definition>
    <ns1:ObjectClass>Order Line Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.orderlinereferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderLineReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LineID = fields.Char(
        string="An identifier for the referenced order line",
        xsd_required=True,
        xsd_type="LineIDType",
        help=("An identifier for the referenced order line, assigned by the " "buyer."),
    )

    ubl23_SalesOrderLineID = fields.Char(
        string="SalesOrderLineID",
        xsd_type="SalesOrderLineIDType",
        help=(
            "An identifier for the referenced order line, assigned by the " "seller."
        ),
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help=("A universally unique identifier for this order line reference."),
    )

    ubl23_LineStatusCode = fields.Char(
        string="LineStatusCode",
        xsd_type="LineStatusCodeType",
        help=(
            "A code signifying the status of the referenced order line with "
            "respect to its original state."
        ),
    )

    ubl23_OrderReference = fields.Many2one(
        comodel_name="ubl.23.orderreference",
        string="OrderReference",
        help=("A reference to the Order containing the referenced order line."),
    )


class ProjectReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Project Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a procurement
    project.</ns1:Definition>
    <ns1:ObjectClass>Project Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.projectreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProjectReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the referenced project",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the referenced project.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for the referenced project",
        xsd_type="UUIDType",
        help="A universally unique identifier for the referenced project.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which the referenced project was issued",
        help="The date on which the referenced project was issued.",
    )

    ubl23_WorkPhaseReference = fields.One2many(
        "ubl.23.workphasereference",
        "ubl23_WorkPhaseReference_ProjectReferenceType_id",
        string="A specific phase of work in the referenced project",
        help="A specific phase of work in the referenced project.",
    )


class RequestedTenderTotalType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Requested Tender Total.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining budgeted monetary amounts.</ns1:Definition>
    <ns1:ObjectClass>Requested Tender Total</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.requestedtendertotaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedTenderTotalType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EstimatedOverallContractAmount = fields.Float(
        string="The estimated overall monetary amount of a contract",
        xsd_type="EstimatedOverallContractAmountType",
        digits=(
            16,
            4,
        ),
        help="The estimated overall monetary amount of a contract.",
    )

    ubl23_EstimatedOverallFrameworkContractsAmount = fields.Float(
        string="EstimatedOverallFrameworkContractsAmount",
        xsd_type="EstimatedOverallFrameworkContractsAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The estimated overall monetary amount of subsequent framework "
            "contracts."
        ),
    )

    ubl23_TotalAmount = fields.Float(
        string="TotalAmount",
        xsd_type="TotalAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount of the total budget including net amount, "
            "taxes, and material and instalment costs. "
        ),
    )

    ubl23_TaxIncludedIndicator = fields.Boolean(
        string="Indicates whether the amounts are taxes included",
        help=(
            "Indicates whether the amounts are taxes included (true) or not " "(false)."
        ),
    )

    ubl23_MinimumAmount = fields.Float(
        string="The minimum monetary amount of the budget",
        xsd_type="MinimumAmountType",
        digits=(
            16,
            4,
        ),
        help="The minimum monetary amount of the budget.",
    )

    ubl23_MaximumAmount = fields.Float(
        string="The maximum monetary amount of the budget",
        xsd_type="MaximumAmountType",
        digits=(
            16,
            4,
        ),
        help="The maximum monetary amount of the budget.",
    )

    ubl23_MonetaryScope = fields.Char(
        string="A description of the monetary scope of the budget",
        xsd_type="MonetaryScopeType",
        help="A description of the monetary scope of the budget.",
    )

    ubl23_AverageSubsequentContractAmount = fields.Float(
        string="AverageSubsequentContractAmount",
        xsd_type="AverageSubsequentContractAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The average monetary amount for the subsequent contracts "
            "following this budget amount."
        ),
    )

    ubl23_ApplicableTaxCategory = fields.One2many(
        "ubl.23.applicabletaxcategory",
        "ubl23_ApplicableTaxCategory_RequestedTenderTotalType_id",
        string="ApplicableTaxCategory",
        help=("Describes the categories of taxes that apply to the budget " "amount."),
    )


class TaxSubtotalType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tax Subtotal. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define the subtotal for a particular tax category
    within a particular taxation scheme, such as standard rate within
    VAT.</ns1:Definition>
    <ns1:ObjectClass>Tax Subtotal</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.taxsubtotaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxSubtotalType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TaxableAmount = fields.Float(
        string="The net amount to which the tax percent",
        xsd_type="TaxableAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The net amount to which the tax percent (rate) is applied to "
            "calculate the tax amount."
        ),
    )

    ubl23_TaxAmount = fields.Float(
        string="The amount of this tax subtotal.",
        xsd_required=True,
        xsd_type="TaxAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_CalculationSequenceNumeric = fields.Float(
        string="CalculationSequenceNumeric",
        xsd_type="CalculationSequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of this tax subtotal in the sequence of subtotals "
            "corresponding to the order in which multiple taxes are applied. "
            "If all taxes are applied to the same taxable amount (i.e., their "
            "order of application is inconsequential), then "
            "CalculationSequenceNumeric is 1 for all tax subtotals applied to "
            "a given amount."
        ),
    )

    ubl23_TransactionCurrencyTaxAmount = fields.Float(
        string="The amount of this tax subtotal",
        xsd_type="TransactionCurrencyTaxAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount of this tax subtotal, expressed in the currency used "
            "for invoicing."
        ),
    )

    ubl23_Percent = fields.Char(
        string="Percent",
        xsd_type="PercentType",
        help=(
            "The tax rate of the tax category applied to this tax subtotal, "
            "expressed as a percentage."
        ),
    )

    ubl23_BaseUnitMeasure = fields.Char(
        string="The unit of measure on which the tax calculation is based",
        xsd_type="BaseUnitMeasureType",
    )

    ubl23_PerUnitAmount = fields.Float(
        string="Where a tax is applied at a certain rate per unit",
        xsd_type="PerUnitAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "Where a tax is applied at a certain rate per unit, the rate per "
            "unit applied."
        ),
    )

    ubl23_TierRange = fields.Char(
        string="Where a tax is tiered",
        xsd_type="TierRangeType",
        help=(
            "Where a tax is tiered, the range of taxable amounts that "
            "determines the rate of tax applicable to this tax subtotal."
        ),
    )

    ubl23_TierRatePercent = fields.Char(
        string="Where a tax is tiered (TierRatePercent)",
        xsd_type="TierRatePercentType",
        help=(
            "Where a tax is tiered, the tax rate that applies within a "
            "specified range of taxable amounts for this tax subtotal."
        ),
    )

    ubl23_TaxCategory = fields.Many2one(
        comodel_name="ubl.23.taxcategory",
        string="The tax category applicable to this subtotal",
        xsd_required=True,
        help="The tax category applicable to this subtotal.",
    )


class TenderPreparationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tender Preparation. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe directions for preparing a
    tender.</ns1:Definition>
    <ns1:ObjectClass>Tender Preparation</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderpreparationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderPreparationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TenderEnvelopeID = fields.Char(
        string="TenderEnvelopeID",
        xsd_required=True,
        xsd_type="TenderEnvelopeIDType",
        help=("An identifier for the tender envelope to be used with the tender."),
    )

    ubl23_TenderEnvelopeTypeCode = fields.Char(
        string="A code signifying the type of tender envelope",
        xsd_type="TenderEnvelopeTypeCodeType",
        help=(
            "A code signifying the type of tender envelope (economical or "
            "objective criteria versus technical or subjective criteria)."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the tender envelope.", xsd_type="DescriptionType"
    )

    ubl23_OpenTenderID = fields.Char(
        string="OpenTenderID",
        xsd_type="OpenTenderIDType",
        help=(
            "An identifier for the open tender associated with this tender "
            "preparation."
        ),
    )

    ubl23_ProcurementProjectLot = fields.One2many(
        "ubl.23.procurementprojectlot",
        "ubl23_ProcurementProjectLot_TenderPreparationType_id",
        string="ProcurementProjectLot",
        help=("The procurement project lot associated with a particular " "tenderer."),
    )

    ubl23_DocumentTenderRequirement = fields.One2many(
        "ubl.23.documenttenderrequirement",
        "ubl23_DocumentTenderRequirement_TenderPreparationType_id",
        string="DocumentTenderRequirement",
        help=(
            "A reference to the template for a required document in a "
            "tendering process."
        ),
    )

    ubl23_TenderEncryptionData = fields.One2many(
        "ubl.23.tenderencryptiondata",
        "ubl23_TenderEncryptionData_TenderPreparationType_id",
        string="TenderEncryptionData",
        help=(
            "A reference to the details of the encryption process used for the"
            " tender."
        ),
    )


class CallDuty(models.AbstractModel):
    _description = "CallDuty"
    _name = "ubl.23.callduty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CallDuty"

    ubl23_CallDuty_TelecommunicationsServiceType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationsservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Certificate(models.AbstractModel):
    _description = "Certificate"
    _name = "ubl.23.certificate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Certificate"

    ubl23_Certificate_AuthorizationType_id = fields.Many2one(
        comodel_name="ubl.23.authorizationtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Certificate_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Certificate_StorageType_id = fields.Many2one(
        comodel_name="ubl.23.storagetype", xsd_implicit=True, ondelete="cascade"
    )


class DependentPriceReference(models.AbstractModel):
    _description = "DependentPriceReference"
    _name = "ubl.23.dependentpricereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DependentPriceReference"


class DigitalCertificate(models.AbstractModel):
    _description = "DigitalCertificate"
    _name = "ubl.23.digitalcertificate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalCertificate"


class Duty(models.AbstractModel):
    _description = "Duty"
    _name = "ubl.23.duty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Duty"


class EnergyWaterSupply(models.AbstractModel):
    _description = "EnergyWaterSupply"
    _name = "ubl.23.energywatersupply"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnergyWaterSupply"


class FinancialAccount(models.AbstractModel):
    _description = "FinancialAccount"
    _name = "ubl.23.financialaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialAccount"


class FinancingFinancialAccount(models.AbstractModel):
    _description = "FinancingFinancialAccount"
    _name = "ubl.23.financingfinancialaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancingFinancialAccount"


class FrameworkAgreement(models.AbstractModel):
    _description = "FrameworkAgreement"
    _name = "ubl.23.frameworkagreement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FrameworkAgreement"


class LineResponse(models.AbstractModel):
    _description = "LineResponse"
    _name = "ubl.23.lineresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineResponse"

    ubl23_LineResponse_DocumentResponseType_id = fields.Many2one(
        comodel_name="ubl.23.documentresponsetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class MedicalCertificate(models.AbstractModel):
    _description = "MedicalCertificate"
    _name = "ubl.23.medicalcertificate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MedicalCertificate"


class OrderLineReference(models.AbstractModel):
    _description = "OrderLineReference"
    _name = "ubl.23.orderlinereference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderLineReference"

    ubl23_OrderLineReference_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_OrderLineReference_DespatchLineType_id = fields.Many2one(
        comodel_name="ubl.23.despatchlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_OrderLineReference_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_OrderLineReference_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_OrderLineReference_OrderLineType_id = fields.Many2one(
        comodel_name="ubl.23.orderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class PayeeFinancialAccount(models.AbstractModel):
    _description = "PayeeFinancialAccount"
    _name = "ubl.23.payeefinancialaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PayeeFinancialAccount"


class PayerFinancialAccount(models.AbstractModel):
    _description = "PayerFinancialAccount"
    _name = "ubl.23.payerfinancialaccount"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PayerFinancialAccount"


class ProjectReference(models.AbstractModel):
    _description = "ProjectReference"
    _name = "ubl.23.projectreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProjectReference"


class RequestedTenderTotal(models.AbstractModel):
    _description = "RequestedTenderTotal"
    _name = "ubl.23.requestedtendertotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedTenderTotal"


class ShipSanitationControlCertificate(models.AbstractModel):
    _description = "ShipSanitationControlCertificate"
    _name = "ubl.23.shipsanitationcontrolcertificate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipSanitationControlCertificate"


class TaxSubtotal(models.AbstractModel):
    _description = "TaxSubtotal"
    _name = "ubl.23.taxsubtotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxSubtotal"

    ubl23_TaxSubtotal_TaxTotalType_id = fields.Many2one(
        comodel_name="ubl.23.taxtotaltype", xsd_implicit=True, ondelete="cascade"
    )


class TenderPreparation(models.AbstractModel):
    _description = "TenderPreparation"
    _name = "ubl.23.tenderpreparation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderPreparation"

    ubl23_TenderPreparation_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class TimeDuty(models.AbstractModel):
    _description = "TimeDuty"
    _name = "ubl.23.timeduty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TimeDuty"

    ubl23_TimeDuty_TelecommunicationsServiceType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationsservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AuthorizationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Authorization. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an authorization that as been
    issued</ns1:Definition>
    <ns1:ObjectClass>Authorization</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.authorizationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AuthorizationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PurposeCode = fields.Char(
        string="PurposeCode",
        xsd_type="PurposeCodeType",
        help=("A code defining the business purpose or scope of this " "authorization"),
    )

    ubl23_Purpose = fields.Char(
        string="Purpose",
        xsd_type="PurposeType",
        help=("The purpose or scope of this authorization expressed as a text"),
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which this authorization is valid",
    )

    ubl23_Certificate = fields.One2many(
        "ubl.23.certificate",
        "ubl23_Certificate_AuthorizationType_id",
        string="One or more certificates related to this authorization",
    )


class DeliveryChannelType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Delivery Channel. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a delivery channel.</ns1:Definition>
    <ns1:ObjectClass>Delivery Channel</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.deliverychanneltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryChannelType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_NetworkID = fields.Char(
        string="An identifier for the network where messages are delivered",
        xsd_type="NetworkIDType",
        help=(
            "An identifier for the network where messages are delivered (e.g. "
            "a business network)."
        ),
    )

    ubl23_ParticipantID = fields.Char(
        string="An identifier for a registered participant in the network",
        xsd_type="ParticipantIDType",
        help=(
            "An identifier for a registered participant in the network (e.g. "
            "according a precise scheme such as IT:VAT, DK:CVR, GLN)."
        ),
    )

    ubl23_TestIndicator = fields.Boolean(
        string="An indicator that the channel is a test channel",
        help="An indicator that the channel is a test channel (true).",
    )

    ubl23_DigitalCertificate = fields.Many2one(
        comodel_name="ubl.23.digitalcertificate",
        string="DigitalCertificate",
        help="A digital certificate associated with this delivery channel.",
    )

    ubl23_DigitalMessageDelivery = fields.Many2one(
        comodel_name="ubl.23.digitalmessagedelivery",
        string="DigitalMessageDelivery",
        help=(
            "A digital message delivery associated with this delivery channel "
            "(aka routing information)."
        ),
    )


class StorageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Storage. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a storage and storage
    requirements</ns1:Definition>
    <ns1:ObjectClass>Storage</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.storagetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StorageType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this storage.", xsd_required=True, xsd_type="IDType"
    )

    ubl23_Name = fields.Char(string="The common name this storage", xsd_type="NameType")

    ubl23_GateID = fields.Char(
        string="An identifier for the agreed gate to enter",
        xsd_type="GateIDType",
        help=(
            "An identifier for the agreed gate to enter, deliver or pick up at"
            " this storage"
        ),
    )

    ubl23_AirFlowPercent = fields.Char(
        string="The percent of the airflow within this storage",
        xsd_type="AirFlowPercentType",
        help="The percent of the airflow within this storage.",
    )

    ubl23_HumidityPercent = fields.Char(
        string="The percent humidity within this storage",
        xsd_type="HumidityPercentType",
        help="The percent humidity within this storage.",
    )

    ubl23_AnimalFoodApprovedIndicator = fields.Boolean(
        string="An indicator that this storage is approved for animal food",
        help=(
            "An indicator that this storage is approved for animal food (true)"
            " or not (false)."
        ),
    )

    ubl23_HumanFoodApprovedIndicator = fields.Boolean(
        string="An indicator that this storage is approved for human food",
        help=(
            "An indicator that this storage is approved for human food (true) "
            "or not (false)."
        ),
    )

    ubl23_DangerousGoodsApprovedIndicator = fields.Boolean(
        string="DangerousGoodsApprovedIndicator",
        help=(
            "An indicator that this stroage is approved for dangerous goods "
            "(true) or not (false)."
        ),
    )

    ubl23_RefrigeratedIndicator = fields.Boolean(
        string="An indicator that storage is refrigerated",
        help=("An indicator that storage is refrigerated (true) or not (false)."),
    )

    ubl23_PowerIndicator = fields.Boolean(
        string="An indicator that this storage can supply power",
        help=(
            "An indicator that this storage can supply power (true) or not " "(false)."
        ),
    )

    ubl23_MinimumTemperature = fields.Many2one(
        comodel_name="ubl.23.minimumtemperature",
        string="MinimumTemperature",
        help=(
            "The minimum allowable operating temperature for this refriguated "
            "storage."
        ),
    )

    ubl23_MaximumTemperature = fields.Many2one(
        comodel_name="ubl.23.maximumtemperature",
        string="MaximumTemperature",
        help=(
            "The maximum allowable operating temperature for this refriguated "
            "storage."
        ),
    )

    ubl23_Certificate = fields.One2many(
        "ubl.23.certificate",
        "ubl23_Certificate_StorageType_id",
        string="A certificate associated with this storage",
    )


class TaxTotalType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tax Total. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the total tax for a particular taxation
    scheme.</ns1:Definition>
    <ns1:ObjectClass>Tax Total</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.taxtotaltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxTotalType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TaxAmount = fields.Float(
        string="The total tax amount for a particular taxation scheme",
        xsd_required=True,
        xsd_type="TaxAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total tax amount for a particular taxation scheme, e.g., VAT;"
            " the sum of the tax subtotals for each tax category within the "
            "taxation scheme."
        ),
    )

    ubl23_CalculationSequenceNumeric = fields.Float(
        string="CalculationSequenceNumeric",
        xsd_type="CalculationSequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of this tax total in the sequence of tax totals "
            "corresponding to the order in which multiple taxes are applied. "
            "If all taxes are applied to the same taxable amount (i.e., their "
            "order of application is inconsequential), then "
            "CalculationSequenceNumeric is 1 for all tax totals applied to a "
            "given amount."
        ),
    )

    ubl23_RoundingAmount = fields.Float(
        string="The rounding amount",
        xsd_type="RoundingAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The rounding amount (positive or negative) added to the "
            "calculated tax total to produce the rounded TaxAmount."
        ),
    )

    ubl23_TaxEvidenceIndicator = fields.Boolean(
        string="TaxEvidenceIndicator",
        help=(
            "An indicator that this total is recognized as legal evidence for "
            "taxation purposes (true) or not (false)."
        ),
    )

    ubl23_TaxIncludedIndicator = fields.Boolean(
        string="An indicator that tax is included in the calculation",
        help=(
            "An indicator that tax is included in the calculation (true) or "
            "not (false)."
        ),
    )

    ubl23_TaxSubtotal = fields.One2many(
        "ubl.23.taxsubtotal",
        "ubl23_TaxSubtotal_TaxTotalType_id",
        string="TaxSubtotal",
        help=(
            "One of the subtotals the sum of which equals the total tax amount"
            " for a particular taxation scheme."
        ),
    )


class Authorization(models.AbstractModel):
    _description = "Authorization"
    _name = "ubl.23.authorization"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Authorization"


class DeliveryChannel(models.AbstractModel):
    _description = "DeliveryChannel"
    _name = "ubl.23.deliverychannel"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryChannel"


class DigitalDeliveryChannel(models.AbstractModel):
    _description = "DigitalDeliveryChannel"
    _name = "ubl.23.digitaldeliverychannel"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalDeliveryChannel"

    ubl23_DigitalDeliveryChannel_DigitalServiceType_id = fields.Many2one(
        comodel_name="ubl.23.digitalservicetype", xsd_implicit=True, ondelete="cascade"
    )


class PartyAuthorization(models.AbstractModel):
    _description = "PartyAuthorization"
    _name = "ubl.23.partyauthorization"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyAuthorization"

    ubl23_PartyAuthorization_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class Storage(models.AbstractModel):
    _description = "Storage"
    _name = "ubl.23.storage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Storage"


class TaxTotal(models.AbstractModel):
    _description = "TaxTotal"
    _name = "ubl.23.taxtotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxTotal"

    ubl23_TaxTotal_ConsumptionType_id = fields.Many2one(
        comodel_name="ubl.23.consumptiontype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_ConsumptionLineType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_PriceExtensionType_id = fields.Many2one(
        comodel_name="ubl.23.priceextensiontype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TaxTotal_TelecommunicationsServiceType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationsservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_TaxTotal_TelecommunicationsSupplyLineType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationssupplylinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_TaxTotal_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class WithholdingTaxTotal(models.AbstractModel):
    _description = "WithholdingTaxTotal"
    _name = "ubl.23.withholdingtaxtotal"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WithholdingTaxTotal"

    ubl23_WithholdingTaxTotal_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )


class DigitalServiceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Digital Service. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a specific digital trade service supported
    by an organization for either sending or receiving business documents on
    different formats (e.g. UBL, ISO20022, EDIFACT, ...).</ns1:Definition>
    <ns1:ObjectClass>Digital Service</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Business
    Transaction</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.digitalservicetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalServiceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the digital service",
        xsd_type="IDType",
        help="An identifier for the digital service (aka transaction ID).",
    )

    ubl23_CustomizationID = fields.Char(
        string="Identifies a user",
        xsd_type="CustomizationIDType",
        help=(
            "Identifies a user-defined customization of this digital service "
            "(e.g. a PEPPOL customization)."
        ),
    )

    ubl23_DigitalDocumentMetadata = fields.One2many(
        "ubl.23.digitaldocumentmetadata",
        "ubl23_DigitalDocumentMetadata_DigitalServiceType_id",
        string="DigitalDocumentMetadata",
        help=("The digital document metadata associated with this digital " "service."),
    )

    ubl23_DigitalDeliveryChannel = fields.One2many(
        "ubl.23.digitaldeliverychannel",
        "ubl23_DigitalDeliveryChannel_DigitalServiceType_id",
        string="DigitalDeliveryChannel",
        help=("The digital delivery channel associated with this digital " "service."),
    )

    ubl23_CertificationDocumentReference = fields.One2many(
        "ubl.23.certificationdocumentreference",
        "ubl23_CertificationDocumentReference_DigitalServiceType_id",
        string="CertificationDocumentReference",
        help=(
            "A reference to a certification document associated with this "
            "digital service."
        ),
    )


class LocationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Location. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a location.</ns1:Definition>
    <ns1:ObjectClass>Location</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.locationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LocationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this location",
        xsd_type="IDType",
        help=(
            "An identifier for this location, e.g., the EAN Location Number, " "GLN."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this location.", xsd_type="DescriptionType"
    )

    ubl23_Conditions = fields.Char(
        string="Free",
        xsd_type="ConditionsType",
        help=("Free-form text describing the physical conditions of the " "location."),
    )

    ubl23_CountrySubentity = fields.Char(
        string="A territorial division of a country",
        xsd_type="CountrySubentityType",
        help=(
            "A territorial division of a country, such as a county or state, "
            "expressed as text."
        ),
    )

    ubl23_CountrySubentityCode = fields.Char(
        string="A territorial division of a country (CountrySubentityCode)",
        xsd_type="CountrySubentityCodeType",
        help=(
            "A territorial division of a country, such as a county or state, "
            "expressed as a code."
        ),
    )

    ubl23_LocationTypeCode = fields.Char(
        string="A code signifying the type of location",
        xsd_type="LocationTypeCodeType",
        help="A code signifying the type of location.",
    )

    ubl23_InformationURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="InformationURIType",
        help=(
            "The Uniform Resource Identifier (URI) of a document providing "
            "information about this location."
        ),
    )

    ubl23_Name = fields.Char(string="The name of this location.", xsd_type="NameType")

    ubl23_ValidityPeriod = fields.One2many(
        "ubl.23.validityperiod",
        "ubl23_ValidityPeriod_LocationType_id",
        string="A period during which this location can be used",
        help=(
            "A period during which this location can be used (e.g., for " "delivery)."
        ),
    )

    ubl23_Address = fields.Many2one(
        comodel_name="ubl.23.address", string="The address of this location."
    )

    ubl23_Storage = fields.Many2one(
        comodel_name="ubl.23.storage",
        string="Storage",
        help=("The description and requirements of the storage at this location."),
    )

    ubl23_SubsidiaryLocation = fields.One2many(
        "ubl.23.subsidiarylocation",
        "ubl23_SubsidiaryLocation_LocationType_id",
        string="A location subsidiary to this location",
        help="A location subsidiary to this location.",
    )

    ubl23_LocationCoordinate = fields.One2many(
        "ubl.23.locationcoordinate",
        "ubl23_LocationCoordinate_LocationType_id",
        string="The geographical coordinates of this location",
        help="The geographical coordinates of this location.",
    )


class PriceExtensionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Price Extension. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a price extension, calculated by
    multiplying the price per unit by the quantity of items.</ns1:Definition>
    <ns1:ObjectClass>Price Extension</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.priceextensiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PriceExtensionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Amount = fields.Monetary(
        string="The amount of this price extension.",
        xsd_required=True,
        xsd_type="AmountType",
        currency_field="brl_currency_id",
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_PriceExtensionType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "price extension."
        ),
    )


class ActivityFinalLocation(models.AbstractModel):
    _description = "ActivityFinalLocation"
    _name = "ubl.23.activityfinallocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityFinalLocation"


class ActivityOriginLocation(models.AbstractModel):
    _description = "ActivityOriginLocation"
    _name = "ubl.23.activityoriginlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityOriginLocation"


class AlternativeDeliveryLocation(models.AbstractModel):
    _description = "AlternativeDeliveryLocation"
    _name = "ubl.23.alternativedeliverylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AlternativeDeliveryLocation"


class AtLocation(models.AbstractModel):
    _description = "AtLocation"
    _name = "ubl.23.atlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AtLocation"


class BirthplaceLocation(models.AbstractModel):
    _description = "BirthplaceLocation"
    _name = "ubl.23.birthplacelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BirthplaceLocation"


class CustomsExitOfficeLocation(models.AbstractModel):
    _description = "CustomsExitOfficeLocation"
    _name = "ubl.23.customsexitofficelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsExitOfficeLocation"


class CustomsOfficeLocation(models.AbstractModel):
    _description = "CustomsOfficeLocation"
    _name = "ubl.23.customsofficelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsOfficeLocation"


class DeliveryLocation(models.AbstractModel):
    _description = "DeliveryLocation"
    _name = "ubl.23.deliverylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryLocation"


class DespatchLocation(models.AbstractModel):
    _description = "DespatchLocation"
    _name = "ubl.23.despatchlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchLocation"


class DigitalService(models.AbstractModel):
    _description = "DigitalService"
    _name = "ubl.23.digitalservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalService"


class ExportCustomsExitOfficeLocation(models.AbstractModel):
    _description = "ExportCustomsExitOfficeLocation"
    _name = "ubl.23.exportcustomsexitofficelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportCustomsExitOfficeLocation"


class FirstArrivalPortLocation(models.AbstractModel):
    _description = "FirstArrivalPortLocation"
    _name = "ubl.23.firstarrivalportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FirstArrivalPortLocation"


class FreightChargeLocation(models.AbstractModel):
    _description = "FreightChargeLocation"
    _name = "ubl.23.freightchargelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FreightChargeLocation"


class FromLocation(models.AbstractModel):
    _description = "FromLocation"
    _name = "ubl.23.fromlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FromLocation"


class ImportCustomsExitOfficeLocation(models.AbstractModel):
    _description = "ImportCustomsExitOfficeLocation"
    _name = "ubl.23.importcustomsexitofficelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImportCustomsExitOfficeLocation"


class InventoryLocation(models.AbstractModel):
    _description = "InventoryLocation"
    _name = "ubl.23.inventorylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InventoryLocation"


class ItemPriceExtension(models.AbstractModel):
    _description = "ItemPriceExtension"
    _name = "ubl.23.itempriceextension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPriceExtension"


class LastExitPortLocation(models.AbstractModel):
    _description = "LastExitPortLocation"
    _name = "ubl.23.lastexitportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LastExitPortLocation"


class LoadingLocation(models.AbstractModel):
    _description = "LoadingLocation"
    _name = "ubl.23.loadinglocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LoadingLocation"


class LoadingPortLocation(models.AbstractModel):
    _description = "LoadingPortLocation"
    _name = "ubl.23.loadingportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LoadingPortLocation"


class Location(models.AbstractModel):
    _description = "Location"
    _name = "ubl.23.location"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Location"

    ubl23_Location_StowageType_id = fields.Many2one(
        comodel_name="ubl.23.stowagetype", xsd_implicit=True, ondelete="cascade"
    )


class MeasurementFromLocation(models.AbstractModel):
    _description = "MeasurementFromLocation"
    _name = "ubl.23.measurementfromlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeasurementFromLocation"


class MeasurementToLocation(models.AbstractModel):
    _description = "MeasurementToLocation"
    _name = "ubl.23.measurementtolocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MeasurementToLocation"


class NotificationLocation(models.AbstractModel):
    _description = "NotificationLocation"
    _name = "ubl.23.notificationlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotificationLocation"

    ubl23_NotificationLocation_NotificationRequirementType_id = fields.Many2one(
        comodel_name="ubl.23.notificationrequirementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OccurenceLocation(models.AbstractModel):
    _description = "OccurenceLocation"
    _name = "ubl.23.occurencelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OccurenceLocation"


class OfficeOfDepartureLocation(models.AbstractModel):
    _description = "OfficeOfDepartureLocation"
    _name = "ubl.23.officeofdeparturelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfDepartureLocation"


class OfficeOfDestinationLocation(models.AbstractModel):
    _description = "OfficeOfDestinationLocation"
    _name = "ubl.23.officeofdestinationlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfDestinationLocation"


class OfficeOfEntryLocation(models.AbstractModel):
    _description = "OfficeOfEntryLocation"
    _name = "ubl.23.officeofentrylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfEntryLocation"


class OfficeOfExitLocation(models.AbstractModel):
    _description = "OfficeOfExitLocation"
    _name = "ubl.23.officeofexitlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfExitLocation"


class OfficeOfExportLocation(models.AbstractModel):
    _description = "OfficeOfExportLocation"
    _name = "ubl.23.officeofexportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfExportLocation"


class OfficeOfImportLocation(models.AbstractModel):
    _description = "OfficeOfImportLocation"
    _name = "ubl.23.officeofimportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfImportLocation"


class OfficeOfSubSequentiallyEntryLocation(models.AbstractModel):
    _description = "OfficeOfSubSequentiallyEntryLocation"
    _name = "ubl.23.officeofsubsequentiallyentrylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfficeOfSubSequentiallyEntryLocation"


class ParticipatingLocationsLocation(models.AbstractModel):
    _description = "ParticipatingLocationsLocation"
    _name = "ubl.23.participatinglocationslocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParticipatingLocationsLocation"


class PhysicalLocation(models.AbstractModel):
    _description = "PhysicalLocation"
    _name = "ubl.23.physicallocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PhysicalLocation"


class PickupLocation(models.AbstractModel):
    _description = "PickupLocation"
    _name = "ubl.23.pickuplocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PickupLocation"


class PlaceOfReportLocation(models.AbstractModel):
    _description = "PlaceOfReportLocation"
    _name = "ubl.23.placeofreportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlaceOfReportLocation"


class PortFacilityLocation(models.AbstractModel):
    _description = "PortFacilityLocation"
    _name = "ubl.23.portfacilitylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortFacilityLocation"


class PriceExtension(models.AbstractModel):
    _description = "PriceExtension"
    _name = "ubl.23.priceextension"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PriceExtension"


class RealizedLocation(models.AbstractModel):
    _description = "RealizedLocation"
    _name = "ubl.23.realizedlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RealizedLocation"

    ubl23_RealizedLocation_ProcurementProjectType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojecttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ReceivingDigitalService(models.AbstractModel):
    _description = "ReceivingDigitalService"
    _name = "ubl.23.receivingdigitalservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceivingDigitalService"


class RegistryPortLocation(models.AbstractModel):
    _description = "RegistryPortLocation"
    _name = "ubl.23.registryportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RegistryPortLocation"


class RemainingWasteDeliveryPortLocation(models.AbstractModel):
    _description = "RemainingWasteDeliveryPortLocation"
    _name = "ubl.23.remainingwastedeliveryportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RemainingWasteDeliveryPortLocation"

    ubl23_RemainingWasteDeliveryPortLocation_MaritimeWasteType_id = fields.Many2one(
        comodel_name="ubl.23.maritimewastetype", xsd_implicit=True, ondelete="cascade"
    )


class ReportLocation(models.AbstractModel):
    _description = "ReportLocation"
    _name = "ubl.23.reportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReportLocation"


class ReportingLocation(models.AbstractModel):
    _description = "ReportingLocation"
    _name = "ubl.23.reportinglocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReportingLocation"


class RequestedStatusLocation(models.AbstractModel):
    _description = "RequestedStatusLocation"
    _name = "ubl.23.requestedstatuslocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedStatusLocation"


class SendingDigitalService(models.AbstractModel):
    _description = "SendingDigitalService"
    _name = "ubl.23.sendingdigitalservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SendingDigitalService"


class StatusLocation(models.AbstractModel):
    _description = "StatusLocation"
    _name = "ubl.23.statuslocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatusLocation"


class StorageLocation(models.AbstractModel):
    _description = "StorageLocation"
    _name = "ubl.23.storagelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StorageLocation"


class SubsidiaryLocation(models.AbstractModel):
    _description = "SubsidiaryLocation"
    _name = "ubl.23.subsidiarylocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubsidiaryLocation"

    ubl23_SubsidiaryLocation_LocationType_id = fields.Many2one(
        comodel_name="ubl.23.locationtype", xsd_implicit=True, ondelete="cascade"
    )


class ToLocation(models.AbstractModel):
    _description = "ToLocation"
    _name = "ubl.23.tolocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ToLocation"


class TransitCustomsExitOfficeLocation(models.AbstractModel):
    _description = "TransitCustomsExitOfficeLocation"
    _name = "ubl.23.transitcustomsexitofficelocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransitCustomsExitOfficeLocation"


class TransshipPortLocation(models.AbstractModel):
    _description = "TransshipPortLocation"
    _name = "ubl.23.transshipportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransshipPortLocation"


class UnloadingLocation(models.AbstractModel):
    _description = "UnloadingLocation"
    _name = "ubl.23.unloadinglocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnloadingLocation"


class UnloadingPortLocation(models.AbstractModel):
    _description = "UnloadingPortLocation"
    _name = "ubl.23.unloadingportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnloadingPortLocation"


class WhoaffectedAreaPortLocation(models.AbstractModel):
    _description = "WHOAffectedAreaPortLocation"
    _name = "ubl.23.whoaffectedareaportlocation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WhoaffectedAreaPortLocation"


class BallastWaterTransactionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ballast Water Transaction.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a ballast water transaction, such as the
    uptake, exchange or discharge of ballast water.</ns1:Definition>
    <ns1:ObjectClass>Ballast Water Transaction</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.ballastwatertransactiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BallastWaterTransactionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TankID = fields.Char(
        string="TankID",
        xsd_type="TankIDType",
        help=(
            "An identifier for the ballast water tank being used in this "
            "ballast water transaction."
        ),
    )

    ubl23_TankTypeCode = fields.Char(
        string="TankTypeCode",
        xsd_type="TankTypeCodeType",
        help=(
            "A code for the type of ballast water tank being used in the "
            "ballast water transaction."
        ),
    )

    ubl23_ExchangeMethodCode = fields.Char(
        string="ExchangeMethodCode",
        xsd_type="ExchangeMethodCodeType",
        help=(
            "A code expressing how ballast water is being filled into or "
            "discharged from the tank."
        ),
    )

    ubl23_ExchangedPercent = fields.Char(
        string="ExchangedPercent",
        xsd_type="ExchangedPercentType",
        help=(
            "The percentage of the ballast water in the tank being exchanged "
            "in this ballast water transaction."
        ),
    )

    ubl23_VolumeMeasure = fields.Char(
        string="VolumeMeasure",
        xsd_type="VolumeMeasureType",
        help=(
            "The volume of ballast water being exchanged in this ballast water"
            " transaction."
        ),
    )

    ubl23_SeaHeightMeasure = fields.Char(
        string="A measure of the sea height at the time of the transaction",
        xsd_type="SeaHeightMeasureType",
        help="A measure of the sea height at the time of the transaction.",
    )

    ubl23_SalinityMeasure = fields.Char(
        string="A measure for the salinity of the water in the tank",
        xsd_type="SalinityMeasureType",
        help="A measure for the salinity of the water in the tank.",
    )

    ubl23_TransactionDate = fields.Date(
        string="The date when this ballast water transaction takes place",
        help="The date when this ballast water transaction takes place.",
    )

    ubl23_Location = fields.Many2one(
        comodel_name="ubl.23.location",
        string="Location",
        help=("The location where this ballast water transaction takes place."),
    )

    ubl23_BallastWaterTemperature = fields.Many2one(
        comodel_name="ubl.23.ballastwatertemperature",
        string="BallastWaterTemperature",
        help="The temperature of the ballast water at time of transaction.",
    )


class DigitalCollaborationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Digital Collaboration.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a digital trade
    collaboration.</ns1:Definition>
    <ns1:ObjectClass>Digital Collaboration</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Business
    Collaboration</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.digitalcollaborationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalCollaborationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the digital collaboration",
        xsd_type="IDType",
        help="An identifier for the digital collaboration.",
    )

    ubl23_SendingDigitalService = fields.Many2one(
        comodel_name="ubl.23.sendingdigitalservice",
        string="SendingDigitalService",
        help=(
            "The sending digital service associated with this digital " "collaboration."
        ),
    )

    ubl23_ReceivingDigitalService = fields.Many2one(
        comodel_name="ubl.23.receivingdigitalservice",
        string="ReceivingDigitalService",
        help=(
            "The receiving digital service associated with this digital "
            "collaboration."
        ),
    )


class EmissionCalculationMethodType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Emission Calculation Method.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define how an environmental emission is
    calculated.</ns1:Definition>
    <ns1:ObjectClass>Emission Calculation Method</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.emissioncalculationmethodtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EmissionCalculationMethodType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CalculationMethodCode = fields.Char(
        string="CalculationMethodCode",
        xsd_type="CalculationMethodCodeType",
        help="A code signifying the method used to calculate the emission.",
    )

    ubl23_FullnessIndicationCode = fields.Char(
        string="FullnessIndicationCode",
        xsd_type="FullnessIndicationCodeType",
        help=(
            "A code signifying whether a piece of transport equipment is full,"
            " partially full, or empty. This indication is used as a parameter"
            " when calculating the environmental emission."
        ),
    )

    ubl23_MeasurementFromLocation = fields.Many2one(
        comodel_name="ubl.23.measurementfromlocation",
        string="MeasurementFromLocation",
        help=(
            "A start location from which an environmental emission is " "calculated."
        ),
    )

    ubl23_MeasurementToLocation = fields.Many2one(
        comodel_name="ubl.23.measurementtolocation",
        string="MeasurementToLocation",
        help=("An end location to which an environmental emission is calculated."),
    )


class EventType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Event. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a significant occurrence relating to an
    object, process, or person.</ns1:Definition>
    <ns1:ObjectClass>Event</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.eventtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_IdentificationID = fields.Char(
        string="IdentificationID",
        xsd_type="IdentificationIDType",
        help=(
            "An identifier for this event within an agreed event "
            "identification scheme."
        ),
    )

    ubl23_OccurrenceDate = fields.Date(string="The date of this event.")

    ubl23_TypeCode = fields.Char(
        string="A code signifying the type of this event",
        xsd_type="TypeCodeType",
        help="A code signifying the type of this event.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this event.", xsd_type="DescriptionType"
    )

    ubl23_CompletionIndicator = fields.Boolean(
        string="An indicator that this event has been completed",
        help=(
            "An indicator that this event has been completed (true) or not " "(false)."
        ),
    )

    ubl23_CurrentStatus = fields.One2many(
        "ubl.23.currentstatus",
        "ubl23_CurrentStatus_EventType_id",
        string="The current status of this event.",
    )

    ubl23_Contact = fields.One2many(
        "ubl.23.contact",
        "ubl23_Contact_EventType_id",
        string="Contacts associated with this event.",
    )

    ubl23_OccurenceLocation = fields.Many2one(
        comodel_name="ubl.23.occurencelocation", string="The location of this event."
    )


class MaritimeTransportType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Maritime Transport. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a vessel used for transport by water
    (including sea, river, and canal).</ns1:Definition>
    <ns1:ObjectClass>Maritime Transport</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.maritimetransporttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeTransportType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_VesselID = fields.Char(
        string="An identifier for a specific vessel.", xsd_type="VesselIDType"
    )

    ubl23_VesselName = fields.Char(
        string="The name of the vessel.", xsd_type="VesselNameType"
    )

    ubl23_RadioCallSignID = fields.Char(
        string="The radio call sign of the vessel.", xsd_type="RadioCallSignIDType"
    )

    ubl23_MMSIRegistrationID = fields.Char(
        string="A Maritime Mobile Service Identity",
        xsd_type="MMSIRegistrationIDType",
        help=("A Maritime Mobile Service Identity (MMSI) required for this " "vessel."),
    )

    ubl23_ShipsRequirements = fields.Char(
        string="ShipsRequirements",
        xsd_type="ShipsRequirementsType",
        help=(
            "Information about what services a vessel will require when it "
            "arrives at a port, such as refueling, maintenance, waste disposal"
            " etc."
        ),
    )

    ubl23_GrossTonnageMeasure = fields.Char(
        string="Gross tonnage is calculated by measuring a ship's volume",
        xsd_type="GrossTonnageMeasureType",
        help=(
            "Gross tonnage is calculated by measuring a ship's volume (from "
            "keel to funnel, to the outside of the hull framing) and applying "
            "a mathematical formula and is used to determine things such as a "
            "ship's manning regulations, safety rules, registration fees and "
            "port dues."
        ),
    )

    ubl23_NetTonnageMeasure = fields.Char(
        string="NetTonnageMeasure",
        xsd_type="NetTonnageMeasureType",
        help=(
            "Net tonnage is calculated by measuring a ship's internal volume "
            "and applying a mathematical formula and is used to calculate the "
            "port duties."
        ),
    )

    ubl23_SegregatedBallastMeasure = fields.Char(
        string="The measure of the segregated ballast of the vessel",
        xsd_type="SegregatedBallastMeasureType",
        help="The measure of the segregated ballast of the vessel.",
    )

    ubl23_ShipConfigurationCode = fields.Char(
        string="A code specifying the ship configuration",
        xsd_type="ShipConfigurationCodeType",
        help="A code specifying the ship configuration.",
    )

    ubl23_INFShipClassCode = fields.Char(
        string="A code specifying the irradiated nuclear fuel",
        xsd_type="INFShipClassCodeType",
        help=("A code specifying the irradiated nuclear fuel (INF) ship class."),
    )

    ubl23_AntennaLocus = fields.Char(
        string="The locus or exact location of the antenna on the vessel",
        xsd_type="AntennaLocusType",
    )

    ubl23_RegistryCertificateDocumentReference = fields.Many2one(
        comodel_name="ubl.23.registrycertificatedocumentreference",
        string="RegistryCertificateDocumentReference",
        help=(
            "The certificate issued to the ship by the ships registry in a "
            "given flag state."
        ),
    )

    ubl23_RegistryPortLocation = fields.Many2one(
        comodel_name="ubl.23.registryportlocation",
        string="RegistryPortLocation",
        help=("The port in which a vessel is registered or permanently based."),
    )

    ubl23_VesselDynamics = fields.Many2one(
        comodel_name="ubl.23.vesseldynamics",
        string="The vessel dynamics for this maritime transport",
        help="The vessel dynamics for this maritime transport.",
    )


class MaritimeWasteType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Maritime Waste. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a transaction of maritime
    waste.</ns1:Definition>
    <ns1:ObjectClass>Maritime Waste</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.maritimewastetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeWasteType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this maritime waste transaction",
        xsd_type="IDType",
        help="An identifier for this maritime waste transaction.",
    )

    ubl23_Description = fields.Char(
        string="A text descriping this maritime waste transaction",
        xsd_type="DescriptionType",
        help="A text descriping this maritime waste transaction.",
    )

    ubl23_WasteTypeCode = fields.Char(
        string="WasteTypeCode",
        xsd_type="WasteTypeCodeType",
        help=(
            "A code specifying the type of waste in this maritime waste " "transaction."
        ),
    )

    ubl23_ToBeDeliveredMeasure = fields.Char(
        string="The messure of waste to be delivered",
        xsd_type="ToBeDeliveredMeasureType",
        help="The messure of waste to be delivered.",
    )

    ubl23_RetainedOnBoardMeasure = fields.Char(
        string="The meassure of waste retained on board",
        xsd_type="RetainedOnBoardMeasureType",
        help="The meassure of waste retained on board.",
    )

    ubl23_MaxDedicatedStorageCapacityMeasure = fields.Char(
        string="The messure for the maximum dedicated storage capacity",
        xsd_type="MaxDedicatedStorageCapacityMeasureType",
        help="The messure for the maximum dedicated storage capacity.",
    )

    ubl23_EstimatedGeneratedUntilNextPortMeasure = fields.Char(
        string="The messure of waste generated until the next port",
        xsd_type="EstimatedGeneratedUntilNextPortMeasureType",
        help="The messure of waste generated until the next port.",
    )

    ubl23_RemainingWasteDeliveryPortLocation = fields.One2many(
        "ubl.23.remainingwastedeliveryportlocation",
        "ubl23_RemainingWasteDeliveryPortLocation_MaritimeWasteType_id",
        string="RemainingWasteDeliveryPortLocation",
        help=("The location of the port where the remaining waste is delivered."),
    )


class PersonType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Person. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a person.</ns1:Definition>
    <ns1:ObjectClass>Person</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.persontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PersonType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this person.", xsd_type="IDType")

    ubl23_FirstName = fields.Char(
        string="This person's given name.", xsd_type="FirstNameType"
    )

    ubl23_FamilyName = fields.Char(
        string="This person's family name.", xsd_type="FamilyNameType"
    )

    ubl23_Title = fields.Char(
        string="This person's title of address (e.g.",
        xsd_type="TitleType",
        help="This person's title of address (e.g., Mr, Ms, Dr, Sir).",
    )

    ubl23_MiddleName = fields.Char(
        string="This person's middle name(s) or initials",
        xsd_type="MiddleNameType",
        help="This person's middle name(s) or initials.",
    )

    ubl23_OtherName = fields.Char(
        string="This person's second family name.", xsd_type="OtherNameType"
    )

    ubl23_NameSuffix = fields.Char(
        string="A suffix to this person's name (e.g.",
        xsd_type="NameSuffixType",
        help="A suffix to this person's name (e.g., PhD, OBE, Jr).",
    )

    ubl23_JobTitle = fields.Char(
        string="This person's job title",
        xsd_type="JobTitleType",
        help=(
            "This person's job title (for a particular role) within an " "organization."
        ),
    )

    ubl23_NationalityID = fields.Char(
        string="An identifier for this person's nationality",
        xsd_type="NationalityIDType",
        help="An identifier for this person's nationality.",
    )

    ubl23_GenderCode = fields.Char(
        string="A code (e.g.",
        xsd_type="GenderCodeType",
        help=("A code (e.g., ISO 5218) signifying the gender of this person."),
    )

    ubl23_BirthDate = fields.Date(string="This person's date of birth.")

    ubl23_BirthplaceName = fields.Char(
        string="The name of the place where this person was born",
        xsd_type="BirthplaceNameType",
        help=(
            "The name of the place where this person was born, expressed as " "text."
        ),
    )

    ubl23_OrganizationDepartment = fields.Char(
        string="OrganizationDepartment",
        xsd_type="OrganizationDepartmentType",
        help=(
            "The department or subdivision of an organization that this person"
            " belongs to (in a particular role)."
        ),
    )

    ubl23_RoleCode = fields.Char(
        string="A code stating the person's role", xsd_type="RoleCodeType"
    )

    ubl23_BirthplaceLocation = fields.Many2one(
        comodel_name="ubl.23.birthplacelocation",
        string="The location where this person was born",
        help="The location where this person was born.",
    )

    ubl23_CitizenshipCountry = fields.Many2one(
        comodel_name="ubl.23.citizenshipcountry",
        string="The country of the person's citizenship",
        help="The country of the person's citizenship.",
    )

    ubl23_Contact = fields.Many2one(
        comodel_name="ubl.23.contact", string="Contact information for this person."
    )

    ubl23_FinancialAccount = fields.Many2one(
        comodel_name="ubl.23.financialaccount",
        string="The financial account associated with this person",
        help="The financial account associated with this person.",
    )

    ubl23_IdentityDocumentReference = fields.One2many(
        "ubl.23.identitydocumentreference",
        "ubl23_IdentityDocumentReference_PersonType_id",
        string="IdentityDocumentReference",
        help=(
            "A reference to a document that can precisely identify this person"
            " (e.g., a driver's license)."
        ),
    )

    ubl23_ResidenceAddress = fields.Many2one(
        comodel_name="ubl.23.residenceaddress",
        string="This person's address of residence.",
    )


class PortCallRecordType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Port Call Record. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A record for a ship call at a port facility.</ns1:Definition>
    <ns1:ObjectClass>Port Call Record</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Port facility call
    record</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.portcallrecordtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCallRecordType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this port call record",
        xsd_type="IDType",
        help="An identifier for this port call record.",
    )

    ubl23_SecurityLevelCode = fields.Char(
        string="SecurityLevelCode",
        xsd_type="SecurityLevelCodeType",
        help=(
            "A code describing the security level of the port facility call " "record."
        ),
    )

    ubl23_SecurityMeasure = fields.One2many(
        "ubl.23.securitymeasure",
        "ubl23_SecurityMeasure_PortCallRecordType_id",
        string="SecurityMeasure",
        help=("One or more security measures applied to this port call record."),
    )

    ubl23_PortFacilityLocation = fields.Many2one(
        comodel_name="ubl.23.portfacilitylocation",
        string="The location of the port facility.",
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period when this port call took place",
        help="The period when this port call took place.",
    )


class ShipToShipActivityRecordType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ship To Ship Activity Record.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a ship to ship activity
    record.</ns1:Definition>
    <ns1:ObjectClass>Ship To Ship Activity Record</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>STS transfer</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shiptoshipactivityrecordtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipToShipActivityRecordType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An indentifier for this ship to ship activity",
        xsd_type="IDType",
        help="An indentifier for this ship to ship activity.",
    )

    ubl23_Description = fields.Char(
        string="A text describing the ship to ship activity",
        xsd_type="DescriptionType",
        help="A text describing the ship to ship activity.",
    )

    ubl23_AppliedSecurityMeasure = fields.One2many(
        "ubl.23.appliedsecuritymeasure",
        "ubl23_AppliedSecurityMeasure_ShipToShipActivityRecordType_id",
        string="AppliedSecurityMeasure",
        help=(
            "Any security measures applied to this ship to ship activity in "
            "lieu of those specified in the approved Ship Security Plan (SSP)."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The duration of this ship to ship activity",
        help="The duration of this ship to ship activity.",
    )

    ubl23_Location = fields.Many2one(
        comodel_name="ubl.23.location",
        string="The location where this ship to ship activity took place",
        help="The location where this ship to ship activity took place.",
    )


class TransportEventType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Event. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a significant occurrence or happening
    related to the transportation of goods.</ns1:Definition>
    <ns1:ObjectClass>Transport Event</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transporteventtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEventType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_IdentificationID = fields.Char(
        string="IdentificationID",
        xsd_type="IdentificationIDType",
        help=(
            "An identifier for this transport event within an agreed event "
            "identification scheme."
        ),
    )

    ubl23_OccurrenceDate = fields.Date(string="The date of this transport event.")

    ubl23_TransportEventTypeCode = fields.Char(
        string="A code signifying the type of this transport event",
        xsd_type="TransportEventTypeCodeType",
        help="A code signifying the type of this transport event.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this transport event",
        xsd_type="DescriptionType",
        help="Text describing this transport event.",
    )

    ubl23_CompletionIndicator = fields.Boolean(
        string="An indicator that this transport event has been completed",
        help=(
            "An indicator that this transport event has been completed (true) "
            "or not (false)."
        ),
    )

    ubl23_ReportedShipment = fields.Many2one(
        comodel_name="ubl.23.reportedshipment",
        string="The shipment involved in this transport event",
        help="The shipment involved in this transport event.",
    )

    ubl23_CurrentStatus = fields.One2many(
        "ubl.23.currentstatus",
        "ubl23_CurrentStatus_TransportEventType_id",
        string="The current status of this transport event",
        help="The current status of this transport event.",
    )

    ubl23_Contact = fields.One2many(
        "ubl.23.contact",
        "ubl23_Contact_TransportEventType_id",
        string="A contact associated with this transport event",
        help="A contact associated with this transport event.",
    )

    ubl23_Location = fields.Many2one(
        comodel_name="ubl.23.location",
        string="The location associated with this transport event",
        help="The location associated with this transport event.",
    )

    ubl23_Period = fields.One2many(
        "ubl.23.period",
        "ubl23_Period_TransportEventType_id",
        string="A period of time associated with this transport event",
        help="A period of time associated with this transport event.",
    )


class WhoaffectedAreaVisitType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>WHO Affected Area Visit.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a visit to a port located in a geographical
    area considered an âaffected areaâ by the World Health Organization
    (WHO).</ns1:Definition>
    <ns1:ObjectClass>WHO Affected Area Visit</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.whoaffectedareavisittype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WhoaffectedAreaVisitType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_VisitDate = fields.Date(
        string="The date that the WHO Affected Area was visited",
        xsd_required=True,
        help="The date that the WHO Affected Area was visited.",
    )

    ubl23_WHOAffectedAreaPortLocation = fields.Many2one(
        comodel_name="ubl.23.whoaffectedareaportlocation",
        string="The location of the port of the visited WHO Affected Area",
        xsd_required=True,
        help="The location of the port of the visited WHO Affected Area.",
    )


class AcceptanceTransportEvent(models.AbstractModel):
    _description = "AcceptanceTransportEvent"
    _name = "ubl.23.acceptancetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AcceptanceTransportEvent"


class ActualArrivalTransportEvent(models.AbstractModel):
    _description = "ActualArrivalTransportEvent"
    _name = "ubl.23.actualarrivaltransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualArrivalTransportEvent"


class ActualDeliveryTransportEvent(models.AbstractModel):
    _description = "ActualDeliveryTransportEvent"
    _name = "ubl.23.actualdeliverytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualDeliveryTransportEvent"


class ActualDepartureTransportEvent(models.AbstractModel):
    _description = "ActualDepartureTransportEvent"
    _name = "ubl.23.actualdeparturetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualDepartureTransportEvent"


class ActualPickupTransportEvent(models.AbstractModel):
    _description = "ActualPickupTransportEvent"
    _name = "ubl.23.actualpickuptransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualPickupTransportEvent"


class ActualWaypointTransportEvent(models.AbstractModel):
    _description = "ActualWaypointTransportEvent"
    _name = "ubl.23.actualwaypointtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualWaypointTransportEvent"


class AvailabilityTransportEvent(models.AbstractModel):
    _description = "AvailabilityTransportEvent"
    _name = "ubl.23.availabilitytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AvailabilityTransportEvent"


class BallastWaterTransaction(models.AbstractModel):
    _description = "BallastWaterTransaction"
    _name = "ubl.23.ballastwatertransaction"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BallastWaterTransaction"


class CrewMemberPerson(models.AbstractModel):
    _description = "CrewMemberPerson"
    _name = "ubl.23.crewmemberperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CrewMemberPerson"

    ubl23_CrewMemberPerson_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class CrewPerson(models.AbstractModel):
    _description = "CrewPerson"
    _name = "ubl.23.crewperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CrewPerson"


class DeliveryTransportEvent(models.AbstractModel):
    _description = "DeliveryTransportEvent"
    _name = "ubl.23.deliverytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryTransportEvent"

    ubl23_DeliveryTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DetentionTransportEvent(models.AbstractModel):
    _description = "DetentionTransportEvent"
    _name = "ubl.23.detentiontransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DetentionTransportEvent"

    ubl23_DetentionTransportEvent_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class DigitalCollaboration(models.AbstractModel):
    _description = "DigitalCollaboration"
    _name = "ubl.23.digitalcollaboration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalCollaboration"

    ubl23_DigitalCollaboration_DigitalProcessType_id = fields.Many2one(
        comodel_name="ubl.23.digitalprocesstype", xsd_implicit=True, ondelete="cascade"
    )


class DischargeBallastWaterTransaction(models.AbstractModel):
    _description = "DischargeBallastWaterTransaction"
    _name = "ubl.23.dischargeballastwatertransaction"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DischargeBallastWaterTransaction"

    ubl23_DischargeBallastWaterTransaction_BallastWaterSummaryType_id = fields.Many2one(
        comodel_name="ubl.23.ballastwatersummarytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DischargeTransportEvent(models.AbstractModel):
    _description = "DischargeTransportEvent"
    _name = "ubl.23.dischargetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DischargeTransportEvent"


class DriverPerson(models.AbstractModel):
    _description = "DriverPerson"
    _name = "ubl.23.driverperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DriverPerson"

    ubl23_DriverPerson_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class DropoffTransportEvent(models.AbstractModel):
    _description = "DropoffTransportEvent"
    _name = "ubl.23.dropofftransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DropoffTransportEvent"


class EmissionCalculationMethod(models.AbstractModel):
    _description = "EmissionCalculationMethod"
    _name = "ubl.23.emissioncalculationmethod"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EmissionCalculationMethod"

    ubl23_EmissionCalculationMethod_EnvironmentalEmissionType_id = fields.Many2one(
        comodel_name="ubl.23.environmentalemissiontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EstimatedArrivalTransportEvent(models.AbstractModel):
    _description = "EstimatedArrivalTransportEvent"
    _name = "ubl.23.estimatedarrivaltransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedArrivalTransportEvent"


class EstimatedDepartureTransportEvent(models.AbstractModel):
    _description = "EstimatedDepartureTransportEvent"
    _name = "ubl.23.estimateddeparturetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EstimatedDepartureTransportEvent"


class Event(models.AbstractModel):
    _description = "Event"
    _name = "ubl.23.event"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Event"


class ExaminationTransportEvent(models.AbstractModel):
    _description = "ExaminationTransportEvent"
    _name = "ubl.23.examinationtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExaminationTransportEvent"


class ExchangeBallastWaterTransaction(models.AbstractModel):
    _description = "ExchangeBallastWaterTransaction"
    _name = "ubl.23.exchangeballastwatertransaction"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExchangeBallastWaterTransaction"

    ubl23_ExchangeBallastWaterTransaction_BallastWaterSummaryType_id = fields.Many2one(
        comodel_name="ubl.23.ballastwatersummarytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ExportationTransportEvent(models.AbstractModel):
    _description = "ExportationTransportEvent"
    _name = "ubl.23.exportationtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportationTransportEvent"


class HandlingTransportEvent(models.AbstractModel):
    _description = "HandlingTransportEvent"
    _name = "ubl.23.handlingtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HandlingTransportEvent"

    ubl23_HandlingTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class LoadingTransportEvent(models.AbstractModel):
    _description = "LoadingTransportEvent"
    _name = "ubl.23.loadingtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LoadingTransportEvent"

    ubl23_LoadingTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class MaritimeTransport(models.AbstractModel):
    _description = "MaritimeTransport"
    _name = "ubl.23.maritimetransport"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeTransport"


class MaritimeWaste(models.AbstractModel):
    _description = "MaritimeWaste"
    _name = "ubl.23.maritimewaste"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeWaste"

    ubl23_MaritimeWaste_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class MasterPerson(models.AbstractModel):
    _description = "MasterPerson"
    _name = "ubl.23.masterperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MasterPerson"


class OpenTenderEvent(models.AbstractModel):
    _description = "OpenTenderEvent"
    _name = "ubl.23.opentenderevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OpenTenderEvent"

    ubl23_OpenTenderEvent_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OptionalTakeoverTransportEvent(models.AbstractModel):
    _description = "OptionalTakeoverTransportEvent"
    _name = "ubl.23.optionaltakeovertransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OptionalTakeoverTransportEvent"


class PassengerPerson(models.AbstractModel):
    _description = "PassengerPerson"
    _name = "ubl.23.passengerperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PassengerPerson"

    ubl23_PassengerPerson_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class Person(models.AbstractModel):
    _description = "Person"
    _name = "ubl.23.person"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Person"

    ubl23_Person_PartyType_id = fields.Many2one(
        comodel_name="ubl.23.partytype", xsd_implicit=True, ondelete="cascade"
    )


class PickupTransportEvent(models.AbstractModel):
    _description = "PickupTransportEvent"
    _name = "ubl.23.pickuptransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PickupTransportEvent"

    ubl23_PickupTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PlannedArrivalTransportEvent(models.AbstractModel):
    _description = "PlannedArrivalTransportEvent"
    _name = "ubl.23.plannedarrivaltransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedArrivalTransportEvent"


class PlannedDeliveryTransportEvent(models.AbstractModel):
    _description = "PlannedDeliveryTransportEvent"
    _name = "ubl.23.planneddeliverytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedDeliveryTransportEvent"


class PlannedDepartureTransportEvent(models.AbstractModel):
    _description = "PlannedDepartureTransportEvent"
    _name = "ubl.23.planneddeparturetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedDepartureTransportEvent"


class PlannedPickupTransportEvent(models.AbstractModel):
    _description = "PlannedPickupTransportEvent"
    _name = "ubl.23.plannedpickuptransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedPickupTransportEvent"


class PlannedWaypointTransportEvent(models.AbstractModel):
    _description = "PlannedWaypointTransportEvent"
    _name = "ubl.23.plannedwaypointtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PlannedWaypointTransportEvent"

    ubl23_PlannedWaypointTransportEvent_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class PortCallRecord(models.AbstractModel):
    _description = "PortCallRecord"
    _name = "ubl.23.portcallrecord"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCallRecord"

    ubl23_PortCallRecord_ISPSRequirementsType_id = fields.Many2one(
        comodel_name="ubl.23.ispsrequirementstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PositioningTransportEvent(models.AbstractModel):
    _description = "PositioningTransportEvent"
    _name = "ubl.23.positioningtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PositioningTransportEvent"

    ubl23_PositioningTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class QuarantineTransportEvent(models.AbstractModel):
    _description = "QuarantineTransportEvent"
    _name = "ubl.23.quarantinetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuarantineTransportEvent"

    ubl23_QuarantineTransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ReceiptTransportEvent(models.AbstractModel):
    _description = "ReceiptTransportEvent"
    _name = "ubl.23.receipttransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiptTransportEvent"


class ReportingPerson(models.AbstractModel):
    _description = "ReportingPerson"
    _name = "ubl.23.reportingperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReportingPerson"


class RequestedArrivalEvent(models.AbstractModel):
    _description = "RequestedArrivalEvent"
    _name = "ubl.23.requestedarrivalevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedArrivalEvent"


class RequestedArrivalTransportEvent(models.AbstractModel):
    _description = "RequestedArrivalTransportEvent"
    _name = "ubl.23.requestedarrivaltransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedArrivalTransportEvent"


class RequestedDeliveryTransportEvent(models.AbstractModel):
    _description = "RequestedDeliveryTransportEvent"
    _name = "ubl.23.requesteddeliverytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedDeliveryTransportEvent"


class RequestedDepartureTransportEvent(models.AbstractModel):
    _description = "RequestedDepartureTransportEvent"
    _name = "ubl.23.requesteddeparturetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedDepartureTransportEvent"


class RequestedPickupTransportEvent(models.AbstractModel):
    _description = "RequestedPickupTransportEvent"
    _name = "ubl.23.requestedpickuptransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedPickupTransportEvent"


class RequestedWaypointTransportEvent(models.AbstractModel):
    _description = "RequestedWaypointTransportEvent"
    _name = "ubl.23.requestedwaypointtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestedWaypointTransportEvent"

    ubl23_RequestedWaypointTransportEvent_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class ResponsibleOfficerPerson(models.AbstractModel):
    _description = "ResponsibleOfficerPerson"
    _name = "ubl.23.responsibleofficerperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponsibleOfficerPerson"


class SecurityOfficerPerson(models.AbstractModel):
    _description = "SecurityOfficerPerson"
    _name = "ubl.23.securityofficerperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SecurityOfficerPerson"


class ShipToShipActivityRecord(models.AbstractModel):
    _description = "ShipToShipActivityRecord"
    _name = "ubl.23.shiptoshipactivityrecord"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipToShipActivityRecord"

    ubl23_ShipToShipActivityRecord_ISPSRequirementsType_id = fields.Many2one(
        comodel_name="ubl.23.ispsrequirementstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ShipsSurgeonPerson(models.AbstractModel):
    _description = "ShipsSurgeonPerson"
    _name = "ubl.23.shipssurgeonperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipsSurgeonPerson"


class StorageTransportEvent(models.AbstractModel):
    _description = "StorageTransportEvent"
    _name = "ubl.23.storagetransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StorageTransportEvent"


class TakeoverTransportEvent(models.AbstractModel):
    _description = "TakeoverTransportEvent"
    _name = "ubl.23.takeovertransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TakeoverTransportEvent"


class TechnicalCommitteePerson(models.AbstractModel):
    _description = "TechnicalCommitteePerson"
    _name = "ubl.23.technicalcommitteeperson"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TechnicalCommitteePerson"

    ubl23_TechnicalCommitteePerson_AwardingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.awardingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class TransportEvent(models.AbstractModel):
    _description = "TransportEvent"
    _name = "ubl.23.transportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEvent"

    ubl23_TransportEvent_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TransportEvent_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TransportEvent_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_TransportEvent_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class UpdatedDeliveryTransportEvent(models.AbstractModel):
    _description = "UpdatedDeliveryTransportEvent"
    _name = "ubl.23.updateddeliverytransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UpdatedDeliveryTransportEvent"


class UpdatedPickupTransportEvent(models.AbstractModel):
    _description = "UpdatedPickupTransportEvent"
    _name = "ubl.23.updatedpickuptransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UpdatedPickupTransportEvent"


class UptakeBallastWaterTransaction(models.AbstractModel):
    _description = "UptakeBallastWaterTransaction"
    _name = "ubl.23.uptakeballastwatertransaction"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UptakeBallastWaterTransaction"

    ubl23_UptakeBallastWaterTransaction_BallastWaterSummaryType_id = fields.Many2one(
        comodel_name="ubl.23.ballastwatersummarytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class WhoaffectedAreaVisit(models.AbstractModel):
    _description = "WHOAffectedAreaVisit"
    _name = "ubl.23.whoaffectedareavisit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WhoaffectedAreaVisit"

    ubl23_WHOAffectedAreaVisit_MaritimeHealthDeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.maritimehealthdeclarationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class WarehousingTransportEvent(models.AbstractModel):
    _description = "WarehousingTransportEvent"
    _name = "ubl.23.warehousingtransportevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WarehousingTransportEvent"


class AwardingTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Awarding Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define the terms for awarding a
    contract.</ns1:Definition>
    <ns1:ObjectClass>Awarding Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.awardingtermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_WeightingAlgorithmCode = fields.Char(
        string="WeightingAlgorithmCode",
        xsd_type="WeightingAlgorithmCodeType",
        help=(
            "A code signifying the weighting algorithm for awarding criteria. "
            "When multiple awarding criteria is used, different weighting and "
            "choices management algorithms based upon scores and weights of "
            "all award criteria can be used. An algorithm for weighting "
            "criteria shall be reported in the call for tenders document. It "
            "is used to determine how to perform the final management of "
            "tenders based on the results in each of the established award "
            "criteria"
        ),
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("Text describing terms under which the contract is to be awarded."),
    )

    ubl23_TechnicalCommitteeDescription = fields.Char(
        string="TechnicalCommitteeDescription",
        xsd_type="TechnicalCommitteeDescriptionType",
        help=(
            "Text describing the committee of experts evaluating the "
            "subjective criteria for awarding the contract."
        ),
    )

    ubl23_LowTendersDescription = fields.Char(
        string="LowTendersDescription",
        xsd_type="LowTendersDescriptionType",
        help=("Text describing the exclusion criterion for abnormally low " "tenders."),
    )

    ubl23_PrizeIndicator = fields.Boolean(
        string="Indicates whether a prize will be awarded",
        help=("Indicates whether a prize will be awarded (true) or not (false)."),
    )

    ubl23_PrizeDescription = fields.Char(
        string="Number and value of the prizes to be awarded",
        xsd_type="PrizeDescriptionType",
        help="Number and value of the prizes to be awarded.",
    )

    ubl23_PaymentDescription = fields.Char(
        string="Details of payments to all participants",
        xsd_type="PaymentDescriptionType",
        help="Details of payments to all participants.",
    )

    ubl23_FollowupContractIndicator = fields.Boolean(
        string="FollowupContractIndicator",
        help=(
            "Indicates if any service contract following the contest will be "
            "awarded to the winner or one of the winners of the contest (true)"
            " or not (false)."
        ),
    )

    ubl23_BindingOnBuyerIndicator = fields.Boolean(
        string="Indicates if the decision is binding on the buyer",
        help=(
            "Indicates if the decision is binding on the buyer (true) or not "
            "(false). "
        ),
    )

    ubl23_NoFurtherNegotiationIndicator = fields.Boolean(
        string="Indicates if no further negotiation is allowed",
        help=(
            "Indicates if no further negotiation is allowed (true) or not " "(false). "
        ),
    )

    ubl23_AwardingCriterion = fields.One2many(
        "ubl.23.awardingcriterion",
        "ubl23_AwardingCriterion_AwardingTermsType_id",
        string="Defines a criterion for awarding this tender",
        help="Defines a criterion for awarding this tender.",
    )

    ubl23_TechnicalCommitteePerson = fields.One2many(
        "ubl.23.technicalcommitteeperson",
        "ubl23_TechnicalCommitteePerson_AwardingTermsType_id",
        string="TechnicalCommitteePerson",
        help=(
            "A member of a committee of experts evaluating the subjective "
            "criteria for awarding the contract."
        ),
    )

    ubl23_Prize = fields.One2many(
        "ubl.23.prize",
        "ubl23_Prize_AwardingTermsType_id",
        string="Prize",
        help=(
            "Information about the value amount that will be offered to the "
            "winner depending on his rank."
        ),
    )


class BallastWaterSummaryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ballast Water Summary.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to summarize the ballast water management of a
    vessel.</ns1:Definition>
    <ns1:ObjectClass>Ballast Water Summary</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.ballastwatersummarytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BallastWaterSummaryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identification of this ballast water summary",
        xsd_type="IDType",
        help="An identification of this ballast water summary.",
    )

    ubl23_ManagementPlanOnBoardIndicator = fields.Boolean(
        string="ManagementPlanOnBoardIndicator",
        help=(
            "An indication of whether a waste water management plan is on "
            "board (true) or not (false)."
        ),
    )

    ubl23_ManagementPlanImplementedIndicator = fields.Boolean(
        string="ManagementPlanImplementedIndicator",
        help=(
            "An indication of whether a waste water management plan has been "
            "implemented (true) or not (false)."
        ),
    )

    ubl23_IMOGuidelinesOnBoardIndicator = fields.Boolean(
        string="IMOGuidelinesOnBoardIndicator",
        help=(
            "An indication of whether International Maritime Organization "
            "(IMO) ballast water guidelines are on board (true) or not "
            "(false)."
        ),
    )

    ubl23_TotalBallastTanksOnBoardQuantity = fields.Float(
        string="The total number of ballast tanks on board the vessel",
        xsd_type="TotalBallastTanksOnBoardQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of ballast tanks on board the vessel.",
    )

    ubl23_TanksInBallastQuantity = fields.Float(
        string="The number of tanks in the ballast of the vessel",
        xsd_type="TanksInBallastQuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of tanks in the ballast of the vessel.",
    )

    ubl23_TanksExchangedQuantity = fields.Float(
        string="TanksExchangedQuantity",
        xsd_type="TanksExchangedQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of tanks being exchanged as part of this ballast water"
            " summary."
        ),
    )

    ubl23_TanksNotExchangedQuantity = fields.Float(
        string="The quantity of tanks not being exchanged",
        xsd_type="TanksNotExchangedQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of tanks not being exchanged.",
    )

    ubl23_TotalBallastWaterOnBoardMeasure = fields.Char(
        string="The messure of the total ballast water on board the vessel",
        xsd_type="TotalBallastWaterOnBoardMeasureType",
        help="The messure of the total ballast water on board the vessel.",
    )

    ubl23_TotalBallastWaterCapacityMeasure = fields.Char(
        string="The total ballast water capacity of the vessel",
        xsd_type="TotalBallastWaterCapacityMeasureType",
        help="The total ballast water capacity of the vessel.",
    )

    ubl23_OtherControlActions = fields.Char(
        string="OtherControlActions",
        xsd_type="OtherControlActionsType",
        help=(
            "A text describing any other control actions that are part of this"
            " ballast water summary."
        ),
    )

    ubl23_NoControlActionsReason = fields.Char(
        string="NoControlActionsReason",
        xsd_type="NoControlActionsReasonType",
        help=(
            "A textual description of the reason if no control actions are "
            "being taken."
        ),
    )

    ubl23_UptakeBallastWaterTransaction = fields.One2many(
        "ubl.23.uptakeballastwatertransaction",
        "ubl23_UptakeBallastWaterTransaction_BallastWaterSummaryType_id",
        string="The uptake ballast water transaction",
        help="The uptake ballast water transaction.",
    )

    ubl23_ExchangeBallastWaterTransaction = fields.One2many(
        "ubl.23.exchangeballastwatertransaction",
        "ubl23_ExchangeBallastWaterTransaction_BallastWaterSummaryType_id",
        string="The exchange ballast water transaction",
        help="The exchange ballast water transaction.",
    )

    ubl23_DischargeBallastWaterTransaction = fields.One2many(
        "ubl.23.dischargeballastwatertransaction",
        "ubl23_DischargeBallastWaterTransaction_BallastWaterSummaryType_id",
        string="The discharge ballast water transaction",
        help="The discharge ballast water transaction.",
    )

    ubl23_ResponsibleOfficerPerson = fields.Many2one(
        comodel_name="ubl.23.responsibleofficerperson",
        string="The officer responsible for this ballast water summery",
        help="The officer responsible for this ballast water summery.",
    )


class CrewPersonEffectType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Crew Person Effect. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing the effect or belonging of a Crew
    Person</ns1:Definition>
    <ns1:ObjectClass>Crew Person Effect</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.crewpersoneffecttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CrewPersonEffectType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EffectDescription = fields.Char(
        string="The description of the crew effect.", xsd_type="EffectDescriptionType"
    )

    ubl23_CrewPerson = fields.Many2one(
        comodel_name="ubl.23.crewperson",
        string="The crew person to whom the effect belongs",
        help="The crew person to whom the effect belongs.",
    )


class DigitalProcessType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Digital Process. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a digital trade process.</ns1:Definition>
    <ns1:ObjectClass>Digital Process</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Business Process</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.digitalprocesstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalProcessType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the digital collaboration",
        xsd_type="IDType",
        help="An identifier for the digital collaboration.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the digital process.", xsd_type="DescriptionType"
    )

    ubl23_ProfileID = fields.Char(
        string="Identifies a user",
        xsd_type="ProfileIDType",
        help=(
            "Identifies a user-defined profile of this digital process (e.g. "
            "an UBL profile)."
        ),
    )

    ubl23_DigitalCollaboration = fields.One2many(
        "ubl.23.digitalcollaboration",
        "ubl23_DigitalCollaboration_DigitalProcessType_id",
        string="DigitalCollaboration",
        help=("The digital collaboration associated with this digital process."),
    )

    ubl23_CertificationDocumentReference = fields.One2many(
        "ubl.23.certificationdocumentreference",
        "ubl23_CertificationDocumentReference_DigitalProcessType_id",
        string="CertificationDocumentReference",
        help=(
            "A reference to a certification document associated with this "
            "digital process."
        ),
    )


class EnvironmentalEmissionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Environmental Emission.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an environmental emission.</ns1:Definition>
    <ns1:ObjectClass>Environmental Emission</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.environmentalemissiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnvironmentalEmissionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EnvironmentalEmissionTypeCode = fields.Char(
        string="A code specifying the type of environmental emission",
        xsd_required=True,
        xsd_type="EnvironmentalEmissionTypeCodeType",
        help="A code specifying the type of environmental emission.",
    )

    ubl23_ValueMeasure = fields.Char(
        string="A value measurement for the environmental emission",
        xsd_required=True,
        xsd_type="ValueMeasureType",
        help="A value measurement for the environmental emission.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this environmental emission",
        xsd_type="DescriptionType",
        help="Text describing this environmental emission.",
    )

    ubl23_EmissionCalculationMethod = fields.One2many(
        "ubl.23.emissioncalculationmethod",
        "ubl23_EmissionCalculationMethod_EnvironmentalEmissionType_id",
        string="A method used to calculate the amount of this emission",
        help="A method used to calculate the amount of this emission.",
    )


class PartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an organization, sub-organization, or
    individual fulfilling a role in a business process.</ns1:Definition>
    <ns1:ObjectClass>Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.partytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PartyType"

    ubl23_PartyType_ContractingPartyTypeType_id = fields.Many2one(
        comodel_name="ubl.23.contractingpartytypetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MarkCareIndicator = fields.Boolean(
        string="An indicator that this party is care of",
        help=(
            "An indicator that this party is care of (c/o) (true) or not " "(false)."
        ),
    )

    ubl23_MarkAttentionIndicator = fields.Boolean(
        string="An indicator that this party is for the attention of",
        help=(
            "An indicator that this party is for the attention of (FAO) (true)"
            " or not (false)."
        ),
    )

    ubl23_WebsiteURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="WebsiteURIType",
        help=(
            "The Uniform Resource Identifier (URI) that identifies this "
            "party's web site; i.e., the web site's Uniform Resource Locator "
            "(URL)."
        ),
    )

    ubl23_LogoReferenceID = fields.Char(
        string="An identifier for this party's logo.", xsd_type="LogoReferenceIDType"
    )

    ubl23_EndpointID = fields.Char(
        string="An identifier for the end point of the routing service",
        xsd_type="EndpointIDType",
        help=(
            "An identifier for the end point of the routing service (e.g., EAN"
            " Location Number, GLN)."
        ),
    )

    ubl23_IndustryClassificationCode = fields.Char(
        string="This party's Industry Classification Code",
        xsd_type="IndustryClassificationCodeType",
        help="This party's Industry Classification Code.",
    )

    ubl23_PartyIdentification = fields.One2many(
        "ubl.23.partyidentification",
        "ubl23_PartyIdentification_PartyType_id",
        string="An identifier for this party.",
    )

    ubl23_PartyName = fields.One2many(
        "ubl.23.partyname",
        "ubl23_PartyName_PartyType_id",
        string="A name for this party.",
    )

    ubl23_Language = fields.Many2one(
        comodel_name="ubl.23.language",
        string="The language associated with this party",
        help="The language associated with this party.",
    )

    ubl23_PostalAddress = fields.Many2one(
        comodel_name="ubl.23.postaladdress", string="The party's postal address."
    )

    ubl23_PhysicalLocation = fields.Many2one(
        comodel_name="ubl.23.physicallocation",
        string="The physical location of this party.",
    )

    ubl23_PartyTaxScheme = fields.One2many(
        "ubl.23.partytaxscheme",
        "ubl23_PartyTaxScheme_PartyType_id",
        string="A tax scheme applying to this party.",
    )

    ubl23_PartyLegalEntity = fields.One2many(
        "ubl.23.partylegalentity",
        "ubl23_PartyLegalEntity_PartyType_id",
        string="A description of this party as a legal entity",
        help="A description of this party as a legal entity.",
    )

    ubl23_Contact = fields.Many2one(
        comodel_name="ubl.23.contact", string="The primary contact for this party."
    )

    ubl23_Person = fields.One2many(
        "ubl.23.person",
        "ubl23_Person_PartyType_id",
        string="A person associated with this party.",
    )

    ubl23_AgentParty = fields.Many2one(
        comodel_name="ubl.23.agentparty",
        string="A party who acts as an agent for this party",
        help="A party who acts as an agent for this party.",
    )

    ubl23_ServiceProviderParty = fields.One2many(
        "ubl.23.serviceproviderparty",
        "ubl23_ServiceProviderParty_PartyType_id",
        string="A party providing a service to this party",
        help="A party providing a service to this party.",
    )

    ubl23_PowerOfAttorney = fields.One2many(
        "ubl.23.powerofattorney",
        "ubl23_PowerOfAttorney_PartyType_id",
        string="A power of attorney associated with this party",
        help="A power of attorney associated with this party.",
    )

    ubl23_PartyAuthorization = fields.One2many(
        "ubl.23.partyauthorization",
        "ubl23_PartyAuthorization_PartyType_id",
        string="An authorization issued to this party",
    )

    ubl23_FinancialAccount = fields.Many2one(
        comodel_name="ubl.23.financialaccount",
        string="The financial account associated with this party",
        help="The financial account associated with this party.",
    )

    ubl23_AdditionalWebSite = fields.One2many(
        "ubl.23.additionalwebsite",
        "ubl23_AdditionalWebSite_PartyType_id",
        string="An additional web site associated with this party",
        help=(
            "An additional web site associated with this party (e.g. a "
            "satellite web site)."
        ),
    )

    ubl23_SocialMediaProfile = fields.One2many(
        "ubl.23.socialmediaprofile",
        "ubl23_SocialMediaProfile_PartyType_id",
        string="A social media profile associated with this party",
        help="A social media profile associated with this party.",
    )


class PersonnelHealthIncidentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Personnel Health Incident.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a health incident involving crew or other
    personnel.</ns1:Definition>
    <ns1:ObjectClass>Personnel Health Incident</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.personnelhealthincidenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PersonnelHealthIncidentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this personal health incident",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this personal health incident.",
    )

    ubl23_JoinedShipDate = fields.Date(
        string="The date when the person joined the ship",
        help="The date when the person joined the ship.",
    )

    ubl23_NatureOfIllnessDescription = fields.Char(
        string="A text decribing the nature of the illness",
        xsd_type="NatureOfIllnessDescriptionType",
        help="A text decribing the nature of the illness.",
    )

    ubl23_OnsetDate = fields.Date(
        string="The first date of the health incident",
        help="The first date of the health incident.",
    )

    ubl23_ReportedToMedicalOfficerIndicator = fields.Boolean(
        string="ReportedToMedicalOfficerIndicator",
        help=(
            "An indicator of whether this personal health incident has been "
            "reported to a medical officer (true) or not (false)."
        ),
    )

    ubl23_GivenTreatmentDescription = fields.Char(
        string="A text describing the given treatment",
        xsd_type="GivenTreatmentDescriptionType",
        help="A text describing the given treatment.",
    )

    ubl23_StillIllIndicator = fields.Boolean(
        string="Indicates whether the person is still ill",
        help=("Indicates whether the person is still ill (true) or not (false)."),
    )

    ubl23_DiedIndicator = fields.Boolean(
        string="DiedIndicator",
        help=(
            "Indicates whether the person died from this health incident "
            "(true) or not (false)."
        ),
    )

    ubl23_StillOnBoardIndicator = fields.Boolean(
        string="Indicates whether the person is still on board",
        help=(
            "Indicates whether the person is still on board (true) or not " "(false)."
        ),
    )

    ubl23_EvacuatedIndicator = fields.Boolean(
        string="Indicates whether the person has been evacuated",
        help=(
            "Indicates whether the person has been evacuated (true) or not " "(false)."
        ),
    )

    ubl23_BuriedAtSeaIndicator = fields.Boolean(
        string="Indicates whether the person has been buired at sea",
        help=(
            "Indicates whether the person has been buired at sea (true) or not"
            " (false)."
        ),
    )

    ubl23_Note = fields.Char(
        string="Any additional information that is not included elsewhere",
        xsd_type="NoteType",
        help=(
            "Any additional information that is not included elsewhere, "
            "expressed as text."
        ),
    )

    ubl23_Person = fields.Many2one(
        comodel_name="ubl.23.person",
        string="The person associated to this health incident",
        help="The person associated to this health incident.",
    )


class PortCallType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Port Call. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a call to a port.</ns1:Definition>
    <ns1:ObjectClass>Port Call</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.portcalltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCallType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this Port Call.", xsd_type="IDType"
    )

    ubl23_PlannedOperationsDescription = fields.Char(
        string="Description of the planned operations in this Port Call",
        xsd_type="PlannedOperationsDescriptionType",
        help="Description of the planned operations in this Port Call.",
    )

    ubl23_PlannedWorksDescription = fields.Char(
        string="Description of the planned works in this Port Call",
        xsd_type="PlannedWorksDescriptionType",
        help="Description of the planned works in this Port Call.",
    )

    ubl23_PlannedInspectionsDescription = fields.Char(
        string="Description of the planned inspections in this Port Call",
        xsd_type="PlannedInspectionsDescriptionType",
        help="Description of the planned inspections in this Port Call.",
    )

    ubl23_ExpectedAnchorageIndicator = fields.Boolean(
        string="ExpectedAnchorageIndicator",
        help=(
            "An indicator of whether the ship is expected to stay at an "
            "anchorage upon arrival at the port of call (true) or not (false)."
        ),
    )

    ubl23_PositionInPortID = fields.Char(
        string="PositionInPortID",
        xsd_type="PositionInPortIDType",
        help=("An identifier for the position in the port for this Port Call"),
    )

    ubl23_CargoAndBallastTankConditionDescription = fields.Char(
        string="CargoAndBallastTankConditionDescription",
        xsd_type="CargoAndBallastTankConditionDescriptionType",
        help=("Description about the condition of the cargo and ballast tank."),
    )

    ubl23_ShipRequirement = fields.One2many(
        "ubl.23.shiprequirement",
        "ubl23_ShipRequirement_PortCallType_id",
        string="Ship requirements for this port call",
        help="Ship requirements for this port call.",
    )

    ubl23_PrimaryPortCallPurpose = fields.Many2one(
        comodel_name="ubl.23.primaryportcallpurpose",
        string="The primary purpose of this port call",
        help="The primary purpose of this port call.",
    )

    ubl23_AdditionalPortCallPurpose = fields.One2many(
        "ubl.23.additionalportcallpurpose",
        "ubl23_AdditionalPortCallPurpose_PortCallType_id",
        string="Any additional or secondary purposes of this port call",
        help="Any additional or secondary purposes of this port call.",
    )

    ubl23_RequestedArrivalEvent = fields.Many2one(
        comodel_name="ubl.23.requestedarrivalevent",
        string="The requested arrival event.",
    )


class TransportScheduleType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Schedule. Details</ns1:DictionaryEntryName>
    <ns1:Definition>Describes the location and schedule relating to a transport
    means.</ns1:Definition>
    <ns1:ObjectClass>Transport Schedule</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportscheduletype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportScheduleType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SequenceNumeric = fields.Float(
        string="SequenceNumeric",
        xsd_required=True,
        xsd_type="SequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number indicating the order of this status in the sequence in "
            "which statuses are to be presented."
        ),
    )

    ubl23_ReferenceDate = fields.Date(
        string="The reference date for the transport schedule status",
        help="The reference date for the transport schedule status.",
    )

    ubl23_ReliabilityPercent = fields.Char(
        string="The reliability of the transport schedule status",
        xsd_type="ReliabilityPercentType",
        help=(
            "The reliability of the transport schedule status, expressed as a "
            "percentage."
        ),
    )

    ubl23_Remarks = fields.Char(
        string="Remarks related to the transport schedule status",
        xsd_type="RemarksType",
        help="Remarks related to the transport schedule status.",
    )

    ubl23_StatusLocation = fields.Many2one(
        comodel_name="ubl.23.statuslocation",
        string="The location for which status is reported",
        xsd_required=True,
        help="The location for which status is reported.",
    )

    ubl23_ActualArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualarrivaltransportevent",
        string="The actual arrival at a location.",
    )

    ubl23_ActualDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualdeparturetransportevent",
        string="The actual departure from a location",
        help="The actual departure from a location.",
    )

    ubl23_EstimatedDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.estimateddeparturetransportevent",
        string="An estimated departure from a specified location",
        help="An estimated departure from a specified location.",
    )

    ubl23_EstimatedArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.estimatedarrivaltransportevent",
        string="An estimated arrival at a specified location",
        help="An estimated arrival at a specified location.",
    )

    ubl23_PlannedDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.planneddeparturetransportevent",
        string="The planned departure from a specified location",
        help="The planned departure from a specified location.",
    )

    ubl23_PlannedArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.plannedarrivaltransportevent",
        string="The planned arrival at a specified location",
        help="The planned arrival at a specified location.",
    )


class AdditionalInformationParty(models.AbstractModel):
    _description = "AdditionalInformationParty"
    _name = "ubl.23.additionalinformationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalInformationParty"


class AgentParty(models.AbstractModel):
    _description = "AgentParty"
    _name = "ubl.23.agentparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AgentParty"


class AppealInformationParty(models.AbstractModel):
    _description = "AppealInformationParty"
    _name = "ubl.23.appealinformationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AppealInformationParty"


class AppealReceiverParty(models.AbstractModel):
    _description = "AppealReceiverParty"
    _name = "ubl.23.appealreceiverparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AppealReceiverParty"


class ApplicantParty(models.AbstractModel):
    _description = "ApplicantParty"
    _name = "ubl.23.applicantparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicantParty"


class AuthorityParty(models.AbstractModel):
    _description = "AuthorityParty"
    _name = "ubl.23.authorityparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AuthorityParty"


class AwardingTerms(models.AbstractModel):
    _description = "AwardingTerms"
    _name = "ubl.23.awardingterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardingTerms"


class BallastWaterSummary(models.AbstractModel):
    _description = "BallastWaterSummary"
    _name = "ubl.23.ballastwatersummary"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BallastWaterSummary"


class BeneficiaryParty(models.AbstractModel):
    _description = "BeneficiaryParty"
    _name = "ubl.23.beneficiaryparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BeneficiaryParty"


class BillOfLadingHolderParty(models.AbstractModel):
    _description = "BillOfLadingHolderParty"
    _name = "ubl.23.billofladingholderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillOfLadingHolderParty"


class BillToParty(models.AbstractModel):
    _description = "BillToParty"
    _name = "ubl.23.billtoparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillToParty"


class BusinessParty(models.AbstractModel):
    _description = "BusinessParty"
    _name = "ubl.23.businessparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BusinessParty"


class CarrierParty(models.AbstractModel):
    _description = "CarrierParty"
    _name = "ubl.23.carrierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CarrierParty"

    ubl23_CarrierParty_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class ConsigneeParty(models.AbstractModel):
    _description = "ConsigneeParty"
    _name = "ubl.23.consigneeparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsigneeParty"


class ConsignorParty(models.AbstractModel):
    _description = "ConsignorParty"
    _name = "ubl.23.consignorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsignorParty"


class ContactParty(models.AbstractModel):
    _description = "ContactParty"
    _name = "ubl.23.contactparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContactParty"


class ContractResponsibleParty(models.AbstractModel):
    _description = "ContractResponsibleParty"
    _name = "ubl.23.contractresponsibleparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractResponsibleParty"


class CrewPersonEffect(models.AbstractModel):
    _description = "CrewPersonEffect"
    _name = "ubl.23.crewpersoneffect"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CrewPersonEffect"

    ubl23_CrewPersonEffect_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )


class CustomsAgentParty(models.AbstractModel):
    _description = "CustomsAgentParty"
    _name = "ubl.23.customsagentparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsAgentParty"


class CustomsParty(models.AbstractModel):
    _description = "CustomsParty"
    _name = "ubl.23.customsparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsParty"


class DeliveryParty(models.AbstractModel):
    _description = "DeliveryParty"
    _name = "ubl.23.deliveryparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryParty"


class DespatchParty(models.AbstractModel):
    _description = "DespatchParty"
    _name = "ubl.23.despatchparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchParty"


class DestinationPortCall(models.AbstractModel):
    _description = "DestinationPortCall"
    _name = "ubl.23.destinationportcall"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DestinationPortCall"


class DigitalProcess(models.AbstractModel):
    _description = "DigitalProcess"
    _name = "ubl.23.digitalprocess"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DigitalProcess"


class DocumentProviderParty(models.AbstractModel):
    _description = "DocumentProviderParty"
    _name = "ubl.23.documentproviderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentProviderParty"


class EnvironmentalEmission(models.AbstractModel):
    _description = "EnvironmentalEmission"
    _name = "ubl.23.environmentalemission"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EnvironmentalEmission"

    ubl23_EnvironmentalEmission_TransportExecutionTermsType_id = fields.Many2one(
        comodel_name="ubl.23.transportexecutiontermstype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_EnvironmentalEmission_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EvidenceIssuingParty(models.AbstractModel):
    _description = "EvidenceIssuingParty"
    _name = "ubl.23.evidenceissuingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvidenceIssuingParty"


class ExporterParty(models.AbstractModel):
    _description = "ExporterParty"
    _name = "ubl.23.exporterparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExporterParty"


class ExportingCustomsParty(models.AbstractModel):
    _description = "ExportingCustomsParty"
    _name = "ubl.23.exportingcustomsparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportingCustomsParty"


class ExportingGuarantorParty(models.AbstractModel):
    _description = "ExportingGuarantorParty"
    _name = "ubl.23.exportingguarantorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExportingGuarantorParty"


class FinalDeliveryParty(models.AbstractModel):
    _description = "FinalDeliveryParty"
    _name = "ubl.23.finaldeliveryparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinalDeliveryParty"


class FinancingParty(models.AbstractModel):
    _description = "FinancingParty"
    _name = "ubl.23.financingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancingParty"


class FreightForwarderParty(models.AbstractModel):
    _description = "FreightForwarderParty"
    _name = "ubl.23.freightforwarderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FreightForwarderParty"


class GovernorParty(models.AbstractModel):
    _description = "GovernorParty"
    _name = "ubl.23.governorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GovernorParty"


class GuarantorParty(models.AbstractModel):
    _description = "GuarantorParty"
    _name = "ubl.23.guarantorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GuarantorParty"


class HazardousItemNotificationParty(models.AbstractModel):
    _description = "HazardousItemNotificationParty"
    _name = "ubl.23.hazardousitemnotificationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HazardousItemNotificationParty"


class HeadOfficeParty(models.AbstractModel):
    _description = "HeadOfficeParty"
    _name = "ubl.23.headofficeparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HeadOfficeParty"


class HolderParty(models.AbstractModel):
    _description = "HolderParty"
    _name = "ubl.23.holderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HolderParty"


class IsscissuerParty(models.AbstractModel):
    _description = "ISSCIssuerParty"
    _name = "ubl.23.isscissuerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IsscissuerParty"


class ImporterParty(models.AbstractModel):
    _description = "ImporterParty"
    _name = "ubl.23.importerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImporterParty"


class ImportingCustomsParty(models.AbstractModel):
    _description = "ImportingCustomsParty"
    _name = "ubl.23.importingcustomsparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImportingCustomsParty"


class ImportingGuarantorParty(models.AbstractModel):
    _description = "ImportingGuarantorParty"
    _name = "ubl.23.importingguarantorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImportingGuarantorParty"


class InformationContentProviderParty(models.AbstractModel):
    _description = "InformationContentProviderParty"
    _name = "ubl.23.informationcontentproviderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InformationContentProviderParty"


class InsuranceParty(models.AbstractModel):
    _description = "InsuranceParty"
    _name = "ubl.23.insuranceparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InsuranceParty"


class InterestedParty(models.AbstractModel):
    _description = "InterestedParty"
    _name = "ubl.23.interestedparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InterestedParty"


class InventoryReportingParty(models.AbstractModel):
    _description = "InventoryReportingParty"
    _name = "ubl.23.inventoryreportingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InventoryReportingParty"


class IssuerParty(models.AbstractModel):
    _description = "IssuerParty"
    _name = "ubl.23.issuerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IssuerParty"


class LegalAuthorityParty(models.AbstractModel):
    _description = "LegalAuthorityParty"
    _name = "ubl.23.legalauthorityparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LegalAuthorityParty"


class LoadingProofParty(models.AbstractModel):
    _description = "LoadingProofParty"
    _name = "ubl.23.loadingproofparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LoadingProofParty"


class LogisticsOperatorParty(models.AbstractModel):
    _description = "LogisticsOperatorParty"
    _name = "ubl.23.logisticsoperatorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LogisticsOperatorParty"


class ManufacturerParty(models.AbstractModel):
    _description = "ManufacturerParty"
    _name = "ubl.23.manufacturerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ManufacturerParty"

    ubl23_ManufacturerParty_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class MediationParty(models.AbstractModel):
    _description = "MediationParty"
    _name = "ubl.23.mediationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MediationParty"


class MortgageHolderParty(models.AbstractModel):
    _description = "MortgageHolderParty"
    _name = "ubl.23.mortgageholderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MortgageHolderParty"


class NotaryParty(models.AbstractModel):
    _description = "NotaryParty"
    _name = "ubl.23.notaryparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotaryParty"


class NotifierParty(models.AbstractModel):
    _description = "NotifierParty"
    _name = "ubl.23.notifierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotifierParty"


class NotifyParty(models.AbstractModel):
    _description = "NotifyParty"
    _name = "ubl.23.notifyparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotifyParty"

    ubl23_NotifyParty_DeliveryType_id = fields.Many2one(
        comodel_name="ubl.23.deliverytype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_NotifyParty_DespatchType_id = fields.Many2one(
        comodel_name="ubl.23.despatchtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_NotifyParty_NotificationRequirementType_id = fields.Many2one(
        comodel_name="ubl.23.notificationrequirementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OperatingParty(models.AbstractModel):
    _description = "OperatingParty"
    _name = "ubl.23.operatingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OperatingParty"


class OriginalDespatchParty(models.AbstractModel):
    _description = "OriginalDespatchParty"
    _name = "ubl.23.originaldespatchparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginalDespatchParty"


class OriginatorParty(models.AbstractModel):
    _description = "OriginatorParty"
    _name = "ubl.23.originatorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginatorParty"


class OwnerParty(models.AbstractModel):
    _description = "OwnerParty"
    _name = "ubl.23.ownerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OwnerParty"


class Party(models.AbstractModel):
    _description = "Party"
    _name = "ubl.23.party"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Party"


class PayeeParty(models.AbstractModel):
    _description = "PayeeParty"
    _name = "ubl.23.payeeparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PayeeParty"


class PayerParty(models.AbstractModel):
    _description = "PayerParty"
    _name = "ubl.23.payerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PayerParty"


class PerformingCarrierParty(models.AbstractModel):
    _description = "PerformingCarrierParty"
    _name = "ubl.23.performingcarrierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PerformingCarrierParty"


class PersonnelHealthIncident(models.AbstractModel):
    _description = "PersonnelHealthIncident"
    _name = "ubl.23.personnelhealthincident"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PersonnelHealthIncident"

    ubl23_PersonnelHealthIncident_MaritimeHealthDeclarationType_id = fields.Many2one(
        comodel_name="ubl.23.maritimehealthdeclarationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PickupParty(models.AbstractModel):
    _description = "PickupParty"
    _name = "ubl.23.pickupparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PickupParty"


class PortCall(models.AbstractModel):
    _description = "PortCall"
    _name = "ubl.23.portcall"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PortCall"


class PreSelectedParty(models.AbstractModel):
    _description = "PreSelectedParty"
    _name = "ubl.23.preselectedparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreSelectedParty"

    ubl23_PreSelectedParty_EconomicOperatorShortListType_id = fields.Many2one(
        comodel_name="ubl.23.economicoperatorshortlisttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PreparationParty(models.AbstractModel):
    _description = "PreparationParty"
    _name = "ubl.23.preparationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreparationParty"


class ProcessingParty(models.AbstractModel):
    _description = "ProcessingParty"
    _name = "ubl.23.processingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcessingParty"


class ProviderParty(models.AbstractModel):
    _description = "ProviderParty"
    _name = "ubl.23.providerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProviderParty"


class QualificationRequestRecipientParty(models.AbstractModel):
    _description = "QualificationRequestRecipientParty"
    _name = "ubl.23.qualificationrequestrecipientparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QualificationRequestRecipientParty"


class ReceiverParty(models.AbstractModel):
    _description = "ReceiverParty"
    _name = "ubl.23.receiverparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiverParty"


class RecipientParty(models.AbstractModel):
    _description = "RecipientParty"
    _name = "ubl.23.recipientparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RecipientParty"


class ReporterParty(models.AbstractModel):
    _description = "ReporterParty"
    _name = "ubl.23.reporterparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReporterParty"


class RepresentativeParty(models.AbstractModel):
    _description = "RepresentativeParty"
    _name = "ubl.23.representativeparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RepresentativeParty"


class RequestorParty(models.AbstractModel):
    _description = "RequestorParty"
    _name = "ubl.23.requestorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestorParty"


class ResponderParty(models.AbstractModel):
    _description = "ResponderParty"
    _name = "ubl.23.responderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponderParty"


class ResponsibleParty(models.AbstractModel):
    _description = "ResponsibleParty"
    _name = "ubl.23.responsibleparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponsibleParty"


class ResponsibleTransportServiceProviderParty(models.AbstractModel):
    _description = "ResponsibleTransportServiceProviderParty"
    _name = "ubl.23.responsibletransportserviceproviderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ResponsibleTransportServiceProviderParty"


class SenderParty(models.AbstractModel):
    _description = "SenderParty"
    _name = "ubl.23.senderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SenderParty"


class SendingLogisticsOperatorParty(models.AbstractModel):
    _description = "SendingLogisticsOperatorParty"
    _name = "ubl.23.sendinglogisticsoperatorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SendingLogisticsOperatorParty"


class ShipperParty(models.AbstractModel):
    _description = "ShipperParty"
    _name = "ubl.23.shipperparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipperParty"


class SignatoryParty(models.AbstractModel):
    _description = "SignatoryParty"
    _name = "ubl.23.signatoryparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SignatoryParty"


class SourceIssuerParty(models.AbstractModel):
    _description = "SourceIssuerParty"
    _name = "ubl.23.sourceissuerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SourceIssuerParty"


class SubcontractorParty(models.AbstractModel):
    _description = "SubcontractorParty"
    _name = "ubl.23.subcontractorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubcontractorParty"


class SubscriberParty(models.AbstractModel):
    _description = "SubscriberParty"
    _name = "ubl.23.subscriberparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubscriberParty"


class SubstituteCarrierParty(models.AbstractModel):
    _description = "SubstituteCarrierParty"
    _name = "ubl.23.substitutecarrierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubstituteCarrierParty"


class TaxRepresentativeParty(models.AbstractModel):
    _description = "TaxRepresentativeParty"
    _name = "ubl.23.taxrepresentativeparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxRepresentativeParty"


class TenderEvaluationParty(models.AbstractModel):
    _description = "TenderEvaluationParty"
    _name = "ubl.23.tenderevaluationparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderEvaluationParty"

    ubl23_TenderEvaluationParty_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class TenderRecipientParty(models.AbstractModel):
    _description = "TenderRecipientParty"
    _name = "ubl.23.tenderrecipientparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderRecipientParty"


class TendererParty(models.AbstractModel):
    _description = "TendererParty"
    _name = "ubl.23.tendererparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererParty"


class TerminalOperatorParty(models.AbstractModel):
    _description = "TerminalOperatorParty"
    _name = "ubl.23.terminaloperatorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TerminalOperatorParty"


class TransitExporterParty(models.AbstractModel):
    _description = "TransitExporterParty"
    _name = "ubl.23.transitexporterparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransitExporterParty"


class TransportAdvisorParty(models.AbstractModel):
    _description = "TransportAdvisorParty"
    _name = "ubl.23.transportadvisorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportAdvisorParty"


class TransportSchedule(models.AbstractModel):
    _description = "TransportSchedule"
    _name = "ubl.23.transportschedule"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportSchedule"


class TransportServiceProviderParty(models.AbstractModel):
    _description = "TransportServiceProviderParty"
    _name = "ubl.23.transportserviceproviderparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportServiceProviderParty"


class TransportUserParty(models.AbstractModel):
    _description = "TransportUserParty"
    _name = "ubl.23.transportuserparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportUserParty"


class UtilityCustomerParty(models.AbstractModel):
    _description = "UtilityCustomerParty"
    _name = "ubl.23.utilitycustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilityCustomerParty"


class UtilitySupplierParty(models.AbstractModel):
    _description = "UtilitySupplierParty"
    _name = "ubl.23.utilitysupplierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilitySupplierParty"


class WarehouseParty(models.AbstractModel):
    _description = "WarehouseParty"
    _name = "ubl.23.warehouseparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WarehouseParty"


class WarrantyParty(models.AbstractModel):
    _description = "WarrantyParty"
    _name = "ubl.23.warrantyparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WarrantyParty"


class WeighingParty(models.AbstractModel):
    _description = "WeighingParty"
    _name = "ubl.23.weighingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WeighingParty"


class WitnessParty(models.AbstractModel):
    _description = "WitnessParty"
    _name = "ubl.23.witnessparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WitnessParty"

    ubl23_WitnessParty_PowerOfAttorneyType_id = fields.Many2one(
        comodel_name="ubl.23.powerofattorneytype", xsd_implicit=True, ondelete="cascade"
    )


class AppealTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Appeal Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the terms and conditions, set by the
    contracting authority, under which an appeal can be lodged for a tender
    award.</ns1:Definition>
    <ns1:ObjectClass>Appeal Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.appealtermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AppealTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the terms of an appeal",
        xsd_type="DescriptionType",
        help="Text describing the terms of an appeal.",
    )

    ubl23_PresentationPeriod = fields.Many2one(
        comodel_name="ubl.23.presentationperiod",
        string="The period during which an appeal can be presented",
        help="The period during which an appeal can be presented.",
    )

    ubl23_AppealInformationParty = fields.Many2one(
        comodel_name="ubl.23.appealinformationparty",
        string="The party presenting the information for an appeal",
        help="The party presenting the information for an appeal.",
    )

    ubl23_AppealReceiverParty = fields.Many2one(
        comodel_name="ubl.23.appealreceiverparty",
        string="The party to whom an appeal should be presented",
        help="The party to whom an appeal should be presented.",
    )

    ubl23_MediationParty = fields.Many2one(
        comodel_name="ubl.23.mediationparty",
        string="The party that has been appointed to mediate any appeal",
        help="The party that has been appointed to mediate any appeal.",
    )


class ContractingPartyType1(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contracting Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an individual, a group, or a body having a
    procurement role in a tendering process.</ns1:Definition>
    <ns1:ObjectClass>Contracting Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contractingpartytype1"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingPartyType1"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_BuyerProfileURI = fields.Char(
        string="BuyerProfileURI",
        xsd_type="BuyerProfileURIType",
        help=(
            "The buyer profile is typically located on a web site where the "
            "contracting party publishes its procurement opportunities"
        ),
    )

    ubl23_ContractingPartyType = fields.One2many(
        "ubl.23.contractingpartytype",
        "ubl23_ContractingPartyType_ContractingPartyType_1_id",
        string="ContractingPartyType",
        help=("The type of contracting party that is independent of its role."),
    )

    ubl23_ContractingActivity = fields.One2many(
        "ubl.23.contractingactivity",
        "ubl23_ContractingActivity_ContractingPartyType_1_id",
        string="The nature of the type of business of the organization",
    )

    ubl23_ContractingRepresentationType = fields.Many2one(
        comodel_name="ubl.23.contractingrepresentationtype",
        string="ContractingRepresentationType",
        help=(
            "The type of represention empowering the party to act on behalf of"
            " a third party"
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="The contracting party itself.",
        xsd_required=True,
    )


class CustomerPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Customer Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a customer party.</ns1:Definition>
    <ns1:ObjectClass>Customer Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.customerpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomerPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CustomerAssignedAccountID = fields.Char(
        string="An identifier for the customer's account",
        xsd_type="CustomerAssignedAccountIDType",
        help=(
            "An identifier for the customer's account, assigned by the "
            "customer itself."
        ),
    )

    ubl23_SupplierAssignedAccountID = fields.Char(
        string="SupplierAssignedAccountID",
        xsd_type="SupplierAssignedAccountIDType",
        help=("An identifier for the customer's account, assigned by the " "supplier."),
    )

    ubl23_AdditionalAccountID = fields.Char(
        string="AdditionalAccountID",
        xsd_type="AdditionalAccountIDType",
        help=(
            "An identifier for the customer's account, assigned by a third " "party."
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party", string="The customer party itself."
    )

    ubl23_DeliveryContact = fields.Many2one(
        comodel_name="ubl.23.deliverycontact",
        string="A customer contact for deliveries.",
    )

    ubl23_AccountingContact = fields.Many2one(
        comodel_name="ubl.23.accountingcontact",
        string="A customer contact for accounting.",
    )

    ubl23_BuyerContact = fields.Many2one(
        comodel_name="ubl.23.buyercontact", string="A customer contact for purchasing."
    )


class CustomsDeclarationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Customs Declaration. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing identifiers or references relating to
    customs procedures.</ns1:Definition>
    <ns1:ObjectClass>Customs Declaration</ns1:ObjectClass>
    <ns1:Examples>Movement Reference Number, Local Reference Number</ns1:Examples>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.customsdeclarationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsDeclarationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier associated with customs related procedures",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier associated with customs related procedures.",
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which this customs declaration is valid",
    )

    ubl23_ApplicableTerritoryAddress = fields.Many2one(
        comodel_name="ubl.23.applicableterritoryaddress",
        string="The area or region where this customs declaration applies",
    )

    ubl23_Shipment = fields.Many2one(
        comodel_name="ubl.23.shipment",
        string="A reference to the shipment of goods being declared",
    )

    ubl23_CustomsExitOfficeLocation = fields.Many2one(
        comodel_name="ubl.23.customsexitofficelocation",
        string="CustomsExitOfficeLocation",
        help=(
            "The location of the exit office from where the goods will leave "
            "or have left the customs territory"
        ),
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="Describes the party issuing the customs declaration",
        help="Describes the party issuing the customs declaration.",
    )

    ubl23_ConsignorParty = fields.Many2one(
        comodel_name="ubl.23.consignorparty",
        string="The party",
        help=(
            "The party, usually the seller, who is responsible for the " "consignment"
        ),
    )

    ubl23_ConsigneeParty = fields.Many2one(
        comodel_name="ubl.23.consigneeparty",
        string="The party (ConsigneeParty)",
        help="The party, usually the buyer, who will receive the goods",
    )

    ubl23_FreightForwarderParty = fields.Many2one(
        comodel_name="ubl.23.freightforwarderparty",
        string="FreightForwarderParty",
        help=(
            "The freight forwarder or the forwarding agent responsible for the"
            " transportation of the goods"
        ),
    )

    ubl23_CustomsParty = fields.Many2one(
        comodel_name="ubl.23.customsparty",
        string="CustomsParty",
        help=("The authority responsible for processing this customs declaration"),
    )

    ubl23_PreviousCustomsDeclaration = fields.Many2one(
        comodel_name="ubl.23.previouscustomsdeclaration",
        string="PreviousCustomsDeclaration",
        help=("A reference to a previous version of this customs declaration"),
    )

    ubl23_AdditionalDocumentReference = fields.One2many(
        "ubl.23.additionaldocumentreference",
        "ubl23_AdditionalDocumentReference_CustomsDeclarationType_id",
        string="AdditionalDocumentReference",
        help=(
            "A reference to additional documents relevant or related to this "
            "customs declaration"
        ),
    )


class DespatchType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Despatch. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the despatching of goods (their pickup for
    delivery).</ns1:Definition>
    <ns1:ObjectClass>Despatch</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.despatchtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this despatch event",
        xsd_type="IDType",
        help="An identifier for this despatch event.",
    )

    ubl23_RequestedDespatchDate = fields.Date(
        string="The despatch (pickup) date requested",
        help="The despatch (pickup) date requested, normally by the buyer.",
    )

    ubl23_EstimatedDespatchDate = fields.Date(
        string="The estimated despatch", help="The estimated despatch (pickup) date."
    )

    ubl23_ActualDespatchDate = fields.Date(string="The actual despatch (pickup) date.")

    ubl23_GuaranteedDespatchDate = fields.Date(
        string="The date guaranteed for the despatch",
        help="The date guaranteed for the despatch (pickup).",
    )

    ubl23_ReleaseID = fields.Char(
        string="ReleaseID",
        xsd_type="ReleaseIDType",
        help=(
            "An identifier for the release of the despatch used as security "
            "control or cargo control (pick-up)."
        ),
    )

    ubl23_Instructions = fields.Char(
        string="Instructions",
        xsd_type="InstructionsType",
        help=(
            "Text describing any special instructions applying to the despatch"
            " (pickup)."
        ),
    )

    ubl23_DespatchAddress = fields.Many2one(
        comodel_name="ubl.23.despatchaddress",
        string="The address of the despatch",
        help="The address of the despatch (pickup).",
    )

    ubl23_DespatchLocation = fields.Many2one(
        comodel_name="ubl.23.despatchlocation",
        string="The location of the despatch",
        help="The location of the despatch (pickup).",
    )

    ubl23_DespatchParty = fields.Many2one(
        comodel_name="ubl.23.despatchparty", string="The party despatching the goods."
    )

    ubl23_CarrierParty = fields.Many2one(
        comodel_name="ubl.23.carrierparty", string="The party carrying the goods."
    )

    ubl23_NotifyParty = fields.One2many(
        "ubl.23.notifyparty",
        "ubl23_NotifyParty_DespatchType_id",
        string="A party to be notified of this despatch",
        help="A party to be notified of this despatch (pickup).",
    )

    ubl23_Contact = fields.Many2one(
        comodel_name="ubl.23.contact",
        string="The primary contact for this despatch",
        help="The primary contact for this despatch (pickup).",
    )

    ubl23_EstimatedDespatchPeriod = fields.Many2one(
        comodel_name="ubl.23.estimateddespatchperiod",
        string="The period estimated for the despatch",
        help="The period estimated for the despatch (pickup) of goods.",
    )

    ubl23_RequestedDespatchPeriod = fields.Many2one(
        comodel_name="ubl.23.requesteddespatchperiod",
        string="The period requested for the despatch",
        help="The period requested for the despatch (pickup) of goods.",
    )


class DocumentDistributionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Document Distribution.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the distribution of a document to an
    interested party.</ns1:Definition>
    <ns1:ObjectClass>Document Distribution</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.documentdistributiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentDistributionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this document distribution",
        xsd_type="IDType",
        help="An identifier for this document distribution.",
    )

    ubl23_DocumentTypeCode = fields.Char(
        string="The type of document",
        xsd_type="DocumentTypeCodeType",
        help="The type of document, expressed as a code.",
    )

    ubl23_DistributionTypeCode = fields.Char(
        string="The type of distribution",
        xsd_type="DistributionTypeCodeType",
        help="The type of distribution, expressed as a code.",
    )

    ubl23_DistributionType = fields.Char(
        string="The type of distribution (DistributionType)",
        xsd_type="DistributionTypeType",
        help="The type of distribution, expressed as text.",
    )

    ubl23_PrintQualifier = fields.Char(
        string="PrintQualifier",
        xsd_type="PrintQualifierType",
        help=(
            "Text describing the interested partyâs rights and limitations for"
            " distributing originals and copies of this document."
        ),
    )

    ubl23_CopyIndicator = fields.Boolean(
        string="CopyIndicator",
        help=(
            "An indicator that the document in this ditribution is a copy "
            "(true) or the original (false)."
        ),
    )

    ubl23_MaximumCopiesNumeric = fields.Float(
        string="MaximumCopiesNumeric",
        xsd_type="MaximumCopiesNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of printed copies of the document that the "
            "interested party is allowed to make."
        ),
    )

    ubl23_MaximumOriginalsNumeric = fields.Float(
        string="MaximumOriginalsNumeric",
        xsd_type="MaximumOriginalsNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of printed originals of the document that the "
            "interested party is allowed to make."
        ),
    )

    ubl23_Communication = fields.Many2one(
        comodel_name="ubl.23.communication",
        string="A Communication used for this document distribution",
        help="A Communication used for this document distribution.",
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="Party",
        xsd_required=True,
        help=("The interested party to which the document should be distributed."),
    )


class DocumentResponseType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Document Response. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an application-level response to a
    document.</ns1:Definition>
    <ns1:ObjectClass>Document Response</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.documentresponsetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentResponseType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Response = fields.Many2one(
        comodel_name="ubl.23.response",
        string="A response to the document as a whole",
        xsd_required=True,
        help="A response to the document as a whole.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_DocumentResponseType_id",
        string="A referenced document.",
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty", string="The party that issued the document."
    )

    ubl23_RecipientParty = fields.Many2one(
        comodel_name="ubl.23.recipientparty",
        string="The party for which the document is intended",
        help="The party for which the document is intended.",
    )

    ubl23_LineResponse = fields.One2many(
        "ubl.23.lineresponse",
        "ubl23_LineResponse_DocumentResponseType_id",
        string="A response to a particular line in the document",
        help="A response to a particular line in the document.",
    )


class EconomicOperatorShortListType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Economic Operator Short List.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to provide information about the preselection of a
    short list of economic operators for consideration as possible candidates
    in a tendering process.</ns1:Definition>
    <ns1:ObjectClass>Economic Operator Short List</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.economicoperatorshortlisttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorShortListType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LimitationDescription = fields.Char(
        string="LimitationDescription",
        xsd_type="LimitationDescriptionType",
        help=(
            "Text describing the criteria used to restrict the number of " "candidates."
        ),
    )

    ubl23_ExpectedQuantity = fields.Float(
        string="ExpectedQuantity",
        xsd_type="ExpectedQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The number of economic operators expected to be on the short " "list."),
    )

    ubl23_MaximumQuantity = fields.Float(
        string="The maximum number of economic operators on the short list",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The maximum number of economic operators on the short list.",
    )

    ubl23_MinimumQuantity = fields.Float(
        string="The minimum number of economic operators on the short list",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The minimum number of economic operators on the short list.",
    )

    ubl23_PreSelectedParty = fields.One2many(
        "ubl.23.preselectedparty",
        "ubl23_PreSelectedParty_EconomicOperatorShortListType_id",
        string="The parties pre",
        help=(
            "The parties pre-selected allowed to submit tenders in a "
            "negotiated procedure. Negotiated procedure is a type of procedure"
            " where the contracting authorities can set the parties to be "
            "invited in the procurement project"
        ),
    )


class EndorserPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Endorser Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the party endorsing a
    document.</ns1:Definition>
    <ns1:ObjectClass>Endorser Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.endorserpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EndorserPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_RoleCode = fields.Char(
        string="RoleCode",
        xsd_required=True,
        xsd_type="RoleCodeType",
        help=(
            "A code specifying the role of the party providing the endorsement"
            " (e.g., issuer, embassy, insurance, etc.)."
        ),
    )

    ubl23_SequenceNumeric = fields.Float(
        string="SequenceNumeric",
        xsd_required=True,
        xsd_type="SequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number indicating the order of the endorsement provided by this"
            " party in the sequence in which endorsements are to be applied."
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="The party endorsing the application.",
        xsd_required=True,
    )

    ubl23_SignatoryContact = fields.Many2one(
        comodel_name="ubl.23.signatorycontact",
        string="SignatoryContact",
        xsd_required=True,
        help=(
            "The individual representing the exporter who signs the "
            "Certificate of Origin application before submitting it to the "
            "issuer party."
        ),
    )


class EvidenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Evidence. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an item of evidentiary support for
    representations of capabilities or the ability to meet tendering
    requirements, which an economic operator must provide for acceptance into a
    tendering process.</ns1:Definition>
    <ns1:ObjectClass>Evidence</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.evidencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvidenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this item of evidentiary support",
        xsd_type="IDType",
        help="An identifier for this item of evidentiary support.",
    )

    ubl23_EvidenceTypeCode = fields.Char(
        string="A code signifying the type of evidence",
        xsd_type="EvidenceTypeCodeType",
        help="A code signifying the type of evidence.",
    )

    ubl23_Name = fields.Char(string="The name of the evidence.", xsd_type="NameType")

    ubl23_Description = fields.Char(
        string="The textual description for this Evidence",
        xsd_type="DescriptionType",
        help="The textual description for this Evidence.",
    )

    ubl23_CandidateStatement = fields.Char(
        string="CandidateStatement",
        xsd_type="CandidateStatementType",
        help=(
            "Information about a candidate statement that the contracting "
            "authority accepts as a sufficient response."
        ),
    )

    ubl23_ConfidentialityLevelCode = fields.Char(
        string="ConfidentialityLevelCode",
        xsd_type="ConfidentialityLevelCodeType",
        help=("A code specifying the confidentiality level of this evidence."),
    )

    ubl23_EvidenceIssuingParty = fields.Many2one(
        comodel_name="ubl.23.evidenceissuingparty",
        string="EvidenceIssuingParty",
        help="A class to describe a party issuing an evidentiary document.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_EvidenceType_id",
        string="A reference to the evidentiary document",
        help="A reference to the evidentiary document.",
    )

    ubl23_Language = fields.Many2one(
        comodel_name="ubl.23.language",
        string="Language",
        help=(
            "Information about a required translation to be part of the "
            "response, i.e. the language."
        ),
    )


class HazardousItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Hazardous Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a hazardous item.</ns1:Definition>
    <ns1:ObjectClass>Hazardous Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.hazardousitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HazardousItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this hazardous item",
        xsd_type="IDType",
        help="An identifier for this hazardous item.",
    )

    ubl23_PlacardNotation = fields.Char(
        string="PlacardNotation",
        xsd_type="PlacardNotationType",
        help=(
            "Text of the placard notation corresponding to the hazard class of"
            " this hazardous item. Can also be the hazard identification "
            "number of the orange placard (upper part) required on the means "
            "of transport."
        ),
    )

    ubl23_PlacardEndorsement = fields.Char(
        string="PlacardEndorsement",
        xsd_type="PlacardEndorsementType",
        help=(
            "Text of the placard endorsement that is to be shown on the "
            "shipping papers for this hazardous item. Can also be used for the"
            " number of the orange placard (lower part) required on the means "
            "of transport."
        ),
    )

    ubl23_AdditionalInformation = fields.Char(
        string="AdditionalInformation",
        xsd_type="AdditionalInformationType",
        help=("Text providing further information about the hazardous substance."),
    )

    ubl23_UNDGCode = fields.Char(
        string="The UN code for this kind of hazardous item",
        xsd_type="UNDGCodeType",
        help="The UN code for this kind of hazardous item.",
    )

    ubl23_UNPackingGroupCode = fields.Char(
        string="UNPackingGroupCode",
        xsd_type="UNPackingGroupCodeType",
        help=(
            "A code signifying the UN Packing Group protective packaging "
            "requirements for this hazardous item."
        ),
    )

    ubl23_UNPackingGroup = fields.Char(
        string="UNPackingGroup",
        xsd_type="UNPackingGroupType",
        help=(
            "A text describing the UN Packing Group protective packaging "
            "requirements for this hazardous item."
        ),
    )

    ubl23_EmergencyProceduresCode = fields.Char(
        string="EmergencyProceduresCode",
        xsd_type="EmergencyProceduresCodeType",
        help=("A code signifying the emergency procedures for this hazardous " "item."),
    )

    ubl23_MedicalFirstAidGuideCode = fields.Char(
        string="MedicalFirstAidGuideCode",
        xsd_type="MedicalFirstAidGuideCodeType",
        help=(
            "A code signifying a medical first aid guide appropriate to this "
            "hazardous item."
        ),
    )

    ubl23_TunnelRestrictionCode = fields.Char(
        string="TunnelRestrictionCode",
        xsd_type="TunnelRestrictionCodeType",
        help=(
            "A code signifying the restrictions for this hazardous item for "
            "passing through a tunnel."
        ),
    )

    ubl23_MaritimePollutantCode = fields.Char(
        string="MaritimePollutantCode",
        xsd_type="MaritimePollutantCodeType",
        help=(
            "A code for specifying the maritime pollutant for this hazardous " "item."
        ),
    )

    ubl23_TechnicalName = fields.Char(
        string="TechnicalName",
        xsd_type="TechnicalNameType",
        help=(
            "The full technical name of a specific hazardous substance "
            "contained in this goods item."
        ),
    )

    ubl23_CategoryName = fields.Char(
        string="CategoryName",
        xsd_type="CategoryNameType",
        help="The name of the category of hazard that applies to the Item.",
    )

    ubl23_HazardousCategoryCode = fields.Char(
        string="A code signifying a kind of hazard for a material",
        xsd_type="HazardousCategoryCodeType",
        help="A code signifying a kind of hazard for a material.",
    )

    ubl23_UpperOrangeHazardPlacardID = fields.Char(
        string="UpperOrangeHazardPlacardID",
        xsd_type="UpperOrangeHazardPlacardIDType",
        help=(
            "The number for the upper part of the orange hazard placard "
            "required on the means of transport."
        ),
    )

    ubl23_LowerOrangeHazardPlacardID = fields.Char(
        string="LowerOrangeHazardPlacardID",
        xsd_type="LowerOrangeHazardPlacardIDType",
        help=(
            "The number for the lower part of the orange hazard placard "
            "required on the means of transport."
        ),
    )

    ubl23_MarkingID = fields.Char(
        string="An identifier to the marking of the Hazardous Item",
        xsd_type="MarkingIDType",
    )

    ubl23_HazardClassID = fields.Char(
        string="HazardClassID",
        xsd_type="HazardClassIDType",
        help=(
            "An identifier for the hazard class applicable to this hazardous "
            "item as defined by the relevant regulation authority (e.g., the "
            "IMDG Class Number of the SOLAS Convention of IMO and the ADR/RID "
            "Class Number for the road/rail environment)."
        ),
    )

    ubl23_NetWeightMeasure = fields.Char(
        string="The net weight of this hazardous item",
        xsd_type="NetWeightMeasureType",
        help="The net weight of this hazardous item, excluding packaging.",
    )

    ubl23_NetVolumeMeasure = fields.Char(
        string="The volume of this hazardous item",
        xsd_type="NetVolumeMeasureType",
        help=(
            "The volume of this hazardous item, excluding packaging and "
            "transport equipment."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="Quantity",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of goods items in this hazardous item that are " "hazardous."
        ),
    )

    ubl23_ContactParty = fields.Many2one(
        comodel_name="ubl.23.contactparty",
        string="The individual",
        help=(
            "The individual, group, or body to be contacted in case of a "
            "hazardous incident associated with this item."
        ),
    )

    ubl23_SecondaryHazard = fields.One2many(
        "ubl.23.secondaryhazard",
        "ubl23_SecondaryHazard_HazardousItemType_id",
        string="A secondary hazard associated with this hazardous item",
        help="A secondary hazard associated with this hazardous item.",
    )

    ubl23_HazardousGoodsTransit = fields.One2many(
        "ubl.23.hazardousgoodstransit",
        "ubl23_HazardousGoodsTransit_HazardousItemType_id",
        string="HazardousGoodsTransit",
        help=("Information related to the transit of this kind of hazardous " "goods."),
    )

    ubl23_EmergencyTemperature = fields.Many2one(
        comodel_name="ubl.23.emergencytemperature",
        string="EmergencyTemperature",
        help=(
            "The threshold temperature at which emergency procedures apply in "
            "the handling of temperature-controlled goods."
        ),
    )

    ubl23_FlashpointTemperature = fields.Many2one(
        comodel_name="ubl.23.flashpointtemperature",
        string="The flashpoint temperature of this hazardous item; i",
        help=(
            "The flashpoint temperature of this hazardous item; i.e., the "
            "lowest temperature at which vapors above a volatile combustible "
            "substance ignite in air when exposed to flame."
        ),
    )

    ubl23_AdditionalTemperature = fields.One2many(
        "ubl.23.additionaltemperature",
        "ubl23_AdditionalTemperature_HazardousItemType_id",
        string="AdditionalTemperature",
        help=(
            "Another temperature relevant to the handling of this hazardous " "item."
        ),
    )

    ubl23_PositionOnBoardStowage = fields.Many2one(
        comodel_name="ubl.23.positiononboardstowage",
        string="A stowage indicating where to find this hazardous item",
        help="A stowage indicating where to find this hazardous item.",
    )


class IspsrequirementsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>ISPS Requirements. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a set of ISPS
    Requirements.</ns1:Definition>
    <ns1:ObjectClass>ISPS Requirements</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.ispsrequirementstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IspsrequirementsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for these ISPS requirements",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for these ISPS requirements.",
    )

    ubl23_ValidISSCIndicator = fields.Boolean(
        string="ValidISSCIndicator",
        help=(
            "An indicator of whether the International Ship Security "
            "Certificate (ISSC) is valid (true) or not (false)."
        ),
    )

    ubl23_ISSCAbsenceReason = fields.Char(
        string="ISSCAbsenceReason",
        xsd_type="ISSCAbsenceReasonType",
        help=(
            "A text describing the reason if not having a International Ship "
            "Security Certificate (ISSC)."
        ),
    )

    ubl23_ISSCExpiryDate = fields.Date(
        string="ISSCExpiryDate",
        help=(
            "The expiration date of the International Ship Security "
            "Certificate (ISSC)."
        ),
    )

    ubl23_SSPOnBoardIndicator = fields.Boolean(
        string="SSPOnBoardIndicator",
        help=(
            "An indicator of whether the vessel has a Ship Security Plan (SSP)"
            " on board (true) or not (false)."
        ),
    )

    ubl23_SSPSecurityMeasuresAppliedIndicator = fields.Boolean(
        string="An indication of whether the Ship Security Plan",
        help=(
            "An indication of whether the Ship Security Plan (SSP) meassures "
            "are applied (true) or not (false)."
        ),
    )

    ubl23_CurrentOperatingSecurityLevelCode = fields.Char(
        string="A code describing the current operating security level",
        xsd_type="CurrentOperatingSecurityLevelCodeType",
        help="A code describing the current operating security level.",
    )

    ubl23_AdditionalMattersDescription = fields.Char(
        string="AdditionalMattersDescription",
        xsd_type="AdditionalMattersDescriptionType",
        help=(
            "A textual description of any addidtional matters concerning these"
            " ISPS requirements."
        ),
    )

    ubl23_AdditionalSecurityMeasure = fields.One2many(
        "ubl.23.additionalsecuritymeasure",
        "ubl23_AdditionalSecurityMeasure_ISPSRequirementsType_id",
        string="AdditionalSecurityMeasure",
        help=(
            "Security measures for these ISPS requirements in addition to "
            "those in the ship security plan, such as special measures taken "
            "in response to unforeseen events."
        ),
    )

    ubl23_PortCallRecord = fields.One2many(
        "ubl.23.portcallrecord",
        "ubl23_PortCallRecord_ISPSRequirementsType_id",
        string="The port call records for these ISPS requirements",
        help="The port call records for these ISPS requirements.",
    )

    ubl23_ShipToShipActivityRecord = fields.One2many(
        "ubl.23.shiptoshipactivityrecord",
        "ubl23_ShipToShipActivityRecord_ISPSRequirementsType_id",
        string="ShipToShipActivityRecord",
        help=("The recordded ship to ship activities for these ISPS " "requirements."),
    )

    ubl23_ReportLocation = fields.Many2one(
        comodel_name="ubl.23.reportlocation",
        string="The location where these ISPC requirements are reported",
        help="The location where these ISPC requirements are reported.",
    )

    ubl23_ISSCIssuerParty = fields.Many2one(
        comodel_name="ubl.23.isscissuerparty",
        string="ISSCIssuerParty",
        help=(
            "The party issuing the International Ship Security Cetificate " "(ISSC)."
        ),
    )

    ubl23_SecurityOfficerPerson = fields.Many2one(
        comodel_name="ubl.23.securityofficerperson",
        string="SecurityOfficerPerson",
        help="The security officer reponsible for these ISPC requirements.",
    )


class ImmobilizedSecurityType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Immobilized Security.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an immobilized security to be used as a
    guarantee.</ns1:Definition>
    <ns1:ObjectClass>Immobilized Security</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.immobilizedsecuritytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImmobilizedSecurityType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ImmobilizationCertificateID = fields.Char(
        string="ImmobilizationCertificateID",
        xsd_type="ImmobilizationCertificateIDType",
        help=("An identifier for the certificate of this immobilized security."),
    )

    ubl23_SecurityID = fields.Char(
        string="An identifier for the security being immobilized",
        xsd_type="SecurityIDType",
        help="An identifier for the security being immobilized.",
    )

    ubl23_IssueDate = fields.Date(
        string="The date on which this immobilized security was issued",
        help="The date on which this immobilized security was issued.",
    )

    ubl23_FaceValueAmount = fields.Float(
        string="The value of the security on the day it was immobilized",
        xsd_type="FaceValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The value of the security on the day it was immobilized.",
    )

    ubl23_MarketValueAmount = fields.Float(
        string="The current market value of the immobilized security",
        xsd_type="MarketValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The current market value of the immobilized security.",
    )

    ubl23_SharesNumberQuantity = fields.Float(
        string="The number of shares immobilized.",
        xsd_type="SharesNumberQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="The party issuing the immobilized security certificate",
        help="The party issuing the immobilized security certificate.",
    )


class ItemIdentificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Identification. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for assigning identifying information to an
    item.</ns1:Definition>
    <ns1:ObjectClass>Item Identification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itemidentificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemIdentificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the item.", xsd_required=True, xsd_type="IDType"
    )

    ubl23_ExtendedID = fields.Char(
        string="ExtendedID",
        xsd_type="ExtendedIDType",
        help=(
            "An extended identifier for the item that identifies the item with"
            " specific properties, e.g., Item 123 = Chair / Item 123 Ext 45 = "
            "brown chair. Two chairs can have the same item number, but one is"
            " brown. The other is white."
        ),
    )

    ubl23_BarcodeSymbologyID = fields.Char(
        string="An identifier for a system of barcodes",
        xsd_type="BarcodeSymbologyIDType",
        help="An identifier for a system of barcodes.",
    )

    ubl23_IssuerScopeID = fields.Char(
        string="IssuerScopeID",
        xsd_type="IssuerScopeIDType",
        help=("A scope within which the issuer has assigned this identifier."),
    )

    ubl23_PhysicalAttribute = fields.One2many(
        "ubl.23.physicalattribute",
        "ubl23_PhysicalAttribute_ItemIdentificationType_id",
        string="A physical attribute of the item.",
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_ItemIdentificationType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of the " "item."
        ),
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="The party that issued this item identification",
        help="The party that issued this item identification.",
    )


class MaritimeHealthDeclarationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Maritime Health Declaration.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to desccribe a maritime health
    declaration.</ns1:Definition>
    <ns1:ObjectClass>Maritime Health Declaration</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.maritimehealthdeclarationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeHealthDeclarationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this maritime health declaration",
        xsd_type="IDType",
        help="An identifier for this maritime health declaration.",
    )

    ubl23_InfectiousDiseaseCaseOnBoardIndicator = fields.Boolean(
        string="InfectiousDiseaseCaseOnBoardIndicator",
        help=(
            "Indicates whether there is an infectious diasase case on board "
            "(true) or not (false)."
        ),
    )

    ubl23_MoreIllThanExpectedIndicator = fields.Boolean(
        string="Indicates whether a sick person is more ill than extected",
        help=(
            "Indicates whether a sick person is more ill than extected (true) "
            "or not (false)."
        ),
    )

    ubl23_MedicalPractitionerConsultedIndicator = fields.Boolean(
        string="Indicates whether a medical practioner has been consulted",
        help=(
            "Indicates whether a medical practioner has been consulted (true) "
            "or not (false)."
        ),
    )

    ubl23_StowawaysFoundOnBoardIndicator = fields.Boolean(
        string="Indicates whether stowaways have been found on board",
        help=(
            "Indicates whether stowaways have been found on board (true) or "
            "not (false)."
        ),
    )

    ubl23_SickAnimalOnBoardIndicator = fields.Boolean(
        string="Indicates whether a sick animal is on board",
        help=("Indicates whether a sick animal is on board (true) or not " "(false)."),
    )

    ubl23_FumigatedCargoTransportIndicator = fields.Boolean(
        string="FumigatedCargoTransportIndicator",
        help=(
            "Indicates whether the cargo under transport has been fumigated "
            "(true) or not (false)."
        ),
    )

    ubl23_SanitaryMeasuresAppliedIndicator = fields.Boolean(
        string="Indicates whether sanity measures are applied",
        help=(
            "Indicates whether sanity measures are applied (true) or not " "(false)."
        ),
    )

    ubl23_ValidSanitationCertificateOnBoardIndicator = fields.Boolean(
        string="Indicates whether a valid sanitary certificate is on board",
        help=(
            "Indicates whether a valid sanitary certificate is on board (true)"
            " or not (false)."
        ),
    )

    ubl23_ReinspectionRequiredIndicator = fields.Boolean(
        string="Indicates whether a reinspaction is required",
        help=("Indicates whether a reinspaction is required (true) or not " "(false)."),
    )

    ubl23_TotalDeadPersonQuantity = fields.Float(
        string="TotalDeadPersonQuantity",
        xsd_type="TotalDeadPersonQuantityType",
        digits=(
            16,
            4,
        ),
        help=("Specifies the total number of dead persons on board the vessel."),
    )

    ubl23_TotalIllPersonQuantity = fields.Float(
        string="TotalIllPersonQuantity",
        xsd_type="TotalIllPersonQuantityType",
        digits=(
            16,
            4,
        ),
        help=("Specifies the total number of ill persons on board the vessel."),
    )

    ubl23_SickAnimalDescription = fields.Char(
        string="Describes any sick animals on board the vessel",
        xsd_type="SickAnimalDescriptionType",
        help="Describes any sick animals on board the vessel.",
    )

    ubl23_StowawayDescription = fields.Char(
        string="Describes any stowaways on board the vessel",
        xsd_type="StowawayDescriptionType",
        help="Describes any stowaways on board the vessel.",
    )

    ubl23_LastDrinkingWaterAnalysisDate = fields.Date(
        string="The date when the last drinking water analysis was made",
        help="The date when the last drinking water analysis was made.",
    )

    ubl23_WHOAffectedAreaVisit = fields.One2many(
        "ubl.23.whoaffectedareavisit",
        "ubl23_WHOAffectedAreaVisit_MaritimeHealthDeclarationType_id",
        string="WHOAffectedAreaVisit",
        help=(
            "A WHO Affected Area visit related to this maritime health " "declaration."
        ),
    )

    ubl23_PersonnelHealthIncident = fields.One2many(
        "ubl.23.personnelhealthincident",
        "ubl23_PersonnelHealthIncident_MaritimeHealthDeclarationType_id",
        string="PersonnelHealthIncident",
        help=(
            "A personal health incident related to this maritime health " "declaration."
        ),
    )

    ubl23_SanitaryMeasure = fields.One2many(
        "ubl.23.sanitarymeasure",
        "ubl23_SanitaryMeasure_MaritimeHealthDeclarationType_id",
        string="A sanitary meassure for this health declaration",
        help="A sanitary meassure for this health declaration.",
    )

    ubl23_PlaceOfReportLocation = fields.Many2one(
        comodel_name="ubl.23.placeofreportlocation",
        string="PlaceOfReportLocation",
        help=("The location where this maritime health declaration is reported."),
    )

    ubl23_MedicalCertificate = fields.Many2one(
        comodel_name="ubl.23.medicalcertificate",
        string="MedicalCertificate",
        help=("The medical certificate for this maritime health declaration."),
    )

    ubl23_ShipSanitationControlCertificate = fields.Many2one(
        comodel_name="ubl.23.shipsanitationcontrolcertificate",
        string="ShipSanitationControlCertificate",
        help=(
            "A certificate describing the sanitation control of this maritime "
            "health certificate."
        ),
    )

    ubl23_ShipSanitationControlExemptionDocumentReference = fields.One2many(
        "ubl.23.shipsanitationcontrolexemptiondocumentreference",
        "ubl23_ShipSanitationControlExemptionDocumentReference_MaritimeHealthDeclarationType_id",
        string="ShipSanitationControlExemptionDocumentReference",
        help=(
            "A reference to a document evidencing the exemption of a ship "
            "sanitation control certificate, when absent."
        ),
    )


class NotificationRequirementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Notification Requirement.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a notification
    requirement.</ns1:Definition>
    <ns1:ObjectClass>Notification Requirement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.notificationrequirementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotificationRequirementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_NotificationTypeCode = fields.Char(
        string="A code signifying the type of notification",
        xsd_required=True,
        xsd_type="NotificationTypeCodeType",
        help=("A code signifying the type of notification (e.g., pickup status)."),
    )

    ubl23_PostEventNotificationDurationMeasure = fields.Char(
        string="PostEventNotificationDurationMeasure",
        xsd_type="PostEventNotificationDurationMeasureType",
        help=(
            "The length of time between the occurrence of a given event and "
            "the issuance of a notification."
        ),
    )

    ubl23_PreEventNotificationDurationMeasure = fields.Char(
        string="PreEventNotificationDurationMeasure",
        xsd_type="PreEventNotificationDurationMeasureType",
        help=(
            "The length of time to elapse between the issuance of a "
            "notification and the occurrence of the event it relates to."
        ),
    )

    ubl23_NotifyParty = fields.One2many(
        "ubl.23.notifyparty",
        "ubl23_NotifyParty_NotificationRequirementType_id",
        string="A party to be notified.",
    )

    ubl23_NotificationPeriod = fields.One2many(
        "ubl.23.notificationperiod",
        "ubl23_NotificationPeriod_NotificationRequirementType_id",
        string="A period during which a notification should be issued",
        help="A period during which a notification should be issued.",
    )

    ubl23_NotificationLocation = fields.One2many(
        "ubl.23.notificationlocation",
        "ubl23_NotificationLocation_NotificationRequirementType_id",
        string="A location at which a notification should be issued",
        help="A location at which a notification should be issued.",
    )


class ParticipantPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Participant Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a participant party.</ns1:Definition>
    <ns1:ObjectClass>Participant Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.participantpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParticipantPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_InitiatingPartyIndicator = fields.Boolean(
        string="InitiatingPartyIndicator",
        help=(
            "An indicator that this party is playing the role of the initiator"
            " within a transaction (true) or not (false)."
        ),
    )

    ubl23_PrivatePartyIndicator = fields.Boolean(
        string="An indicator that this party is a private entity",
        help=(
            "An indicator that this party is a private entity (true) or not " "(false)."
        ),
    )

    ubl23_PublicPartyIndicator = fields.Boolean(
        string="An indicator that this party is a public",
        help=(
            "An indicator that this party is a public (governmental) entity "
            "(true) or not (false)."
        ),
    )

    ubl23_ServiceProviderPartyIndicator = fields.Boolean(
        string="An indicator that this party is a service provider",
        help=(
            "An indicator that this party is a service provider (true) or not "
            "(false)."
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="The participant party itself.",
        xsd_required=True,
    )

    ubl23_LegalContact = fields.Many2one(
        comodel_name="ubl.23.legalcontact",
        string="LegalContact",
        help=(
            "A legal contact associated to this participant for sending legal "
            "notices."
        ),
    )

    ubl23_TechnicalContact = fields.Many2one(
        comodel_name="ubl.23.technicalcontact",
        string="A technical contact associated to this participant",
        help="A technical contact associated to this participant.",
    )

    ubl23_SupportContact = fields.Many2one(
        comodel_name="ubl.23.supportcontact",
        string="A support contact associated to this participant",
        help="A support contact associated to this participant.",
    )

    ubl23_CommercialContact = fields.Many2one(
        comodel_name="ubl.23.commercialcontact",
        string="A commercial contact associated to this participant",
        help="A commercial contact associated to this participant.",
    )


class PaymentMandateType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Payment Mandate. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a payment mandate.</ns1:Definition>
    <ns1:ObjectClass>Payment Mandate</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.paymentmandatetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentMandateType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this payment mandate",
        xsd_type="IDType",
        help="An identifier for this payment mandate.",
    )

    ubl23_MandateTypeCode = fields.Char(
        string="A code signifying the type of this payment mandate",
        xsd_type="MandateTypeCodeType",
        help="A code signifying the type of this payment mandate.",
    )

    ubl23_MaximumPaymentInstructionsNumeric = fields.Float(
        string="MaximumPaymentInstructionsNumeric",
        xsd_type="MaximumPaymentInstructionsNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of maximum payment instructions allowed within the "
            "validity period."
        ),
    )

    ubl23_MaximumPaidAmount = fields.Float(
        string="The maximum amount to be paid within a single instruction",
        xsd_type="MaximumPaidAmountType",
        digits=(
            16,
            4,
        ),
        help="The maximum amount to be paid within a single instruction.",
    )

    ubl23_SignatureID = fields.Char(
        string="An identifier for a signature applied by a signatory party",
        xsd_type="SignatureIDType",
        help="An identifier for a signature applied by a signatory party.",
    )

    ubl23_PayerParty = fields.Many2one(
        comodel_name="ubl.23.payerparty",
        string="The payer party",
        help="The payer party (if different from the debtor).",
    )

    ubl23_PayerFinancialAccount = fields.Many2one(
        comodel_name="ubl.23.payerfinancialaccount",
        string="The payer's financial account.",
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which this mandate is valid",
        help="The period during which this mandate is valid.",
    )

    ubl23_PaymentReversalPeriod = fields.Many2one(
        comodel_name="ubl.23.paymentreversalperiod",
        string="The period of the reverse payment.",
    )

    ubl23_Clause = fields.One2many(
        "ubl.23.clause",
        "ubl23_Clause_PaymentMandateType_id",
        string="A clause applicable to this payment mandate",
        help="A clause applicable to this payment mandate.",
    )


class PickupType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Pickup. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a pickup for delivery.</ns1:Definition>
    <ns1:ObjectClass>Pickup</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Collection</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.pickuptype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PickupType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this pickup.", xsd_type="IDType")

    ubl23_ActualPickupDate = fields.Date(string="The actual pickup date.")

    ubl23_EarliestPickupDate = fields.Date(string="The earliest pickup date.")

    ubl23_LatestPickupDate = fields.Date(string="The latest pickup date.")

    ubl23_PickupLocation = fields.Many2one(
        comodel_name="ubl.23.pickuplocation", string="The pickup location."
    )

    ubl23_PickupParty = fields.Many2one(
        comodel_name="ubl.23.pickupparty",
        string="The party responsible for picking up a delivery",
        help="The party responsible for picking up a delivery.",
    )


class PropertyIdentificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Property Identification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for assigning identifying information for a
    property</ns1:Definition>
    <ns1:ObjectClass>Property Identification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.propertyidentificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PropertyIdentificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An Identifier for the property.", xsd_required=True, xsd_type="IDType"
    )

    ubl23_IssuerScopeID = fields.Char(
        string="IssuerScopeID",
        xsd_type="IssuerScopeIDType",
        help=("A scope within which the issuer has assigned this identifier."),
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="The party that issued this property identifier",
        help="The party that issued this property identifier.",
    )


class SupplierPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Supplier Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a supplier party.</ns1:Definition>
    <ns1:ObjectClass>Supplier Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.supplierpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplierPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CustomerAssignedAccountID = fields.Char(
        string="An identifier for this supplier party",
        xsd_type="CustomerAssignedAccountIDType",
        help=("An identifier for this supplier party, assigned by the customer."),
    )

    ubl23_AdditionalAccountID = fields.Char(
        string="An additional identifier for this supplier party",
        xsd_type="AdditionalAccountIDType",
        help="An additional identifier for this supplier party.",
    )

    ubl23_DataSendingCapability = fields.Char(
        string="DataSendingCapability",
        xsd_type="DataSendingCapabilityType",
        help=(
            "Text describing the supplier's ability to send invoice data via a"
            " purchase card provider (e.g., VISA, MasterCard, American "
            "Express)."
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party", string="The supplier party itself."
    )

    ubl23_DespatchContact = fields.Many2one(
        comodel_name="ubl.23.despatchcontact",
        string="A contact at this supplier party for despatches",
        help="A contact at this supplier party for despatches (pickups).",
    )

    ubl23_AccountingContact = fields.Many2one(
        comodel_name="ubl.23.accountingcontact",
        string="A contact at this supplier party for accounting",
        help="A contact at this supplier party for accounting.",
    )

    ubl23_SellerContact = fields.Many2one(
        comodel_name="ubl.23.sellercontact",
        string="The primary contact for this supplier party",
        help="The primary contact for this supplier party.",
    )


class TradeFinancingType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Trade Financing. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a trade financing
    instrument.</ns1:Definition>
    <ns1:ObjectClass>Trade Financing</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tradefinancingtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TradeFinancingType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this trade financing instrument",
        xsd_type="IDType",
        help="An identifier for this trade financing instrument.",
    )

    ubl23_FinancingInstrumentCode = fields.Char(
        string="A code signifying the type of this financing instrument",
        xsd_type="FinancingInstrumentCodeType",
        help="A code signifying the type of this financing instrument.",
    )

    ubl23_ContractDocumentReference = fields.Many2one(
        comodel_name="ubl.23.contractdocumentreference",
        string="A reference to a contract document.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_TradeFinancingType_id",
        string="DocumentReference",
        help=(
            "A reference to a document associated with this trade financing "
            "instrument."
        ),
    )

    ubl23_FinancingParty = fields.Many2one(
        comodel_name="ubl.23.financingparty",
        string="The financing party",
        xsd_required=True,
        help="The financing party (bank or other enabled party).",
    )

    ubl23_FinancingFinancialAccount = fields.Many2one(
        comodel_name="ubl.23.financingfinancialaccount",
        string="FinancingFinancialAccount",
        help=(
            "An internal bank account used by the bank or its first agent to "
            "manage the line of credit granted to the financing requester."
        ),
    )

    ubl23_Clause = fields.One2many(
        "ubl.23.clause",
        "ubl23_Clause_TradeFinancingType_id",
        string="A clause applicable to this trade financing instrument",
        help="A clause applicable to this trade financing instrument.",
    )


class TransportMeansType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Means. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a particular vehicle or vessel used for the
    conveyance of goods or persons.</ns1:Definition>
    <ns1:ObjectClass>Transport Means</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Conveyance</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportmeanstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportMeansType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_JourneyID = fields.Char(
        string="JourneyID",
        xsd_type="JourneyIDType",
        help=(
            "An identifier for the regular service schedule of this means of "
            "transport."
        ),
    )

    ubl23_RegistrationNationalityID = fields.Char(
        string="RegistrationNationalityID",
        xsd_type="RegistrationNationalityIDType",
        help=(
            "An identifier for the country in which this means of transport is"
            " registered."
        ),
    )

    ubl23_RegistrationNationality = fields.Char(
        string="RegistrationNationality",
        xsd_type="RegistrationNationalityType",
        help=(
            "Text describing the country in which this means of transport is "
            "registered."
        ),
    )

    ubl23_DirectionCode = fields.Char(
        string="A code signifying the direction of this means of transport",
        xsd_type="DirectionCodeType",
        help="A code signifying the direction of this means of transport.",
    )

    ubl23_TransportMeansTypeCode = fields.Char(
        string="A code signifying the type of this means of transport",
        xsd_type="TransportMeansTypeCodeType",
        help=(
            "A code signifying the type of this means of transport (truck, "
            "vessel, etc.)."
        ),
    )

    ubl23_TradeServiceCode = fields.Char(
        string="TradeServiceCode",
        xsd_type="TradeServiceCodeType",
        help=(
            "A code signifying the service regularly provided by the carrier "
            "operating this means of transport."
        ),
    )

    ubl23_Stowage = fields.Many2one(
        comodel_name="ubl.23.stowage",
        string="Stowage",
        help=(
            "The location within the means of transport where goods are to be "
            "or have been stowed."
        ),
    )

    ubl23_AirTransport = fields.Many2one(
        comodel_name="ubl.23.airtransport", string="An aircraft used for transport."
    )

    ubl23_RoadTransport = fields.Many2one(
        comodel_name="ubl.23.roadtransport", string="A vehicle used for road transport."
    )

    ubl23_RailTransport = fields.Many2one(
        comodel_name="ubl.23.railtransport", string="Equipment used for rail transport."
    )

    ubl23_MaritimeTransport = fields.Many2one(
        comodel_name="ubl.23.maritimetransport",
        string="A vessel used for transport by water",
        help="A vessel used for transport by water (not only by sea).",
    )

    ubl23_OwnerParty = fields.Many2one(
        comodel_name="ubl.23.ownerparty",
        string="The party that owns this means of transport",
        help="The party that owns this means of transport.",
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_TransportMeansType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "means of transport."
        ),
    )


class VerifiedGrossMassType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Verified Gross Mass. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a verified gross mass (VGM) measure and its
    documentation.</ns1:Definition>
    <ns1:ObjectClass>Verified Gross Mass</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>VGM</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.verifiedgrossmasstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "VerifiedGrossMassType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this mass measure.", xsd_type="IDType"
    )

    ubl23_WeighingDate = fields.Date(string="The weighing date.")

    ubl23_WeighingMethodCode = fields.Char(
        string="A code signifying the weighing method used",
        xsd_required=True,
        xsd_type="WeighingMethodCodeType",
        help=(
            "A code signifying the weighing method used (e.g. according the "
            "SOLAS Convention)."
        ),
    )

    ubl23_WeighingDeviceID = fields.Char(
        string="WeighingDeviceID",
        xsd_type="WeighingDeviceIDType",
        help=(
            "An identifier for the weighing device used for executing the "
            "weight measurement."
        ),
    )

    ubl23_WeighingDeviceType = fields.Char(
        string="WeighingDeviceType",
        xsd_type="WeighingDeviceTypeType",
        help=(
            "Text describing the weighing device type used for executing the "
            "weight measurement."
        ),
    )

    ubl23_GrossMassMeasure = fields.Char(
        string="GrossMassMeasure",
        xsd_required=True,
        xsd_type="GrossMassMeasureType",
        help=(
            "The total verified gross mass of a packed container which "
            "includes the cargo weight, block and bracing materials and "
            "container tare."
        ),
    )

    ubl23_WeighingParty = fields.Many2one(
        comodel_name="ubl.23.weighingparty",
        string="The party executing the weight measure",
        help="The party executing the weight measure.",
    )

    ubl23_ShipperParty = fields.Many2one(
        comodel_name="ubl.23.shipperparty",
        string="The party playing the role of the Shipper",
        help=(
            "The party playing the role of the Shipper (BCO, FF or NVOCC) who "
            "is responsible for the VGM (e.g. according the SOLAS Convention)."
        ),
    )

    ubl23_ResponsibleParty = fields.Many2one(
        comodel_name="ubl.23.responsibleparty",
        string="ResponsibleParty",
        help=("The party responsible for signing the VGM on behalf of the " "Shipper."),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_VerifiedGrossMassType_id",
        string="A reference to the VGM documentary evidence",
        help="A reference to the VGM documentary evidence.",
    )


class WinningPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Winning Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A party that is identified as the awarded by a tender
    result.</ns1:Definition>
    <ns1:ObjectClass>Winning Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.winningpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WinningPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Rank = fields.Char(
        string="Indicates the rank obtained in the award",
        xsd_type="RankType",
        help="Indicates the rank obtained in the award.",
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="Information about an organization",
        xsd_required=True,
        help=(
            "Information about an organization, sub-organization, or "
            "individual fulfilling a role in a business process."
        ),
    )


class AccountingCustomerParty(models.AbstractModel):
    _description = "AccountingCustomerParty"
    _name = "ubl.23.accountingcustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AccountingCustomerParty"


class AccountingSupplierParty(models.AbstractModel):
    _description = "AccountingSupplierParty"
    _name = "ubl.23.accountingsupplierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AccountingSupplierParty"


class AdditionalDocumentResponse(models.AbstractModel):
    _description = "AdditionalDocumentResponse"
    _name = "ubl.23.additionaldocumentresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalDocumentResponse"


class AdditionalItemIdentification(models.AbstractModel):
    _description = "AdditionalItemIdentification"
    _name = "ubl.23.additionalitemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalItemIdentification"

    ubl23_AdditionalItemIdentification_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class AppealTerms(models.AbstractModel):
    _description = "AppealTerms"
    _name = "ubl.23.appealterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AppealTerms"


class ApplicableTransportMeans(models.AbstractModel):
    _description = "ApplicableTransportMeans"
    _name = "ubl.23.applicabletransportmeans"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ApplicableTransportMeans"


class BuyerCustomerParty(models.AbstractModel):
    _description = "BuyerCustomerParty"
    _name = "ubl.23.buyercustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BuyerCustomerParty"


class BuyersItemIdentification(models.AbstractModel):
    _description = "BuyersItemIdentification"
    _name = "ubl.23.buyersitemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BuyersItemIdentification"


class CatalogueItemIdentification(models.AbstractModel):
    _description = "CatalogueItemIdentification"
    _name = "ubl.23.catalogueitemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueItemIdentification"


class ContractingParty(models.AbstractModel):
    _description = "ContractingParty"
    _name = "ubl.23.contractingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractingParty"


class ContractorCustomerParty(models.AbstractModel):
    _description = "ContractorCustomerParty"
    _name = "ubl.23.contractorcustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractorCustomerParty"


class CustomerParty(models.AbstractModel):
    _description = "CustomerParty"
    _name = "ubl.23.customerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomerParty"


class CustomsDeclaration(models.AbstractModel):
    _description = "CustomsDeclaration"
    _name = "ubl.23.customsdeclaration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CustomsDeclaration"

    ubl23_CustomsDeclaration_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_CustomsDeclaration_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DeliveryCustomerParty(models.AbstractModel):
    _description = "DeliveryCustomerParty"
    _name = "ubl.23.deliverycustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryCustomerParty"


class Despatch(models.AbstractModel):
    _description = "Despatch"
    _name = "ubl.23.despatch"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Despatch"


class DespatchSupplierParty(models.AbstractModel):
    _description = "DespatchSupplierParty"
    _name = "ubl.23.despatchsupplierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchSupplierParty"


class DocumentDistribution(models.AbstractModel):
    _description = "DocumentDistribution"
    _name = "ubl.23.documentdistribution"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentDistribution"

    ubl23_DocumentDistribution_CertificateOfOriginApplicationType_id = fields.Many2one(
        comodel_name="ubl.23.certificateoforiginapplicationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DocumentResponse(models.AbstractModel):
    _description = "DocumentResponse"
    _name = "ubl.23.documentresponse"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DocumentResponse"


class EconomicOperatorShortList(models.AbstractModel):
    _description = "EconomicOperatorShortList"
    _name = "ubl.23.economicoperatorshortlist"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorShortList"

    ubl23_EconomicOperatorShortList_TenderingProcessType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingprocesstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EndorserParty(models.AbstractModel):
    _description = "EndorserParty"
    _name = "ubl.23.endorserparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EndorserParty"

    ubl23_EndorserParty_CertificateOfOriginApplicationType_id = fields.Many2one(
        comodel_name="ubl.23.certificateoforiginapplicationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Evidence(models.AbstractModel):
    _description = "Evidence"
    _name = "ubl.23.evidence"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Evidence"


class HazardousItem(models.AbstractModel):
    _description = "HazardousItem"
    _name = "ubl.23.hazardousitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HazardousItem"

    ubl23_HazardousItem_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class Ispsrequirements(models.AbstractModel):
    _description = "ISPSRequirements"
    _name = "ubl.23.ispsrequirements"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Ispsrequirements"


class ImmobilizedSecurity(models.AbstractModel):
    _description = "ImmobilizedSecurity"
    _name = "ubl.23.immobilizedsecurity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ImmobilizedSecurity"


class ItemIdentification(models.AbstractModel):
    _description = "ItemIdentification"
    _name = "ubl.23.itemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemIdentification"


class ManufacturersItemIdentification(models.AbstractModel):
    _description = "ManufacturersItemIdentification"
    _name = "ubl.23.manufacturersitemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ManufacturersItemIdentification"

    ubl23_ManufacturersItemIdentification_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class MaritimeHealthDeclaration(models.AbstractModel):
    _description = "MaritimeHealthDeclaration"
    _name = "ubl.23.maritimehealthdeclaration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MaritimeHealthDeclaration"


class NotificationRequirement(models.AbstractModel):
    _description = "NotificationRequirement"
    _name = "ubl.23.notificationrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "NotificationRequirement"

    ubl23_NotificationRequirement_TransportExecutionTermsType_id = fields.Many2one(
        comodel_name="ubl.23.transportexecutiontermstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class OriginatorCustomerParty(models.AbstractModel):
    _description = "OriginatorCustomerParty"
    _name = "ubl.23.originatorcustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginatorCustomerParty"


class ParticipantParty(models.AbstractModel):
    _description = "ParticipantParty"
    _name = "ubl.23.participantparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ParticipantParty"


class PaymentMandate(models.AbstractModel):
    _description = "PaymentMandate"
    _name = "ubl.23.paymentmandate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentMandate"


class Pickup(models.AbstractModel):
    _description = "Pickup"
    _name = "ubl.23.pickup"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Pickup"


class PreviousCustomsDeclaration(models.AbstractModel):
    _description = "PreviousCustomsDeclaration"
    _name = "ubl.23.previouscustomsdeclaration"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreviousCustomsDeclaration"


class PropertyIdentification(models.AbstractModel):
    _description = "PropertyIdentification"
    _name = "ubl.23.propertyidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PropertyIdentification"


class RecipientCustomerParty(models.AbstractModel):
    _description = "RecipientCustomerParty"
    _name = "ubl.23.recipientcustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RecipientCustomerParty"


class ReexportationEvidence(models.AbstractModel):
    _description = "ReexportationEvidence"
    _name = "ubl.23.reexportationevidence"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReexportationEvidence"


class RemittanceDocumentDistribution(models.AbstractModel):
    _description = "RemittanceDocumentDistribution"
    _name = "ubl.23.remittancedocumentdistribution"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RemittanceDocumentDistribution"

    ubl23_RemittanceDocumentDistribution_PaymentMeansType_id = fields.Many2one(
        comodel_name="ubl.23.paymentmeanstype", xsd_implicit=True, ondelete="cascade"
    )


class RetailerCustomerParty(models.AbstractModel):
    _description = "RetailerCustomerParty"
    _name = "ubl.23.retailercustomerparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RetailerCustomerParty"


class SellerSupplierParty(models.AbstractModel):
    _description = "SellerSupplierParty"
    _name = "ubl.23.sellersupplierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SellerSupplierParty"


class SellersItemIdentification(models.AbstractModel):
    _description = "SellersItemIdentification"
    _name = "ubl.23.sellersitemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SellersItemIdentification"


class StandardItemIdentification(models.AbstractModel):
    _description = "StandardItemIdentification"
    _name = "ubl.23.standarditemidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StandardItemIdentification"


class StandardPropertyIdentification(models.AbstractModel):
    _description = "StandardPropertyIdentification"
    _name = "ubl.23.standardpropertyidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StandardPropertyIdentification"


class SuggestedEvidence(models.AbstractModel):
    _description = "SuggestedEvidence"
    _name = "ubl.23.suggestedevidence"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SuggestedEvidence"

    ubl23_SuggestedEvidence_EvaluationCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.evaluationcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_SuggestedEvidence_TendererRequirementType_id = fields.Many2one(
        comodel_name="ubl.23.tendererrequirementtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SupplierParty(models.AbstractModel):
    _description = "SupplierParty"
    _name = "ubl.23.supplierparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplierParty"


class TemplateEvidence(models.AbstractModel):
    _description = "TemplateEvidence"
    _name = "ubl.23.templateevidence"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TemplateEvidence"

    ubl23_TemplateEvidence_TenderingCriterionPropertyType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionpropertytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TradeFinancing(models.AbstractModel):
    _description = "TradeFinancing"
    _name = "ubl.23.tradefinancing"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TradeFinancing"


class TransportMeans(models.AbstractModel):
    _description = "TransportMeans"
    _name = "ubl.23.transportmeans"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportMeans"

    ubl23_TransportMeans_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class VerifiedGrossMass(models.AbstractModel):
    _description = "VerifiedGrossMass"
    _name = "ubl.23.verifiedgrossmass"
    _inherit = "spec.mixin.ubl"
    _binding_type = "VerifiedGrossMass"


class WinningParty(models.AbstractModel):
    _description = "WinningParty"
    _name = "ubl.23.winningparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "WinningParty"

    ubl23_WinningParty_TenderResultType_id = fields.Many2one(
        comodel_name="ubl.23.tenderresulttype", xsd_implicit=True, ondelete="cascade"
    )


class CompletedTaskType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Completed Task. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the completion of a specific task in the
    tendering process.</ns1:Definition>
    <ns1:ObjectClass>Completed Task</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.completedtasktype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CompletedTaskType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AnnualAverageAmount = fields.Float(
        string="AnnualAverageAmount",
        xsd_type="AnnualAverageAmountType",
        digits=(
            16,
            4,
        ),
        help=("The average monetary amount of a task such as this completed " "task."),
    )

    ubl23_TotalTaskAmount = fields.Float(
        string="The actual total monetary amount of this completed task",
        xsd_type="TotalTaskAmountType",
        digits=(
            16,
            4,
        ),
        help="The actual total monetary amount of this completed task.",
    )

    ubl23_PartyCapacityAmount = fields.Float(
        string="PartyCapacityAmount",
        xsd_type="PartyCapacityAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "A monetary amount corresponding to the financial capacity of the "
            "party that carried out this completed task."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this completed task.", xsd_type="DescriptionType"
    )

    ubl23_EvidenceSupplied = fields.One2many(
        "ubl.23.evidencesupplied",
        "ubl23_EvidenceSupplied_CompletedTaskType_id",
        string="EvidenceSupplied",
        help=("The evidence justifying a designation of complete for this task."),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period in which this completed task was performed",
        help="The period in which this completed task was performed.",
    )

    ubl23_RecipientCustomerParty = fields.Many2one(
        comodel_name="ubl.23.recipientcustomerparty",
        string="The original customer for this completed task",
        help="The original customer for this completed task.",
    )


class EndorsementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Endorsement. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an endorsement of a
    document.</ns1:Definition>
    <ns1:ObjectClass>Endorsement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.endorsementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EndorsementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_DocumentID = fields.Char(
        string="An identifier for this endorsement.",
        xsd_required=True,
        xsd_type="DocumentIDType",
    )

    ubl23_ApprovalStatus = fields.Char(
        string="The status of this endorsement.",
        xsd_required=True,
        xsd_type="ApprovalStatusType",
    )

    ubl23_Remarks = fields.Char(
        string="Remarks provided by the endorsing party",
        xsd_type="RemarksType",
        help="Remarks provided by the endorsing party.",
    )

    ubl23_EndorserParty = fields.Many2one(
        comodel_name="ubl.23.endorserparty",
        string="The type of party providing this endorsement",
        xsd_required=True,
        help="The type of party providing this endorsement.",
    )


class EvaluationCriterionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Evaluation Criterion.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining the required criterion for a tenderer to be
    elligible in a tendering process. </ns1:Definition>
    <ns1:ObjectClass>Evaluation Criterion</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.evaluationcriteriontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvaluationCriterionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_EvaluationCriterionTypeCode = fields.Char(
        string="A code that specifies the criterion; it may be financial",
        xsd_type="EvaluationCriterionTypeCodeType",
        help=(
            "A code that specifies the criterion; it may be financial, "
            "technical or organizational."
        ),
    )

    ubl23_Description = fields.Char(
        string="A description of the criterion.", xsd_type="DescriptionType"
    )

    ubl23_ThresholdAmount = fields.Float(
        string="ThresholdAmount",
        xsd_type="ThresholdAmountType",
        digits=(
            16,
            4,
        ),
        help=("Estimated monetary amount of the threshold for the criterion."),
    )

    ubl23_ThresholdQuantity = fields.Float(
        string="Estimated quantity of the threshold for the criterion",
        xsd_type="ThresholdQuantityType",
        digits=(
            16,
            4,
        ),
        help="Estimated quantity of the threshold for the criterion.",
    )

    ubl23_ExpressionCode = fields.Char(
        string="ExpressionCode",
        xsd_type="ExpressionCodeType",
        help=(
            "A code identifying the expression that will be used to evaluate "
            "the criterion."
        ),
    )

    ubl23_Expression = fields.Char(
        string="The expression that will be used to evaluate the criterion",
        xsd_type="ExpressionType",
        help="The expression that will be used to evaluate the criterion.",
    )

    ubl23_DurationPeriod = fields.Many2one(
        comodel_name="ubl.23.durationperiod",
        string="DurationPeriod",
        help=("Describes the period for which the evaluation criterion is valid."),
    )

    ubl23_SuggestedEvidence = fields.One2many(
        "ubl.23.suggestedevidence",
        "ubl23_SuggestedEvidence_EvaluationCriterionType_id",
        string="SuggestedEvidence",
        help=(
            "Describes any evidences that should be used to satisfy the " "criterion. "
        ),
    )


class ItemPropertyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Property. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a specific property of an
    item.</ns1:Definition>
    <ns1:ObjectClass>Item Property</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itempropertytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemPropertyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this property of an item",
        xsd_type="IDType",
        help="An identifier for this property of an item.",
    )

    ubl23_Name = fields.Char(
        string="The name of this item property.", xsd_required=True, xsd_type="NameType"
    )

    ubl23_NameCode = fields.Char(
        string="The name of this item property",
        xsd_type="NameCodeType",
        help="The name of this item property, expressed as a code.",
    )

    ubl23_TestMethod = fields.Char(
        string="The method of testing the value of this item property",
        xsd_type="TestMethodType",
        help="The method of testing the value of this item property.",
    )

    ubl23_Value = fields.Char(
        string="The value of this item property",
        xsd_type="ValueType",
        help="The value of this item property, expressed as text.",
    )

    ubl23_ValueQuantity = fields.Float(
        string="The value of this item property (ValueQuantity)",
        xsd_type="ValueQuantityType",
        digits=(
            16,
            4,
        ),
        help="The value of this item property, expressed as a quantity.",
    )

    ubl23_ValueQualifier = fields.Char(
        string="Text qualifying the value of the property",
        xsd_type="ValueQualifierType",
        help="Text qualifying the value of the property.",
    )

    ubl23_ImportanceCode = fields.Char(
        string="ImportanceCode",
        xsd_type="ImportanceCodeType",
        help=(
            "A code signifying the importance of this property in using it to "
            "describe a related Item."
        ),
    )

    ubl23_ListValue = fields.Char(
        string="ListValue",
        xsd_type="ListValueType",
        help=(
            "The value expressed as a text in case the property is a value in "
            "a list. For example, a colour."
        ),
    )

    ubl23_UsabilityPeriod = fields.Many2one(
        comodel_name="ubl.23.usabilityperiod",
        string="The period during which this item property is valid",
        help="The period during which this item property is valid.",
    )

    ubl23_ItemPropertyGroup = fields.One2many(
        "ubl.23.itempropertygroup",
        "ubl23_ItemPropertyGroup_ItemPropertyType_id",
        string="ItemPropertyGroup",
        help=(
            "A description of the property group to which this item property "
            "belongs."
        ),
    )

    ubl23_RangeDimension = fields.Many2one(
        comodel_name="ubl.23.rangedimension",
        string="The range of values for the dimensions of this property",
        help="The range of values for the dimensions of this property.",
    )

    ubl23_ItemPropertyRange = fields.Many2one(
        comodel_name="ubl.23.itempropertyrange",
        string="A range of values for this item property",
        help="A range of values for this item property.",
    )

    ubl23_StandardPropertyIdentification = fields.Many2one(
        comodel_name="ubl.23.standardpropertyidentification",
        string="Identifying information for this property",
        help=(
            "Identifying information for this property, assigned according to "
            "a standard system."
        ),
    )

    ubl23_SubItemProperty = fields.One2many(
        "ubl.23.subitemproperty",
        "ubl23_SubItemProperty_ItemPropertyType_id",
        string="A property subsidiary to this property",
        help="A property subsidiary to this property.",
    )


class PaymentMeansType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Payment Means. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a means of payment.</ns1:Definition>
    <ns1:ObjectClass>Payment Means</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.paymentmeanstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentMeansType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this means of payment",
        xsd_type="IDType",
        help="An identifier for this means of payment.",
    )

    ubl23_PaymentMeansCode = fields.Char(
        string="A code signifying the type of this means of payment",
        xsd_required=True,
        xsd_type="PaymentMeansCodeType",
        help="A code signifying the type of this means of payment.",
    )

    ubl23_PaymentDueDate = fields.Date(
        string="The date on which payment is due for this means of payment",
        help="The date on which payment is due for this means of payment.",
    )

    ubl23_PaymentChannelCode = fields.Char(
        string="PaymentChannelCode",
        xsd_type="PaymentChannelCodeType",
        help=("A code signifying the payment channel for this means of payment."),
    )

    ubl23_InstructionID = fields.Char(
        string="An identifier for the payment instruction",
        xsd_type="InstructionIDType",
        help="An identifier for the payment instruction.",
    )

    ubl23_InstructionNote = fields.Char(
        string="Free",
        xsd_type="InstructionNoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_PaymentID = fields.Char(
        string="PaymentID",
        xsd_type="PaymentIDType",
        help=("An identifier for a payment made using this means of payment."),
    )

    ubl23_ChargeBearerCode = fields.Char(
        string="ChargeBearerCode",
        xsd_type="ChargeBearerCodeType",
        help=(
            "A code signifying which party or parties will assume the charges "
            "and fees associated with the payment using this payment means."
        ),
    )

    ubl23_ServiceLevelCode = fields.Char(
        string="ServiceLevelCode",
        xsd_type="ServiceLevelCodeType",
        help=(
            "A code signifying an agreed service level for the type of payment"
            " associated with this payment means."
        ),
    )

    ubl23_CardAccount = fields.One2many(
        "ubl.23.cardaccount",
        "ubl23_CardAccount_PaymentMeansType_id",
        string="A credit card",
        help=(
            "A credit card, debit card, or charge card account that "
            "constitutes this means of payment."
        ),
    )

    ubl23_PayerFinancialAccount = fields.Many2one(
        comodel_name="ubl.23.payerfinancialaccount",
        string="The payer's financial account.",
    )

    ubl23_PayeeFinancialAccount = fields.Many2one(
        comodel_name="ubl.23.payeefinancialaccount",
        string="The payee's financial account.",
    )

    ubl23_CreditAccount = fields.Many2one(
        comodel_name="ubl.23.creditaccount",
        string="A credit account associated with this means of payment",
        help="A credit account associated with this means of payment.",
    )

    ubl23_PaymentMandate = fields.Many2one(
        comodel_name="ubl.23.paymentmandate",
        string="The payment mandate associated with this means of payment",
        help="The payment mandate associated with this means of payment.",
    )

    ubl23_TradeFinancing = fields.Many2one(
        comodel_name="ubl.23.tradefinancing",
        string="TradeFinancing",
        help=("A trade finance agreement applicable to this means of payment."),
    )

    ubl23_RemittanceDocumentDistribution = fields.One2many(
        "ubl.23.remittancedocumentdistribution",
        "ubl23_RemittanceDocumentDistribution_PaymentMeansType_id",
        string="RemittanceDocumentDistribution",
        help=(
            "A person or entity who shall receive the remittance advice "
            "information about the payment associated with this payment means."
        ),
    )


class TendererRequirementType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tenderer Requirement.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an action or statement required of an
    economic operator participating in a tendering process.</ns1:Definition>
    <ns1:ObjectClass>Tenderer Requirement</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tendererrequirementtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererRequirementType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Name = fields.Char(
        string="A name of this tenderer requirement.", xsd_type="NameType"
    )

    ubl23_TendererRequirementTypeCode = fields.Char(
        string="A code signifying this requirement.",
        xsd_type="TendererRequirementTypeCodeType",
    )

    ubl23_Description = fields.Char(
        string="Text describing this requirement.", xsd_type="DescriptionType"
    )

    ubl23_LegalReference = fields.Char(
        string="The legal reference of the exclusion criterion",
        xsd_type="LegalReferenceType",
        help="The legal reference of the exclusion criterion.",
    )

    ubl23_SuggestedEvidence = fields.One2many(
        "ubl.23.suggestedevidence",
        "ubl23_SuggestedEvidence_TendererRequirementType_id",
        string="SuggestedEvidence",
        help=(
            "An item of evidence that should be submitted to satisfy this "
            "requirement."
        ),
    )


class TenderingCriterionPropertyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Criterion Property.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the criterion properties.</ns1:Definition>
    <ns1:ObjectClass>Tendering Criterion Property</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingcriterionpropertytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionPropertyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier to refer to the criterion property",
        xsd_type="IDType",
        help="An identifier to refer to the criterion property.",
    )

    ubl23_Name = fields.Char(
        string="The name of the criterion property.", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="A description of the criterion property",
        xsd_type="DescriptionType",
        help="A description of the criterion property.",
    )

    ubl23_TypeCode = fields.Char(
        string="A mutually agreed code signifying the type of the property",
        xsd_type="TypeCodeType",
        help="A mutually agreed code signifying the type of the property.",
    )

    ubl23_ValueDataTypeCode = fields.Char(
        string="ValueDataTypeCode",
        xsd_type="ValueDataTypeCodeType",
        help=(
            "The data type of the numeric value and any constraints on the "
            "data type metadata."
        ),
    )

    ubl23_ValueUnitCode = fields.Char(
        string="ValueUnitCode",
        xsd_type="ValueUnitCodeType",
        help=("The unit of measure of the numeric value as a quantity or " "measure."),
    )

    ubl23_ValueCurrencyCode = fields.Char(
        string="The currency of the numeric value as an amount",
        xsd_type="ValueCurrencyCodeType",
        help="The currency of the numeric value as an amount.",
    )

    ubl23_ExpectedAmount = fields.Float(
        string="ExpectedAmount",
        xsd_type="ExpectedAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The expected amount that the responder has to provide in the "
            "criterion response."
        ),
    )

    ubl23_ExpectedID = fields.Char(
        string="ExpectedID",
        xsd_type="ExpectedIDType",
        help=(
            "The expected identifier that the responder has to provide in the "
            "criterion response."
        ),
    )

    ubl23_ExpectedIndicator = fields.Boolean(
        string="The expected indicator",
        help=(
            "The expected indicator (true or false) that the responder has to "
            "provide in the criterion response."
        ),
    )

    ubl23_ExpectedCode = fields.Char(
        string="ExpectedCode",
        xsd_type="ExpectedCodeType",
        help=(
            "The expected code that the responder has to provide in the "
            "criterion response."
        ),
    )

    ubl23_ExpectedValueNumeric = fields.Float(
        string="ExpectedValueNumeric",
        xsd_type="ExpectedValueNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The expected value that the responder has to provide in the "
            "criterion response."
        ),
    )

    ubl23_ExpectedDescription = fields.Char(
        string="The description of the of the expected",
        xsd_type="ExpectedDescriptionType",
        help="The description of the of the expected ",
    )

    ubl23_ExpectedURI = fields.Char(
        string="ExpectedURI",
        xsd_type="ExpectedURIType",
        help=(
            "The expected URL that the responder has to provide in the "
            "criterion response."
        ),
    )

    ubl23_MaximumAmount = fields.Float(
        string="The maximum amount the response must have",
        xsd_type="MaximumAmountType",
        digits=(
            16,
            4,
        ),
        help="The maximum amount the response must have.",
    )

    ubl23_MinimumAmount = fields.Float(
        string="The minimum amount the response must have",
        xsd_type="MinimumAmountType",
        digits=(
            16,
            4,
        ),
        help="The minimum amount the response must have.",
    )

    ubl23_MaximumValueNumeric = fields.Float(
        string="The maximum value the response must have",
        xsd_type="MaximumValueNumericType",
        digits=(
            16,
            4,
        ),
        help="The maximum value the response must have.",
    )

    ubl23_MinimumValueNumeric = fields.Float(
        string="The minimum value the response must have",
        xsd_type="MinimumValueNumericType",
        digits=(
            16,
            4,
        ),
        help="The minimum value the response must have.",
    )

    ubl23_MaximumQuantity = fields.Float(
        string="The maximum quantity value the response must have",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The maximum quantity value the response must have.",
    )

    ubl23_MinimumQuantity = fields.Float(
        string="The minimum quantity value the response must have",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The minimum quantity value the response must have.",
    )

    ubl23_TranslationTypeCode = fields.Char(
        string="TranslationTypeCode",
        xsd_type="TranslationTypeCodeType",
        help=(
            "The type of Transation that the requirement shall be translated "
            "for example certified translation"
        ),
    )

    ubl23_CertificationLevelDescription = fields.Char(
        string="The description of the level of the expected certification",
        xsd_type="CertificationLevelDescriptionType",
    )

    ubl23_CopyQualityTypeCode = fields.Char(
        string="The type of Copy quality",
        xsd_type="CopyQualityTypeCodeType",
        help="The type of Copy quality, expressed as a code.",
    )

    ubl23_ApplicablePeriod = fields.One2many(
        "ubl.23.applicableperiod",
        "ubl23_ApplicablePeriod_TenderingCriterionPropertyType_id",
        string="The period to which this criterion property shall apply",
        help="The period to which this criterion property shall apply.",
    )

    ubl23_TemplateEvidence = fields.One2many(
        "ubl.23.templateevidence",
        "ubl23_TemplateEvidence_TenderingCriterionPropertyType_id",
        string="TemplateEvidence",
        help=("An evidence that can be used to meet this criterion property."),
    )


class TenderingProcessType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Process. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the process of a formal offer and response
    to execute work or supply goods at a stated price.</ns1:Definition>
    <ns1:ObjectClass>Tendering Process</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingprocesstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingProcessType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this tendering process",
        xsd_type="IDType",
        help="An identifier for this tendering process.",
    )

    ubl23_OriginalContractingSystemID = fields.Char(
        string="When reopening a tendering process",
        xsd_type="OriginalContractingSystemIDType",
        help=(
            "When reopening a tendering process, the identifier of the "
            "original framework agreement or dynamic purchasing system."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the tendering process",
        xsd_type="DescriptionType",
        help="Text describing the tendering process.",
    )

    ubl23_NegotiationDescription = fields.Char(
        string="NegotiationDescription",
        xsd_type="NegotiationDescriptionType",
        help=(
            "Text describing the negotiation to be followed during the "
            "tendering process."
        ),
    )

    ubl23_ProcedureCode = fields.Char(
        string="A code signifying the type of this tendering procedure",
        xsd_type="ProcedureCodeType",
        help="A code signifying the type of this tendering procedure.",
    )

    ubl23_UrgencyCode = fields.Char(
        string="A code signifying the urgency of this tendering process",
        xsd_type="UrgencyCodeType",
        help="A code signifying the urgency of this tendering process.",
    )

    ubl23_ExpenseCode = fields.Char(
        string="ExpenseCode",
        xsd_type="ExpenseCodeType",
        help=("A code signifying the type of expense for this tendering process."),
    )

    ubl23_PartPresentationCode = fields.Char(
        string="PartPresentationCode",
        xsd_type="PartPresentationCodeType",
        help=(
            "A code signifying the type of presentation of tenders required "
            "(e.g., one lot, multiple lots, or all the lots)."
        ),
    )

    ubl23_ContractingSystemCode = fields.Char(
        string="A code signifying the type of contracting system",
        xsd_type="ContractingSystemCodeType",
        help=(
            "A code signifying the type of contracting system (e.g., framework"
            " agreement, dynamic purchasing system). If the procedure is "
            "individual (nonrepetitive), this code should be omitted."
        ),
    )

    ubl23_SubmissionMethodCode = fields.Char(
        string="SubmissionMethodCode",
        xsd_type="SubmissionMethodCodeType",
        help=("A code signifying the method to be followed in submitting " "tenders."),
    )

    ubl23_CandidateReductionConstraintIndicator = fields.Boolean(
        string="CandidateReductionConstraintIndicator",
        help=(
            "An indicator that the number of candidates participating in this "
            "process has been reduced (true) or not (false)."
        ),
    )

    ubl23_GovernmentAgreementConstraintIndicator = fields.Boolean(
        string="GovernmentAgreementConstraintIndicator",
        help=(
            "An indicator that the project associated with this tendering "
            "process is constrained by a government procurement agreement "
            "(true) or not (false)."
        ),
    )

    ubl23_AccessToolsURI = fields.Char(
        string="AccessToolsURI",
        xsd_type="AccessToolsURIType",
        help=(
            "The URI where the tools for electronic communication related with"
            " the tendering process can be found."
        ),
    )

    ubl23_TerminatedIndicator = fields.Boolean(
        string="An indicator that the competition launched is terminated",
        help="An indicator that the competition launched is terminated.",
    )

    ubl23_DocumentAvailabilityPeriod = fields.Many2one(
        comodel_name="ubl.23.documentavailabilityperiod",
        string="DocumentAvailabilityPeriod",
        help=(
            "The period during which documents relating to this tendering "
            "process must be completed."
        ),
    )

    ubl23_TenderSubmissionDeadlinePeriod = fields.Many2one(
        comodel_name="ubl.23.tendersubmissiondeadlineperiod",
        string="The period during which tenders must be delivered",
        help="The period during which tenders must be delivered.",
    )

    ubl23_InvitationSubmissionPeriod = fields.Many2one(
        comodel_name="ubl.23.invitationsubmissionperiod",
        string="InvitationSubmissionPeriod",
        help=(
            "The period during which invitations to tender must be completed "
            "and delivered."
        ),
    )

    ubl23_ParticipationInvitationPeriod = fields.Many2one(
        comodel_name="ubl.23.participationinvitationperiod",
        string="ParticipationInvitationPeriod",
        help=("The period during which the invitation to participate must be " "sent."),
    )

    ubl23_ParticipationRequestReceptionPeriod = fields.Many2one(
        comodel_name="ubl.23.participationrequestreceptionperiod",
        string="ParticipationRequestReceptionPeriod",
        help=(
            "The period during which requests for participation must be "
            "completed and delivered."
        ),
    )

    ubl23_AdditionalInformationRequestPeriod = fields.Many2one(
        comodel_name="ubl.23.additionalinformationrequestperiod",
        string="AdditionalInformationRequestPeriod",
        help=(
            "The period during which additional information about the "
            "procurement can be requested."
        ),
    )

    ubl23_NoticeDocumentReference = fields.One2many(
        "ubl.23.noticedocumentreference",
        "ubl23_NoticeDocumentReference_TenderingProcessType_id",
        string="NoticeDocumentReference",
        help=("A reference to a notice pertaining to this tendering process."),
    )

    ubl23_AdditionalDocumentReference = fields.One2many(
        "ubl.23.additionaldocumentreference",
        "ubl23_AdditionalDocumentReference_TenderingProcessType_id",
        string="A reference to an additional document",
        help="A reference to an additional document.",
    )

    ubl23_ProcessJustification = fields.One2many(
        "ubl.23.processjustification",
        "ubl23_ProcessJustification_TenderingProcessType_id",
        string="ProcessJustification",
        help="A justification for the selection of this tendering process.",
    )

    ubl23_EconomicOperatorShortList = fields.One2many(
        "ubl.23.economicoperatorshortlist",
        "ubl23_EconomicOperatorShortList_TenderingProcessType_id",
        string="EconomicOperatorShortList",
        help="A set of criteria used to create a short list of candidates.",
    )

    ubl23_OpenTenderEvent = fields.One2many(
        "ubl.23.opentenderevent",
        "ubl23_OpenTenderEvent_TenderingProcessType_id",
        string="OpenTenderEvent",
        help=(
            "Textual description of the legal form required for potential " "tenderers."
        ),
    )

    ubl23_AuctionTerms = fields.Many2one(
        comodel_name="ubl.23.auctionterms",
        string="AuctionTerms",
        help=(
            "The terms to be fulfilled by tenderers if an auction is to be "
            "executed before the awarding of a tender."
        ),
    )

    ubl23_FrameworkAgreement = fields.Many2one(
        comodel_name="ubl.23.frameworkagreement",
        string="A tendering framework agreement.",
    )

    ubl23_ContractingSystem = fields.One2many(
        "ubl.23.contractingsystem",
        "ubl23_ContractingSystem_TenderingProcessType_id",
        string="A reference to a contracting system",
        help=(
            "A reference to a contracting system. Only when the procedure is "
            "repetitive."
        ),
    )


class AdditionalItemProperty(models.AbstractModel):
    _description = "AdditionalItemProperty"
    _name = "ubl.23.additionalitemproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalItemProperty"

    ubl23_AdditionalItemProperty_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AdditionalItemProperty_ItemInstanceType_id = fields.Many2one(
        comodel_name="ubl.23.iteminstancetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AdditionalItemProperty_LotIdentificationType_id = fields.Many2one(
        comodel_name="ubl.23.lotidentificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class CompletedTask(models.AbstractModel):
    _description = "CompletedTask"
    _name = "ubl.23.completedtask"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CompletedTask"

    ubl23_CompletedTask_QualifyingPartyType_id = fields.Many2one(
        comodel_name="ubl.23.qualifyingpartytype", xsd_implicit=True, ondelete="cascade"
    )


class EmbassyEndorsement(models.AbstractModel):
    _description = "EmbassyEndorsement"
    _name = "ubl.23.embassyendorsement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EmbassyEndorsement"


class Endorsement(models.AbstractModel):
    _description = "Endorsement"
    _name = "ubl.23.endorsement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Endorsement"


class EvaluationCriterion(models.AbstractModel):
    _description = "EvaluationCriterion"
    _name = "ubl.23.evaluationcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EvaluationCriterion"


class FinancialEvaluationCriterion(models.AbstractModel):
    _description = "FinancialEvaluationCriterion"
    _name = "ubl.23.financialevaluationcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinancialEvaluationCriterion"

    ubl23_FinancialEvaluationCriterion_TendererQualificationRequestType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tendererqualificationrequesttype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class InsuranceEndorsement(models.AbstractModel):
    _description = "InsuranceEndorsement"
    _name = "ubl.23.insuranceendorsement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InsuranceEndorsement"


class IssuerEndorsement(models.AbstractModel):
    _description = "IssuerEndorsement"
    _name = "ubl.23.issuerendorsement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "IssuerEndorsement"


class ItemProperty(models.AbstractModel):
    _description = "ItemProperty"
    _name = "ubl.23.itemproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemProperty"


class KeywordItemProperty(models.AbstractModel):
    _description = "KeywordItemProperty"
    _name = "ubl.23.keyworditemproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "KeywordItemProperty"

    ubl23_KeywordItemProperty_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )


class PaymentMeans(models.AbstractModel):
    _description = "PaymentMeans"
    _name = "ubl.23.paymentmeans"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentMeans"

    ubl23_PaymentMeans_AllowanceChargeType_id = fields.Many2one(
        comodel_name="ubl.23.allowancechargetype", xsd_implicit=True, ondelete="cascade"
    )


class SpecificTendererRequirement(models.AbstractModel):
    _description = "SpecificTendererRequirement"
    _name = "ubl.23.specifictendererrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SpecificTendererRequirement"

    ubl23_SpecificTendererRequirement_TendererQualificationRequestType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tendererqualificationrequesttype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class SubItemProperty(models.AbstractModel):
    _description = "SubItemProperty"
    _name = "ubl.23.subitemproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubItemProperty"

    ubl23_SubItemProperty_ItemPropertyType_id = fields.Many2one(
        comodel_name="ubl.23.itempropertytype", xsd_implicit=True, ondelete="cascade"
    )


class TechnicalEvaluationCriterion(models.AbstractModel):
    _description = "TechnicalEvaluationCriterion"
    _name = "ubl.23.technicalevaluationcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TechnicalEvaluationCriterion"

    ubl23_TechnicalEvaluationCriterion_TendererQualificationRequestType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tendererqualificationrequesttype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class TendererRequirement(models.AbstractModel):
    _description = "TendererRequirement"
    _name = "ubl.23.tendererrequirement"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererRequirement"


class TenderingCriterionProperty(models.AbstractModel):
    _description = "TenderingCriterionProperty"
    _name = "ubl.23.tenderingcriterionproperty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionProperty"

    ubl23_TenderingCriterionProperty_TenderingCriterionPropertyGroupType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tenderingcriterionpropertygrouptype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class TenderingProcess(models.AbstractModel):
    _description = "TenderingProcess"
    _name = "ubl.23.tenderingprocess"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingProcess"


class AllowanceChargeType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Allowance Charge. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe information about a charge or discount as
    applied to a price component.</ns1:Definition>
    <ns1:ObjectClass>Allowance Charge</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.allowancechargetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AllowanceChargeType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this allowance or charge",
        xsd_type="IDType",
        help="An identifier for this allowance or charge.",
    )

    ubl23_ChargeIndicator = fields.Boolean(
        string="An indicator that this AllowanceCharge describes a charge",
        xsd_required=True,
        help=(
            "An indicator that this AllowanceCharge describes a charge (true) "
            "or a discount (false)."
        ),
    )

    ubl23_AllowanceChargeReasonCode = fields.Char(
        string="AllowanceChargeReasonCode",
        xsd_type="AllowanceChargeReasonCodeType",
        help=(
            "A mutually agreed code signifying the reason for this allowance "
            "or charge."
        ),
    )

    ubl23_AllowanceChargeReason = fields.Char(
        string="The reason for this allowance or charge",
        xsd_type="AllowanceChargeReasonType",
        help="The reason for this allowance or charge.",
    )

    ubl23_MultiplierFactorNumeric = fields.Float(
        string="MultiplierFactorNumeric",
        xsd_type="MultiplierFactorNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number by which the base amount is multiplied to calculate the "
            "actual amount of this allowance or charge."
        ),
    )

    ubl23_PrepaidIndicator = fields.Boolean(
        string="An indicator that this allowance or charge is prepaid",
        help=(
            "An indicator that this allowance or charge is prepaid (true) or "
            "not (false)."
        ),
    )

    ubl23_SequenceNumeric = fields.Float(
        string="SequenceNumeric",
        xsd_type="SequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number indicating the order of this allowance or charge in the "
            "sequence of calculations applied when there are multiple "
            "allowances or charges."
        ),
    )

    ubl23_Amount = fields.Monetary(
        string="Amount",
        xsd_required=True,
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help=("The monetary amount of this allowance or charge to be applied."),
    )

    ubl23_BaseAmount = fields.Float(
        string="BaseAmount",
        xsd_type="BaseAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount to which the multiplier factor is applied in "
            "calculating the amount of this allowance or charge."
        ),
    )

    ubl23_AccountingCostCode = fields.Char(
        string="AccountingCostCode",
        xsd_type="AccountingCostCodeType",
        help=(
            "The accounting cost centre used by the buyer to account for this "
            "allowance or charge, expressed as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The accounting cost centre used by the buyer to account for this "
            "allowance or charge, expressed as text."
        ),
    )

    ubl23_PerUnitAmount = fields.Float(
        string="PerUnitAmount",
        xsd_type="PerUnitAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The allowance or charge per item; the total allowance or charge "
            "is calculated by multiplying the per unit amount by the quantity "
            "of items, either at the level of the individual transaction line "
            "or for the total number of items in the document, depending on "
            "the context in which it appears."
        ),
    )

    ubl23_TaxCategory = fields.One2many(
        "ubl.23.taxcategory",
        "ubl23_TaxCategory_AllowanceChargeType_id",
        string="A tax category applicable to this allowance or charge",
        help="A tax category applicable to this allowance or charge.",
    )

    ubl23_TaxTotal = fields.Many2one(
        comodel_name="ubl.23.taxtotal",
        string="TaxTotal",
        help=("The total of all the taxes applicable to this allowance or " "charge."),
    )

    ubl23_PaymentMeans = fields.One2many(
        "ubl.23.paymentmeans",
        "ubl23_PaymentMeans_AllowanceChargeType_id",
        string="A means of payment for this allowance or charge",
        help="A means of payment for this allowance or charge.",
    )


class LotIdentificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Lot Identification. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for defining a lot identifier (the identifier of a set
    of item instances that would be used in case of a recall of that
    item).</ns1:Definition>
    <ns1:ObjectClass>Lot Identification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.lotidentificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotIdentificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LotNumberID = fields.Char(
        string="An identifier for the lot.", xsd_type="LotNumberIDType"
    )

    ubl23_ExpiryDate = fields.Date(string="The expiry date of the lot.")

    ubl23_AdditionalItemProperty = fields.One2many(
        "ubl.23.additionalitemproperty",
        "ubl23_AdditionalItemProperty_LotIdentificationType_id",
        string="An additional property of the lot.",
    )


class QualifyingPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Qualifying Party. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the distinctive features or characteristics
    qualifying an economic operator to be a party in a tendering process (e.g.,
    number of employees, number of operating units, type of business, technical
    and financial capabilities, completed projects).</ns1:Definition>
    <ns1:ObjectClass>Qualifying Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.qualifyingpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QualifyingPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ParticipationPercent = fields.Char(
        string="ParticipationPercent",
        xsd_type="ParticipationPercentType",
        help=(
            "The extent to which this party is expected to participate in the "
            "tendering process, expressed as a percentage."
        ),
    )

    ubl23_PersonalSituation = fields.Char(
        string="PersonalSituation",
        xsd_type="PersonalSituationType",
        help=("Text describing the personal situation of the qualifying party."),
    )

    ubl23_OperatingYearsQuantity = fields.Float(
        string="OperatingYearsQuantity",
        xsd_type="OperatingYearsQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of years that this qualifying party has been in " "operation."
        ),
    )

    ubl23_EmployeeQuantity = fields.Float(
        string="The number of people employed by this qualifying party",
        xsd_type="EmployeeQuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of people employed by this qualifying party.",
    )

    ubl23_BusinessClassificationEvidenceID = fields.Char(
        string="BusinessClassificationEvidenceID",
        xsd_type="BusinessClassificationEvidenceIDType",
        help=(
            "An identifier for an item of evidence to support the "
            "classification of this qualifying party."
        ),
    )

    ubl23_BusinessIdentityEvidenceID = fields.Char(
        string="BusinessIdentityEvidenceID",
        xsd_type="BusinessIdentityEvidenceIDType",
        help=(
            "An identifier for an item of evidence to support the business "
            "identity of this qualifying party."
        ),
    )

    ubl23_TendererRoleCode = fields.Char(
        string="A code stating the Tenderer Role.", xsd_type="TendererRoleCodeType"
    )

    ubl23_BusinessClassificationScheme = fields.Many2one(
        comodel_name="ubl.23.businesstypeificationscheme",
        string="The classification scheme used for the business profile",
        help="The classification scheme used for the business profile.",
    )

    ubl23_TechnicalCapability = fields.One2many(
        "ubl.23.technicalcapability",
        "ubl23_TechnicalCapability_QualifyingPartyType_id",
        string="A technical capability of this qualifying party",
        help="A technical capability of this qualifying party.",
    )

    ubl23_FinancialCapability = fields.One2many(
        "ubl.23.financialcapability",
        "ubl23_FinancialCapability_QualifyingPartyType_id",
        string="A financial capability of this qualifying party",
        help="A financial capability of this qualifying party.",
    )

    ubl23_CompletedTask = fields.One2many(
        "ubl.23.completedtask",
        "ubl23_CompletedTask_QualifyingPartyType_id",
        string="A former task completed by this qualifying party",
        help="A former task completed by this qualifying party.",
    )

    ubl23_Declaration = fields.One2many(
        "ubl.23.declaration",
        "ubl23_Declaration_QualifyingPartyType_id",
        string="A declaration by this qualifying party",
        help=(
            "A declaration by this qualifying party. of certain "
            "characteristics or capabilities in fulfilment of requirements "
            "specified in a call for tenders."
        ),
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party", string="The qualifying party itself."
    )

    ubl23_EconomicOperatorRole = fields.Many2one(
        comodel_name="ubl.23.economicoperatorrole",
        string="A class to describe the tenderer contracting role",
        help="A class to describe the tenderer contracting role.",
    )


class TendererQualificationRequestType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tenderer Qualification Request.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The evaluation that the Contracting Authority party requests to
    fulfill to the tenderers.</ns1:Definition>
    <ns1:ObjectClass>Tenderer Qualification Request</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tendererqualificationrequesttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererQualificationRequestType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_CompanyLegalFormCode = fields.Char(
        string="The legal status requested for potential tenderers",
        xsd_type="CompanyLegalFormCodeType",
        help=(
            "The legal status requested for potential tenderers, expressed as "
            "a code."
        ),
    )

    ubl23_CompanyLegalForm = fields.Char(
        string="CompanyLegalForm",
        xsd_type="CompanyLegalFormType",
        help=(
            "The legal status requested for potential tenderers, expressed as " "text"
        ),
    )

    ubl23_PersonalSituation = fields.Char(
        string="PersonalSituation",
        xsd_type="PersonalSituationType",
        help=(
            "Text describing the personal situation of the economic operators "
            "in this tendering process."
        ),
    )

    ubl23_OperatingYearsQuantity = fields.Float(
        string="OperatingYearsQuantity",
        xsd_type="OperatingYearsQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "Textual description of the legal form required for potential " "tenderers."
        ),
    )

    ubl23_EmployeeQuantity = fields.Float(
        string="EmployeeQuantity",
        xsd_type="EmployeeQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "Textual description of the legal form required for potential " "tenderers."
        ),
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=("Text describing the evaluation requirements for this tenderer."),
    )

    ubl23_RequiredBusinessClassificationScheme = fields.One2many(
        "ubl.23.requiredbusinesstypeificationscheme",
        "ubl23_RequiredBusinessClassificationScheme_TendererQualificationRequestType_id",
        string="A classification scheme for the business profile",
        help="A classification scheme for the business profile.",
    )

    ubl23_TechnicalEvaluationCriterion = fields.One2many(
        "ubl.23.technicalevaluationcriterion",
        "ubl23_TechnicalEvaluationCriterion_TendererQualificationRequestType_id",
        string="TechnicalEvaluationCriterion",
        help=(
            "A technical evaluation criterion required for an economic "
            "operator in a tendering process."
        ),
    )

    ubl23_FinancialEvaluationCriterion = fields.One2many(
        "ubl.23.financialevaluationcriterion",
        "ubl23_FinancialEvaluationCriterion_TendererQualificationRequestType_id",
        string="FinancialEvaluationCriterion",
        help=(
            "A financial evaluation criterion required for an economic "
            "operator in a tendering process."
        ),
    )

    ubl23_SpecificTendererRequirement = fields.One2many(
        "ubl.23.specifictendererrequirement",
        "ubl23_SpecificTendererRequirement_TendererQualificationRequestType_id",
        string="A requirement to be met by a tenderer",
        help="A requirement to be met by a tenderer.",
    )

    ubl23_EconomicOperatorRole = fields.One2many(
        "ubl.23.economicoperatorrole",
        "ubl23_EconomicOperatorRole_TendererQualificationRequestType_id",
        string="A class to describe the tenderer contracting role",
        help="A class to describe the tenderer contracting role.",
    )


class TenderingCriterionPropertyGroupType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Criterion Property Group.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a group of tendering
    criteria</ns1:Definition>
    <ns1:ObjectClass>Tendering Criterion Property Group</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingcriterionpropertygrouptype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionPropertyGroupType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the group of criteria",
        xsd_type="IDType",
        help="An identifier for the group of criteria.",
    )

    ubl23_Name = fields.Char(string="The name of the group.", xsd_type="NameType")

    ubl23_Description = fields.Char(
        string="The textual description for this group",
        xsd_type="DescriptionType",
        help="The textual description for this group.",
    )

    ubl23_PropertyGroupTypeCode = fields.Char(
        string="A code signifying the type of the property group",
        xsd_type="PropertyGroupTypeCodeType",
    )

    ubl23_FulfilmentIndicator = fields.Boolean(
        string="FulfilmentIndicator",
        help=("An indication that this group of criteria have been fulfilled."),
    )

    ubl23_FulfilmentIndicatorTypeCode = fields.Char(
        string="FulfilmentIndicatorTypeCode",
        xsd_type="FulfilmentIndicatorTypeCodeType",
        help=("A code signifying how this group of criteria have been fulfilled."),
    )

    ubl23_TenderingCriterionProperty = fields.One2many(
        "ubl.23.tenderingcriterionproperty",
        "ubl23_TenderingCriterionProperty_TenderingCriterionPropertyGroupType_id",
        string="TenderingCriterionProperty",
        help=("All the criteria properties comprising the tendering criterion."),
    )

    ubl23_SubsidiaryTenderingCriterionPropertyGroup = fields.One2many(
        "ubl.23.subsidiarytenderingcriterionpropertygroup",
        "ubl23_SubsidiaryTenderingCriterionPropertyGroup_TenderingCriterionPropertyGroupType_id",
        string="SubsidiaryTenderingCriterionPropertyGroup",
        help=(
            "Subsidiary tendering criteria groups comprising this tendering "
            "criterion."
        ),
    )


class AdditionalQualifyingParty(models.AbstractModel):
    _description = "AdditionalQualifyingParty"
    _name = "ubl.23.additionalqualifyingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalQualifyingParty"

    ubl23_AdditionalQualifyingParty_TendererPartyQualificationType_id = fields.Many2one(
        comodel_name="ubl.23.tendererpartyqualificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AllowanceCharge(models.AbstractModel):
    _description = "AllowanceCharge"
    _name = "ubl.23.allowancecharge"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AllowanceCharge"

    ubl23_AllowanceCharge_BillingReferenceLineType_id = fields.Many2one(
        comodel_name="ubl.23.billingreferencelinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_AllowanceCharge_ConsumptionType_id = fields.Many2one(
        comodel_name="ubl.23.consumptiontype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_ConsumptionLineType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_ItemLocationQuantityType_id = fields.Many2one(
        comodel_name="ubl.23.itemlocationquantitytype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_AllowanceCharge_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_PriceType_id = fields.Many2one(
        comodel_name="ubl.23.pricetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_AllowanceCharge_TelecommunicationsServiceType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationsservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_AllowanceCharge_TelecommunicationsSupplyLineType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationssupplylinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ExtraAllowanceCharge(models.AbstractModel):
    _description = "ExtraAllowanceCharge"
    _name = "ubl.23.extraallowancecharge"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExtraAllowanceCharge"

    ubl23_ExtraAllowanceCharge_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class FreightAllowanceCharge(models.AbstractModel):
    _description = "FreightAllowanceCharge"
    _name = "ubl.23.freightallowancecharge"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FreightAllowanceCharge"

    ubl23_FreightAllowanceCharge_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_FreightAllowanceCharge_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_FreightAllowanceCharge_ShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.shipmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_FreightAllowanceCharge_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_FreightAllowanceCharge_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class LotIdentification(models.AbstractModel):
    _description = "LotIdentification"
    _name = "ubl.23.lotidentification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LotIdentification"


class MainQualifyingParty(models.AbstractModel):
    _description = "MainQualifyingParty"
    _name = "ubl.23.mainqualifyingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainQualifyingParty"


class QualifyingParty(models.AbstractModel):
    _description = "QualifyingParty"
    _name = "ubl.23.qualifyingparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QualifyingParty"

    ubl23_QualifyingParty_EconomicOperatorPartyType_id = fields.Many2one(
        comodel_name="ubl.23.economicoperatorpartytype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ServiceAllowanceCharge(models.AbstractModel):
    _description = "ServiceAllowanceCharge"
    _name = "ubl.23.serviceallowancecharge"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ServiceAllowanceCharge"

    ubl23_ServiceAllowanceCharge_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SubsidiaryTenderingCriterionPropertyGroup(models.AbstractModel):
    _description = "SubsidiaryTenderingCriterionPropertyGroup"
    _name = "ubl.23.subsidiarytenderingcriterionpropertygroup"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubsidiaryTenderingCriterionPropertyGroup"

    ubl23_SubsidiaryTenderingCriterionPropertyGroup_TenderingCriterionPropertyGroupType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriterionpropertygrouptype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TendererQualificationRequest(models.AbstractModel):
    _description = "TendererQualificationRequest"
    _name = "ubl.23.tendererqualificationrequest"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererQualificationRequest"

    ubl23_TendererQualificationRequest_TenderingTermsType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingtermstype", xsd_implicit=True, ondelete="cascade"
    )


class TenderingCriterionPropertyGroup(models.AbstractModel):
    _description = "TenderingCriterionPropertyGroup"
    _name = "ubl.23.tenderingcriterionpropertygroup"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionPropertyGroup"

    ubl23_TenderingCriterionPropertyGroup_TenderingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class BillingReferenceLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Billing Reference Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a transaction line in a
    billing document.</ns1:Definition>
    <ns1:ObjectClass>Billing Reference Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.billingreferencelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillingReferenceLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_required=True,
        xsd_type="IDType",
        help=("An identifier for this transaction line in a billing document."),
    )

    ubl23_Amount = fields.Monetary(
        string="The monetary amount of the transaction line",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help=(
            "The monetary amount of the transaction line, including any "
            "allowances and charges but excluding taxes."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_BillingReferenceLineType_id",
        string="An allowance or charge applicable to the transaction line",
        help="An allowance or charge applicable to the transaction line.",
    )


class DeliveryTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Delivery Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for describing the terms and conditions applying to the
    delivery of goods.</ns1:Definition>
    <ns1:ObjectClass>Delivery Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.deliverytermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this description of delivery terms",
        xsd_type="IDType",
        help="An identifier for this description of delivery terms.",
    )

    ubl23_SpecialTerms = fields.Char(
        string="SpecialTerms",
        xsd_type="SpecialTermsType",
        help=(
            "A description of any terms or conditions relating to the delivery"
            " items."
        ),
    )

    ubl23_LossRiskResponsibilityCode = fields.Char(
        string="LossRiskResponsibilityCode",
        xsd_type="LossRiskResponsibilityCodeType",
        help=(
            "A code that identifies one of various responsibilities for loss "
            "risk in the execution of the delivery."
        ),
    )

    ubl23_LossRisk = fields.Char(
        string="LossRisk",
        xsd_type="LossRiskType",
        help=(
            "A description of responsibility for risk of loss in execution of "
            "the delivery, expressed as text."
        ),
    )

    ubl23_Amount = fields.Monetary(
        string="The monetary amount covered by these delivery terms",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help="The monetary amount covered by these delivery terms.",
    )

    ubl23_DeliveryLocation = fields.Many2one(
        comodel_name="ubl.23.deliverylocation",
        string="The location for the contracted delivery",
        help="The location for the contracted delivery.",
    )

    ubl23_AllowanceCharge = fields.Many2one(
        comodel_name="ubl.23.allowancecharge",
        string="An allowance or charge covered by these delivery terms",
        help="An allowance or charge covered by these delivery terms.",
    )


class EconomicOperatorPartyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Economic Operator Party.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a potential contractor, supplier and
    service provider responding to a tender.</ns1:Definition>
    <ns1:ObjectClass>Economic Operator Party</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.economicoperatorpartytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorPartyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_QualifyingParty = fields.One2many(
        "ubl.23.qualifyingparty",
        "ubl23_QualifyingParty_EconomicOperatorPartyType_id",
        string="The party qualifying this economic operator",
        help="The party qualifying this economic operator.",
    )

    ubl23_EconomicOperatorRole = fields.Many2one(
        comodel_name="ubl.23.economicoperatorrole",
        string="The role of the party in a tender consortium",
        help="The role of the party in a tender consortium.",
    )

    ubl23_Party = fields.Many2one(
        comodel_name="ubl.23.party",
        string="Party",
        xsd_required=True,
        help=("The party information about the economic operator in a tender."),
    )


class ItemInstanceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Instance. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a specific, trackable instance of an
    item.</ns1:Definition>
    <ns1:ObjectClass>Item Instance</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.iteminstancetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemInstanceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ProductTraceID = fields.Char(
        string="An identifier used for tracing this item instance",
        xsd_type="ProductTraceIDType",
        help=(
            "An identifier used for tracing this item instance, such as the "
            "EPC number used in RFID."
        ),
    )

    ubl23_ManufactureDate = fields.Date(
        string="The date on which this item instance was manufactured",
        help="The date on which this item instance was manufactured.",
    )

    ubl23_BestBeforeDate = fields.Date(
        string="The date before which it is best to use this item instance",
        help="The date before which it is best to use this item instance.",
    )

    ubl23_RegistrationID = fields.Char(
        string="The registration identifier of this item instance",
        xsd_type="RegistrationIDType",
        help="The registration identifier of this item instance.",
    )

    ubl23_SerialID = fields.Char(
        string="The serial number of this item instance",
        xsd_type="SerialIDType",
        help="The serial number of this item instance.",
    )

    ubl23_AdditionalItemProperty = fields.One2many(
        "ubl.23.additionalitemproperty",
        "ubl23_AdditionalItemProperty_ItemInstanceType_id",
        string="An additional property of this item instance",
        help="An additional property of this item instance.",
    )

    ubl23_LotIdentification = fields.Many2one(
        comodel_name="ubl.23.lotidentification",
        string="The lot identifier of this item instance",
        help=(
            "The lot identifier of this item instance (the identifier that "
            "allows recall of the item if necessary)."
        ),
    )


class ItemLocationQuantityType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Location Quantity.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class for information about pricing structure, lead time, and
    location associated with an item.</ns1:Definition>
    <ns1:ObjectClass>Item Location Quantity</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itemlocationquantitytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemLocationQuantityType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LeadTimeMeasure = fields.Char(
        string="The lead time",
        xsd_type="LeadTimeMeasureType",
        help=(
            "The lead time, i.e., the time taken from the time at which an "
            "item is ordered to the time of its delivery."
        ),
    )

    ubl23_MinimumQuantity = fields.Float(
        string="MinimumQuantity",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum quantity that can be ordered to qualify for a "
            "specific price."
        ),
    )

    ubl23_MaximumQuantity = fields.Float(
        string="MaximumQuantity",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum quantity that can be ordered to qualify for a "
            "specific price."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="An indication that the transported item",
        help=(
            "An indication that the transported item, as delivered, in the "
            "stated quantity to the stated location, is subject to an "
            "international regulation concerning the carriage of dangerous "
            "goods (true) or not (false)."
        ),
    )

    ubl23_TradingRestrictions = fields.Char(
        string="TradingRestrictions",
        xsd_type="TradingRestrictionsType",
        help=(
            "Text describing trade restrictions on the quantity of this item "
            "or on the item itself."
        ),
    )

    ubl23_ApplicableTerritoryAddress = fields.One2many(
        "ubl.23.applicableterritoryaddress",
        "ubl23_ApplicableTerritoryAddress_ItemLocationQuantityType_id",
        string="The applicable sales territory.",
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="The price associated with the given location",
        help="The price associated with the given location.",
    )

    ubl23_DeliveryUnit = fields.One2many(
        "ubl.23.deliveryunit",
        "ubl23_DeliveryUnit_ItemLocationQuantityType_id",
        string="A delivery unit in which the item is located",
        help="A delivery unit in which the item is located.",
    )

    ubl23_ApplicableTaxCategory = fields.One2many(
        "ubl.23.applicabletaxcategory",
        "ubl23_ApplicableTaxCategory_ItemLocationQuantityType_id",
        string="A tax category applicable to this item location quantity",
        help="A tax category applicable to this item location quantity.",
    )

    ubl23_Package = fields.Many2one(
        comodel_name="ubl.23.package",
        string="The package to which this price applies",
        help="The package to which this price applies.",
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_ItemLocationQuantityType_id",
        string="AllowanceCharge",
        help=("An allowance or charge associated with this item location " "quantity."),
    )

    ubl23_DependentPriceReference = fields.Many2one(
        comodel_name="ubl.23.dependentpricereference",
        string="DependentPriceReference",
        help=(
            "The price of the item as a percentage of the price of some other " "item."
        ),
    )


class ShipmentStageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Shipment Stage. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe one stage of movement in a transport of
    goods.</ns1:Definition>
    <ns1:ObjectClass>Shipment Stage</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shipmentstagetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipmentStageType"

    ubl23_ShipmentStageType_ShipmentStageType_id = fields.Many2one(
        comodel_name="ubl.23.shipmentstagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this shipment stage",
        xsd_type="IDType",
        help="An identifier for this shipment stage.",
    )

    ubl23_ShipmentStageTypeCode = fields.Char(
        string="The type of shipment stage",
        xsd_type="ShipmentStageTypeCodeType",
        help="The type of shipment stage, expressed as a code.",
    )

    ubl23_ShipmentStageType = fields.Char(
        string="The type of shipment stage (ShipmentStageType)",
        xsd_type="ShipmentStageTypeType",
        help="The type of shipment stage, expressed as text.",
    )

    ubl23_TransportModeCode = fields.Char(
        string="TransportModeCode",
        xsd_type="TransportModeCodeType",
        help=(
            "A code signifying the method of transport used for this shipment " "stage."
        ),
    )

    ubl23_TransportMeansTypeCode = fields.Char(
        string="A code signifying the kind of transport means",
        xsd_type="TransportMeansTypeCodeType",
        help=(
            "A code signifying the kind of transport means (truck, vessel, "
            "etc.) used for this shipment stage."
        ),
    )

    ubl23_TransitDirectionCode = fields.Char(
        string="TransitDirectionCode",
        xsd_type="TransitDirectionCodeType",
        help=("A code signifying the direction of transit in this shipment " "stage."),
    )

    ubl23_PreCarriageIndicator = fields.Boolean(
        string="PreCarriageIndicator",
        help=(
            "An indicator that this stage takes place before the main carriage"
            " of the shipment (true) or not (false)."
        ),
    )

    ubl23_OnCarriageIndicator = fields.Boolean(
        string="OnCarriageIndicator",
        help=(
            "An indicator that this stage takes place after the main carriage "
            "of the shipment (true) or not (false)."
        ),
    )

    ubl23_CabotageIndicator = fields.Boolean(
        string="An indicator that cabotage applies for this shipment stage",
        help=(
            "An indicator that cabotage applies for this shipment stage (true)"
            " or not (false)."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="HazardousRiskIndicator",
        help=(
            "An indicator that the transported goods in this shipment stage "
            "are subject to an international regulation concerning the "
            "carriage of dangerous goods (true) or not (false)."
        ),
    )

    ubl23_EstimatedDeliveryDate = fields.Date(
        string="The estimated date of delivery in this shipment stage",
        help="The estimated date of delivery in this shipment stage.",
    )

    ubl23_RequiredDeliveryDate = fields.Date(
        string="RequiredDeliveryDate",
        help=("The delivery date required by the buyer in this shipment stage."),
    )

    ubl23_LoadingSequenceID = fields.Char(
        string="An identifier for the loading sequence",
        xsd_type="LoadingSequenceIDType",
        help=(
            "An identifier for the loading sequence (of consignments) "
            "associated with this shipment stage."
        ),
    )

    ubl23_SuccessiveSequenceID = fields.Char(
        string="Identifies the successive loading sequence",
        xsd_type="SuccessiveSequenceIDType",
        help=(
            "Identifies the successive loading sequence (of consignments) "
            "associated with a shipment stage."
        ),
    )

    ubl23_Instructions = fields.Char(
        string="Text of instructions applicable to a shipment stage",
        xsd_type="InstructionsType",
        help="Text of instructions applicable to a shipment stage.",
    )

    ubl23_DemurrageInstructions = fields.Char(
        string="Text of instructions relating to demurrage",
        xsd_type="DemurrageInstructionsType",
        help=(
            "Text of instructions relating to demurrage (the case in which a "
            "vessel is prevented from loading or discharging cargo within the "
            "stipulated laytime)."
        ),
    )

    ubl23_CrewQuantity = fields.Float(
        string="The total number of crew aboard a transport means",
        xsd_type="CrewQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of crew aboard a transport means.",
    )

    ubl23_PassengerQuantity = fields.Float(
        string="The total number of passengers aboard a transport means",
        xsd_type="PassengerQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of passengers aboard a transport means.",
    )

    ubl23_TransitPeriod = fields.Many2one(
        comodel_name="ubl.23.transitperiod",
        string="TransitPeriod",
        help=("The period during which this shipment stage actually took place."),
    )

    ubl23_CarrierParty = fields.One2many(
        "ubl.23.carrierparty",
        "ubl23_CarrierParty_ShipmentStageType_id",
        string="A carrier party responsible for this shipment stage",
        help="A carrier party responsible for this shipment stage.",
    )

    ubl23_TransportMeans = fields.Many2one(
        comodel_name="ubl.23.transportmeans",
        string="The means of transport used in this shipment stage",
        help="The means of transport used in this shipment stage.",
    )

    ubl23_LoadingPortLocation = fields.Many2one(
        comodel_name="ubl.23.loadingportlocation",
        string="The location of loading for a shipment stage",
        help="The location of loading for a shipment stage.",
    )

    ubl23_UnloadingPortLocation = fields.Many2one(
        comodel_name="ubl.23.unloadingportlocation",
        string="The location of unloading for a shipment stage",
        help="The location of unloading for a shipment stage.",
    )

    ubl23_TransshipPortLocation = fields.Many2one(
        comodel_name="ubl.23.transshipportlocation",
        string="The location of transshipment relating to a shipment stage",
        help="The location of transshipment relating to a shipment stage.",
    )

    ubl23_LoadingTransportEvent = fields.Many2one(
        comodel_name="ubl.23.loadingtransportevent",
        string="The loading of goods in this shipment stage",
        help="The loading of goods in this shipment stage.",
    )

    ubl23_ExaminationTransportEvent = fields.Many2one(
        comodel_name="ubl.23.examinationtransportevent",
        string="The examination of shipments in this shipment stage",
        help="The examination of shipments in this shipment stage.",
    )

    ubl23_AvailabilityTransportEvent = fields.Many2one(
        comodel_name="ubl.23.availabilitytransportevent",
        string="The making available of shipments in this shipment stage",
        help="The making available of shipments in this shipment stage.",
    )

    ubl23_ExportationTransportEvent = fields.Many2one(
        comodel_name="ubl.23.exportationtransportevent",
        string="The export event associated with this shipment stage",
        help="The export event associated with this shipment stage.",
    )

    ubl23_DischargeTransportEvent = fields.Many2one(
        comodel_name="ubl.23.dischargetransportevent",
        string="The discharge event associated with this shipment stage",
        help="The discharge event associated with this shipment stage.",
    )

    ubl23_WarehousingTransportEvent = fields.Many2one(
        comodel_name="ubl.23.warehousingtransportevent",
        string="The warehousing event associated with this shipment stage",
        help="The warehousing event associated with this shipment stage.",
    )

    ubl23_TakeoverTransportEvent = fields.Many2one(
        comodel_name="ubl.23.takeovertransportevent",
        string="TakeoverTransportEvent",
        help="The receiver's takeover of the goods in this shipment stage.",
    )

    ubl23_OptionalTakeoverTransportEvent = fields.Many2one(
        comodel_name="ubl.23.optionaltakeovertransportevent",
        string="The optional takeover of the goods in this shipment stage",
        help="The optional takeover of the goods in this shipment stage.",
    )

    ubl23_DropoffTransportEvent = fields.Many2one(
        comodel_name="ubl.23.dropofftransportevent",
        string="The dropping off of goods in this shipment stage",
        help="The dropping off of goods in this shipment stage.",
    )

    ubl23_ActualPickupTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualpickuptransportevent",
        string="The pickup of goods in this shipment stage",
        help="The pickup of goods in this shipment stage.",
    )

    ubl23_DeliveryTransportEvent = fields.Many2one(
        comodel_name="ubl.23.deliverytransportevent",
        string="The delivery of goods in this shipment stage",
        help="The delivery of goods in this shipment stage.",
    )

    ubl23_ReceiptTransportEvent = fields.Many2one(
        comodel_name="ubl.23.receipttransportevent",
        string="The receipt of goods in this shipment stage",
        help="The receipt of goods in this shipment stage.",
    )

    ubl23_StorageTransportEvent = fields.Many2one(
        comodel_name="ubl.23.storagetransportevent",
        string="The storage of goods in this shipment stage",
        help="The storage of goods in this shipment stage.",
    )

    ubl23_AcceptanceTransportEvent = fields.Many2one(
        comodel_name="ubl.23.acceptancetransportevent",
        string="The acceptance of goods in this shipment stage",
        help="The acceptance of goods in this shipment stage.",
    )

    ubl23_TerminalOperatorParty = fields.Many2one(
        comodel_name="ubl.23.terminaloperatorparty",
        string="A terminal operator associated with this shipment stage",
        help="A terminal operator associated with this shipment stage.",
    )

    ubl23_CustomsAgentParty = fields.Many2one(
        comodel_name="ubl.23.customsagentparty",
        string="A customs agent associated with this shipment stage",
        help="A customs agent associated with this shipment stage.",
    )

    ubl23_EstimatedTransitPeriod = fields.Many2one(
        comodel_name="ubl.23.estimatedtransitperiod",
        string="The estimated transit period of this shipment stage",
        help="The estimated transit period of this shipment stage.",
    )

    ubl23_FreightAllowanceCharge = fields.One2many(
        "ubl.23.freightallowancecharge",
        "ubl23_FreightAllowanceCharge_ShipmentStageType_id",
        string="A freight allowance charge for this shipment stage",
        help="A freight allowance charge for this shipment stage.",
    )

    ubl23_FreightChargeLocation = fields.Many2one(
        comodel_name="ubl.23.freightchargelocation",
        string="FreightChargeLocation",
        help=(
            "The location associated with a freight charge related to this "
            "shipment stage."
        ),
    )

    ubl23_DetentionTransportEvent = fields.One2many(
        "ubl.23.detentiontransportevent",
        "ubl23_DetentionTransportEvent_ShipmentStageType_id",
        string="DetentionTransportEvent",
        help=(
            "The detention of a transport means during loading and unloading "
            "operations."
        ),
    )

    ubl23_RequestedDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.requesteddeparturetransportevent",
        string="RequestedDepartureTransportEvent",
        help=(
            "The departure requested by the party requesting a transportation "
            "service."
        ),
    )

    ubl23_RequestedArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.requestedarrivaltransportevent",
        string="RequestedArrivalTransportEvent",
        help=(
            "The arrival requested by the party requesting a transportation " "service."
        ),
    )

    ubl23_RequestedWaypointTransportEvent = fields.One2many(
        "ubl.23.requestedwaypointtransportevent",
        "ubl23_RequestedWaypointTransportEvent_ShipmentStageType_id",
        string="RequestedWaypointTransportEvent",
        help=(
            "A waypoint requested by the party requesting a transportation " "service."
        ),
    )

    ubl23_PlannedDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.planneddeparturetransportevent",
        string="PlannedDepartureTransportEvent",
        help=(
            "The departure planned by the party providing a transportation " "service."
        ),
    )

    ubl23_PlannedArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.plannedarrivaltransportevent",
        string="PlannedArrivalTransportEvent",
        help=(
            "The arrival planned by the party providing a transportation " "service."
        ),
    )

    ubl23_PlannedWaypointTransportEvent = fields.One2many(
        "ubl.23.plannedwaypointtransportevent",
        "ubl23_PlannedWaypointTransportEvent_ShipmentStageType_id",
        string="PlannedWaypointTransportEvent",
        help=("A waypoint planned by the party providing a transportation " "service."),
    )

    ubl23_ActualDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualdeparturetransportevent",
        string="ActualDepartureTransportEvent",
        help=(
            "The actual departure from a specific location during a "
            "transportation service."
        ),
    )

    ubl23_ActualWaypointTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualwaypointtransportevent",
        string="ActualWaypointTransportEvent",
        help=("The location of an actual waypoint during a transportation " "service."),
    )

    ubl23_ActualArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualarrivaltransportevent",
        string="ActualArrivalTransportEvent",
        help=(
            "The actual arrival at a specific location during a transportation"
            " service."
        ),
    )

    ubl23_TransportEvent = fields.One2many(
        "ubl.23.transportevent",
        "ubl23_TransportEvent_ShipmentStageType_id",
        string="TransportEvent",
        help=("A significant occurrence in the course of this shipment of goods."),
    )

    ubl23_EstimatedDepartureTransportEvent = fields.Many2one(
        comodel_name="ubl.23.estimateddeparturetransportevent",
        string="EstimatedDepartureTransportEvent",
        help=(
            "Describes an estimated departure at a location during a transport"
            " service."
        ),
    )

    ubl23_EstimatedArrivalTransportEvent = fields.Many2one(
        comodel_name="ubl.23.estimatedarrivaltransportevent",
        string="EstimatedArrivalTransportEvent",
        help=(
            "Describes an estimated arrival at a location during a transport "
            "service."
        ),
    )

    ubl23_PassengerPerson = fields.One2many(
        "ubl.23.passengerperson",
        "ubl23_PassengerPerson_ShipmentStageType_id",
        string="PassengerPerson",
        help=(
            "A person who travels in a conveyance without participating in its"
            " operation."
        ),
    )

    ubl23_DriverPerson = fields.One2many(
        "ubl.23.driverperson",
        "ubl23_DriverPerson_ShipmentStageType_id",
        string="DriverPerson",
        help=("Describes a person responsible for driving the transport means."),
    )

    ubl23_ReportingPerson = fields.Many2one(
        comodel_name="ubl.23.reportingperson",
        string="ReportingPerson",
        help=(
            "Describes a person being responsible for providing the required "
            "administrative reporting relating to a transport."
        ),
    )

    ubl23_CrewMemberPerson = fields.One2many(
        "ubl.23.crewmemberperson",
        "ubl23_CrewMemberPerson_ShipmentStageType_id",
        string="A person operating or serving aboard a transport means",
        help="A person operating or serving aboard a transport means.",
    )

    ubl23_SecurityOfficerPerson = fields.Many2one(
        comodel_name="ubl.23.securityofficerperson",
        string="The person on board the vessel",
        help=(
            "The person on board the vessel, accountable to the master, "
            "designated by the company as responsible for the security of the "
            "ship, including implementation and maintenance of the ship "
            "security plan and for the liaison with the company security "
            "officer and the port facility security officers."
        ),
    )

    ubl23_MasterPerson = fields.Many2one(
        comodel_name="ubl.23.masterperson",
        string="MasterPerson",
        help=(
            "The person responsible for the ship's safe and efficient "
            "operation, including cargo operations, navigation, crew "
            "management and for ensuring that the vessel complies with local "
            "and international laws, as well as company and flag state "
            "policies."
        ),
    )

    ubl23_ShipsSurgeonPerson = fields.Many2one(
        comodel_name="ubl.23.shipssurgeonperson",
        string="ShipsSurgeonPerson",
        help=(
            "The person responsible for the health of the people aboard a ship"
            " at sea."
        ),
    )

    ubl23_DestinationPortCall = fields.Many2one(
        comodel_name="ubl.23.destinationportcall",
        string="A destination port call for this shipment stage",
        help="A destination port call for this shipment stage.",
    )

    ubl23_ShipStoreArticle = fields.One2many(
        "ubl.23.shipstorearticle",
        "ubl23_ShipStoreArticle_ShipmentStageType_id",
        string="The ship store articles for this shipment stage",
        help="The ship store articles for this shipment stage.",
    )

    ubl23_CrewPersonEffect = fields.One2many(
        "ubl.23.crewpersoneffect",
        "ubl23_CrewPersonEffect_ShipmentStageType_id",
        string="The crew person effects for this shipment stage",
        help="The crew person effects for this shipment stage.",
    )

    ubl23_MaritimeWaste = fields.One2many(
        "ubl.23.maritimewaste",
        "ubl23_MaritimeWaste_ShipmentStageType_id",
        string="The maritime waste for this shipment stage",
        help="The maritime waste for this shipment stage.",
    )

    ubl23_BallastWaterSummary = fields.Many2one(
        comodel_name="ubl.23.ballastwatersummary",
        string="A ballast water summary for this shipment stage",
        help="A ballast water summary for this shipment stage.",
    )

    ubl23_ISPSRequirements = fields.Many2one(
        comodel_name="ubl.23.ispsrequirements",
        string="The ISPS",
        help=(
            "The ISPS (International Ship and Port Facility Security Code) "
            "requirements for this shipment stage."
        ),
    )

    ubl23_MaritimeHealthDeclaration = fields.Many2one(
        comodel_name="ubl.23.maritimehealthdeclaration",
        string="A maritime declaration of health for this shipment stage",
        help="A maritime declaration of health for this shipment stage.",
    )


class TenderingCriterionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Criterion. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an item of criterion support for
    representations of capabilities or the ability to meet tendering
    requirements, which an economic operator must provide for acceptance into a
    tendering process.</ns1:Definition>
    <ns1:ObjectClass>Tendering Criterion</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingcriteriontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this item of criterion support",
        xsd_type="IDType",
        help="An identifier for this item of criterion support.",
    )

    ubl23_CriterionTypeCode = fields.Char(
        string="A code signifying the type of criterion",
        xsd_type="CriterionTypeCodeType",
        help="A code signifying the type of criterion.",
    )

    ubl23_Name = fields.Char(string="The name of the criterion.", xsd_type="NameType")

    ubl23_Description = fields.Char(
        string="The textual description for this criterion",
        xsd_type="DescriptionType",
        help="The textual description for this criterion.",
    )

    ubl23_WeightNumeric = fields.Float(
        string="WeightNumeric",
        xsd_type="WeightNumericType",
        digits=(
            16,
            4,
        ),
        help=("A weighting to provide for automatic scoring of the criterion."),
    )

    ubl23_FulfilmentIndicator = fields.Boolean(
        string="An indication that this criterion has been fulfilled",
        help="An indication that this criterion has been fulfilled.",
    )

    ubl23_FulfilmentIndicatorTypeCode = fields.Char(
        string="A code signifying how this criterion has been fulfilled",
        xsd_type="FulfilmentIndicatorTypeCodeType",
        help="A code signifying how this criterion has been fulfilled.\n",
    )

    ubl23_EvaluationMethodTypeCode = fields.Char(
        string="A code signifying the type of Evaluation",
        xsd_type="EvaluationMethodTypeCodeType",
        help="A code signifying the type of Evaluation.",
    )

    ubl23_WeightingConsiderationDescription = fields.Char(
        string="The textual description of the Weighting Description",
        xsd_type="WeightingConsiderationDescriptionType",
    )

    ubl23_ProcurementProjectLotReference = fields.One2many(
        "ubl.23.procurementprojectlotreference",
        "ubl23_ProcurementProjectLotReference_TenderingCriterionType_id",
        string="One or more lots to which the tendering criterion applies",
    )

    ubl23_CommodityClassification = fields.One2many(
        "ubl.23.commoditytypeification",
        "ubl23_CommodityClassification_TenderingCriterionType_id",
        string="One or more classification to which this criterion applies",
    )

    ubl23_SubTenderingCriterion = fields.One2many(
        "ubl.23.subtenderingcriterion",
        "ubl23_SubTenderingCriterion_TenderingCriterionType_id",
        string="One or more tendering subcriteria.",
    )

    ubl23_Legislation = fields.One2many(
        "ubl.23.legislation",
        "ubl23_Legislation_TenderingCriterionType_id",
        string="The legislation reference for the criterion",
        help="The legislation reference for the criterion.",
    )

    ubl23_TenderingCriterionPropertyGroup = fields.One2many(
        "ubl.23.tenderingcriterionpropertygroup",
        "ubl23_TenderingCriterionPropertyGroup_TenderingCriterionType_id",
        string="TenderingCriterionPropertyGroup",
        help=(
            "The sets of properties that can be used to fulfil the tendering "
            "criterion."
        ),
    )


class TenderingTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendering Terms. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe tendering terms for a tendering
    process.</ns1:Definition>
    <ns1:ObjectClass>Tendering Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderingtermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AwardingMethodTypeCode = fields.Char(
        string="AwardingMethodTypeCode",
        xsd_type="AwardingMethodTypeCodeType",
        help=(
            "A code signifying the awarding method in a tendering process "
            "(e.g., a method favoring the tender with the lowest price or the "
            "tender that is most economically advantageous)."
        ),
    )

    ubl23_PriceEvaluationCode = fields.Char(
        string="PriceEvaluationCode",
        xsd_type="PriceEvaluationCodeType",
        help=(
            "Textual description of the legal form required for potential " "tenderers."
        ),
    )

    ubl23_MaximumVariantQuantity = fields.Float(
        string="MaximumVariantQuantity",
        xsd_type="MaximumVariantQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "Maximum number of variants the tenderer is allowed to present for"
            " this tendering project."
        ),
    )

    ubl23_VariantConstraintIndicator = fields.Boolean(
        string="VariantConstraintIndicator",
        help=(
            "An indicator that variants are allowed and unconstrained in "
            "number (true) or not allowed (false)."
        ),
    )

    ubl23_AcceptedVariantsDescription = fields.Char(
        string="Text specifying the things for which variants are accepted",
        xsd_type="AcceptedVariantsDescriptionType",
        help="Text specifying the things for which variants are accepted.",
    )

    ubl23_VariantConstraintCode = fields.Char(
        string="VariantConstraintCode",
        xsd_type="VariantConstraintCodeType",
        help=(
            "A code signifying the modalities for a tenderer to submit "
            "variants of tenders."
        ),
    )

    ubl23_PriceRevisionFormulaDescription = fields.Char(
        string="Text describing the formula for price revision",
        xsd_type="PriceRevisionFormulaDescriptionType",
        help="Text describing the formula for price revision.",
    )

    ubl23_FundingProgramCode = fields.Char(
        string="The program that funds the tendering process",
        xsd_type="FundingProgramCodeType",
        help=(
            "The program that funds the tendering process (e.g., National, "
            "European), expressed as a code."
        ),
    )

    ubl23_FundingProgram = fields.Char(
        string="FundingProgram",
        xsd_type="FundingProgramType",
        help=(
            "The program that funds the tendering process (e.g., EU 6th "
            "Framework Program) expressed as text."
        ),
    )

    ubl23_MaximumAdvertisementAmount = fields.Float(
        string="MaximumAdvertisementAmount",
        xsd_type="MaximumAdvertisementAmountType",
        digits=(
            16,
            4,
        ),
        help=("The maximum advertised monetary value of the tendering process."),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_PaymentFrequencyCode = fields.Char(
        string="PaymentFrequencyCode",
        xsd_type="PaymentFrequencyCodeType",
        help=(
            "A code signifying the frequency of payment in the contract "
            "associated with the tendering process."
        ),
    )

    ubl23_EconomicOperatorRegistryURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="EconomicOperatorRegistryURIType",
        help=(
            "The Uniform Resource Identifier (URI) of an electronic registry "
            "of economic operators."
        ),
    )

    ubl23_RequiredCurriculaIndicator = fields.Boolean(
        string="RequiredCurriculaIndicator",
        help=(
            "An indicator that tenderers are required to provide a curriculum "
            "vitae for each participant in the project (true) or are not so "
            "required (false)."
        ),
    )

    ubl23_RequiredCurriculaCode = fields.Char(
        string="RequiredCurriculaCode",
        xsd_type="RequiredCurriculaCodeType",
        help=(
            "A code signifying the conditions applying for tenderers to "
            "provide a curriculum vitae."
        ),
    )

    ubl23_OtherConditionsIndicator = fields.Boolean(
        string="Indicates whether other conditions exist",
        help=(
            "Indicates whether other conditions exist (true) or not (false). "
            "If the indicator is true, the description may be provided."
        ),
    )

    ubl23_RecurringProcurementIndicator = fields.Boolean(
        string="Indicates whether the procurement is recurring",
        help=(
            "Indicates whether the procurement is recurring (true) or not " "(false)."
        ),
    )

    ubl23_RecurringProcurementDescription = fields.Char(
        string="Any additional information about recurrence",
        xsd_type="RecurringProcurementDescriptionType",
        help=(
            "Any additional information about recurrence (e.g. estimated " "timing)."
        ),
    )

    ubl23_EstimatedTimingFurtherPublication = fields.Char(
        string="EstimatedTimingFurtherPublication",
        xsd_type="EstimatedTimingFurtherPublicationType",
        help=(
            "The description of the estimated timing for further notices to be"
            " published."
        ),
    )

    ubl23_AdditionalConditions = fields.Char(
        string="Other existing conditions.", xsd_type="AdditionalConditionsType"
    )

    ubl23_LatestSecurityClearanceDate = fields.Date(
        string="LatestSecurityClearanceDate",
        help=(
            "The end date until which the candidates can obtain the necessary "
            "level of security clearance."
        ),
    )

    ubl23_DocumentationFeeAmount = fields.Float(
        string="DocumentationFeeAmount",
        xsd_type="DocumentationFeeAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount to be paid to obtain the contract documents and "
            "additional documentation."
        ),
    )

    ubl23_MultipleTendersCode = fields.Char(
        string="MultipleTendersCode",
        xsd_type="MultipleTendersCodeType",
        help=(
            "A code signifying whether a tenderer is allowed to submit "
            "multiple tenders."
        ),
    )

    ubl23_PenaltyClause = fields.One2many(
        "ubl.23.penaltyclause",
        "ubl23_PenaltyClause_TenderingTermsType_id",
        string="The penalty clauses",
    )

    ubl23_RequiredFinancialGuarantee = fields.One2many(
        "ubl.23.requiredfinancialguarantee",
        "ubl23_RequiredFinancialGuarantee_TenderingTermsType_id",
        string="RequiredFinancialGuarantee",
        help=(
            "A financial guarantee of a tenderer or bid submitter's actual "
            "entry into a contract in the event that it is the successful "
            "bidder."
        ),
    )

    ubl23_ProcurementLegislationDocumentReference = fields.One2many(
        "ubl.23.procurementlegislationdocumentreference",
        "ubl23_ProcurementLegislationDocumentReference_TenderingTermsType_id",
        string="ProcurementLegislationDocumentReference",
        help=(
            "A reference to a document providing references to procurement "
            "legislation applicable to the tendering process."
        ),
    )

    ubl23_FiscalLegislationDocumentReference = fields.One2many(
        "ubl.23.fiscallegislationdocumentreference",
        "ubl23_FiscalLegislationDocumentReference_TenderingTermsType_id",
        string="FiscalLegislationDocumentReference",
        help=(
            "A reference to a document providing references to fiscal "
            "legislation applicable to the tendering process."
        ),
    )

    ubl23_EnvironmentalLegislationDocumentReference = fields.One2many(
        "ubl.23.environmentallegislationdocumentreference",
        "ubl23_EnvironmentalLegislationDocumentReference_TenderingTermsType_id",
        string="EnvironmentalLegislationDocumentReference",
        help=(
            "A reference to a document providing references to environmental "
            "legislation applicable to the tendering process."
        ),
    )

    ubl23_EmploymentLegislationDocumentReference = fields.One2many(
        "ubl.23.employmentlegislationdocumentreference",
        "ubl23_EmploymentLegislationDocumentReference_TenderingTermsType_id",
        string="EmploymentLegislationDocumentReference",
        help=(
            "A reference to a document providing references to employment "
            "legislation applicable to the tendering process."
        ),
    )

    ubl23_ContractualDocumentReference = fields.One2many(
        "ubl.23.contractualdocumentreference",
        "ubl23_ContractualDocumentReference_TenderingTermsType_id",
        string="ContractualDocumentReference",
        help=(
            "A reference to a document that will become part of the awarded "
            "contract."
        ),
    )

    ubl23_CallForTendersDocumentReference = fields.One2many(
        "ubl.23.callfortendersdocumentreference",
        "ubl23_CallForTendersDocumentReference_TenderingTermsType_id",
        string="CallForTendersDocumentReference",
        help=(
            "A reference to a Call for Tender associated with these tendering " "terms."
        ),
    )

    ubl23_WarrantyValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.warrantyvalidityperiod",
        string="The period during which a warranty for work",
        help=(
            "The period during which a warranty for work, service, or goods "
            "associated with these tendering terms is valid."
        ),
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_TenderingTermsType_id",
        string="PaymentTerms",
        help=(
            "A specification of payment terms associated with the tendering " "process."
        ),
    )

    ubl23_TendererQualificationRequest = fields.One2many(
        "ubl.23.tendererqualificationrequest",
        "ubl23_TendererQualificationRequest_TenderingTermsType_id",
        string="TendererQualificationRequest",
        help=(
            "Required set of qualifications for a tenderer in this tendering "
            "process."
        ),
    )

    ubl23_AllowedSubcontractTerms = fields.One2many(
        "ubl.23.allowedsubcontractterms",
        "ubl23_AllowedSubcontractTerms_TenderingTermsType_id",
        string="Subcontract terms for the tendering process",
        help="Subcontract terms for the tendering process.",
    )

    ubl23_TenderPreparation = fields.One2many(
        "ubl.23.tenderpreparation",
        "ubl23_TenderPreparation_TenderingTermsType_id",
        string="TenderPreparation",
        help=("Directions for preparing a tender for the+D2057 tendering " "process."),
    )

    ubl23_ContractExecutionRequirement = fields.One2many(
        "ubl.23.contractexecutionrequirement",
        "ubl23_ContractExecutionRequirement_TenderingTermsType_id",
        string="ContractExecutionRequirement",
        help=(
            "A requirement relating to execution of the contract that will be "
            "awarded as a result of the tendering process."
        ),
    )

    ubl23_AwardingTerms = fields.Many2one(
        comodel_name="ubl.23.awardingterms",
        string="AwardingTerms",
        help=(
            "The terms in the tendering process for awarding the contract for "
            "a project."
        ),
    )

    ubl23_AdditionalInformationParty = fields.Many2one(
        comodel_name="ubl.23.additionalinformationparty",
        string="AdditionalInformationParty",
        help=(
            "A party that has additional information about the tendering " "process."
        ),
    )

    ubl23_DocumentProviderParty = fields.Many2one(
        comodel_name="ubl.23.documentproviderparty",
        string="DocumentProviderParty",
        help=(
            "The party that has the contract documents for the tendering " "process."
        ),
    )

    ubl23_TenderRecipientParty = fields.Many2one(
        comodel_name="ubl.23.tenderrecipientparty",
        string="The party to which tenders should be presented",
        help="The party to which tenders should be presented.",
    )

    ubl23_ContractResponsibleParty = fields.Many2one(
        comodel_name="ubl.23.contractresponsibleparty",
        string="The party responsible for the execution of the contract",
        help="The party responsible for the execution of the contract.",
    )

    ubl23_TenderEvaluationParty = fields.One2many(
        "ubl.23.tenderevaluationparty",
        "ubl23_TenderEvaluationParty_TenderingTermsType_id",
        string="TenderEvaluationParty",
        help=(
            "A party in the contracting authority responsible for evaluating "
            "tenders received."
        ),
    )

    ubl23_QualificationRequestRecipientParty = fields.Many2one(
        comodel_name="ubl.23.qualificationrequestrecipientparty",
        string="QualificationRequestRecipientParty",
        help=(
            "A party in the contracting authority responsible for receiving "
            "qualification requests."
        ),
    )

    ubl23_TenderValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.tendervalidityperiod",
        string="TenderValidityPeriod",
        help=(
            "The period during which tenders submitted for this tendering "
            "process must remain valid."
        ),
    )

    ubl23_ContractAcceptancePeriod = fields.Many2one(
        comodel_name="ubl.23.contractacceptanceperiod",
        string="ContractAcceptancePeriod",
        help=(
            "The period of time during which the contracting authority may "
            "accept a contract."
        ),
    )

    ubl23_AppealTerms = fields.Many2one(
        comodel_name="ubl.23.appealterms",
        string="AppealTerms",
        help=(
            "Information about the terms to present for an appeal against a "
            "tender award."
        ),
    )

    ubl23_Language = fields.One2many(
        "ubl.23.language",
        "ubl23_Language_TenderingTermsType_id",
        string="Language",
        help=("One of the default languages specified for the tendering process."),
    )

    ubl23_BudgetAccountLine = fields.One2many(
        "ubl.23.budgetaccountline",
        "ubl23_BudgetAccountLine_TenderingTermsType_id",
        string="BudgetAccountLine",
        help="A budget account line associated with the tendering process.",
    )

    ubl23_ReplacedNoticeDocumentReference = fields.Many2one(
        comodel_name="ubl.23.replacednoticedocumentreference",
        string="ReplacedNoticeDocumentReference",
        help=("A class defining a reference to the notice that is being " "replaced."),
    )

    ubl23_LotDistribution = fields.Many2one(
        comodel_name="ubl.23.lotdistribution",
        string="LotDistribution",
        help=(
            "List of specific ways to tender to the lots of the procurement " "project."
        ),
    )

    ubl23_PostAwardProcess = fields.Many2one(
        comodel_name="ubl.23.postawardprocess",
        string="Information about the post",
        help="Information about the post-award process.",
    )

    ubl23_EconomicOperatorShortList = fields.Many2one(
        comodel_name="ubl.23.economicoperatorshortlist",
        string="EconomicOperatorShortList",
        help="A set of criteria used to create a short list of candidates.",
    )

    ubl23_SecurityClearanceTerm = fields.One2many(
        "ubl.23.securityclearanceterm",
        "ubl23_SecurityClearanceTerm_TenderingTermsType_id",
        string="SecurityClearanceTerm",
        help=("Information about the terms to present for a security clearance."),
    )


class BillingReferenceLine(models.AbstractModel):
    _description = "BillingReferenceLine"
    _name = "ubl.23.billingreferenceline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillingReferenceLine"

    ubl23_BillingReferenceLine_BillingReferenceType_id = fields.Many2one(
        comodel_name="ubl.23.billingreferencetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class DeliveryTerms(models.AbstractModel):
    _description = "DeliveryTerms"
    _name = "ubl.23.deliveryterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryTerms"

    ubl23_DeliveryTerms_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DeliveryTerms_DeliveryType_id = fields.Many2one(
        comodel_name="ubl.23.deliverytype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_DeliveryTerms_TransportExecutionTermsType_id = fields.Many2one(
        comodel_name="ubl.23.transportexecutiontermstype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class EconomicOperatorParty(models.AbstractModel):
    _description = "EconomicOperatorParty"
    _name = "ubl.23.economicoperatorparty"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EconomicOperatorParty"


class ItemInstance(models.AbstractModel):
    _description = "ItemInstance"
    _name = "ubl.23.iteminstance"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemInstance"

    ubl23_ItemInstance_ItemType_id = fields.Many2one(
        comodel_name="ubl.23.itemtype", xsd_implicit=True, ondelete="cascade"
    )


class ItemLocationQuantity(models.AbstractModel):
    _description = "ItemLocationQuantity"
    _name = "ubl.23.itemlocationquantity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemLocationQuantity"


class MainCarriageShipmentStage(models.AbstractModel):
    _description = "MainCarriageShipmentStage"
    _name = "ubl.23.maincarriageshipmentstage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainCarriageShipmentStage"

    ubl23_MainCarriageShipmentStage_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class OfferedItemLocationQuantity(models.AbstractModel):
    _description = "OfferedItemLocationQuantity"
    _name = "ubl.23.offereditemlocationquantity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OfferedItemLocationQuantity"

    ubl23_OfferedItemLocationQuantity_TenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.tenderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class OnCarriageShipmentStage(models.AbstractModel):
    _description = "OnCarriageShipmentStage"
    _name = "ubl.23.oncarriageshipmentstage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OnCarriageShipmentStage"

    ubl23_OnCarriageShipmentStage_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class OriginalItemLocationQuantity(models.AbstractModel):
    _description = "OriginalItemLocationQuantity"
    _name = "ubl.23.originalitemlocationquantity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginalItemLocationQuantity"


class PreCarriageShipmentStage(models.AbstractModel):
    _description = "PreCarriageShipmentStage"
    _name = "ubl.23.precarriageshipmentstage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PreCarriageShipmentStage"

    ubl23_PreCarriageShipmentStage_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class RequiredItemLocationQuantity(models.AbstractModel):
    _description = "RequiredItemLocationQuantity"
    _name = "ubl.23.requireditemlocationquantity"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequiredItemLocationQuantity"

    ubl23_RequiredItemLocationQuantity_CatalogueLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_RequiredItemLocationQuantity_CataloguePricingUpdateLineType_id = (
        fields.Many2one(
            comodel_name="ubl.23.cataloguepricingupdatelinetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )
    ubl23_RequiredItemLocationQuantity_CatalogueRequestLineType_id = fields.Many2one(
        comodel_name="ubl.23.cataloguerequestlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_RequiredItemLocationQuantity_RequestForTenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.requestfortenderlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ShipmentStage(models.AbstractModel):
    _description = "ShipmentStage"
    _name = "ubl.23.shipmentstage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipmentStage"

    ubl23_ShipmentStage_ShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.shipmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_ShipmentStage_TransportationSegmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportationsegmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ShipmentStage_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SubTenderingCriterion(models.AbstractModel):
    _description = "SubTenderingCriterion"
    _name = "ubl.23.subtenderingcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubTenderingCriterion"

    ubl23_SubTenderingCriterion_TenderingCriterionType_id = fields.Many2one(
        comodel_name="ubl.23.tenderingcriteriontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TenderingCriterion(models.AbstractModel):
    _description = "TenderingCriterion"
    _name = "ubl.23.tenderingcriterion"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingCriterion"


class TenderingTerms(models.AbstractModel):
    _description = "TenderingTerms"
    _name = "ubl.23.tenderingterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderingTerms"


class BillingReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Billing Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a reference to a billing
    document.</ns1:Definition>
    <ns1:ObjectClass>Billing Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.billingreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillingReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_InvoiceDocumentReference = fields.Many2one(
        comodel_name="ubl.23.invoicedocumentreference",
        string="A reference to an invoice.",
    )

    ubl23_SelfBilledInvoiceDocumentReference = fields.Many2one(
        comodel_name="ubl.23.selfbilledinvoicedocumentreference",
        string="A reference to a self billed invoice",
        help="A reference to a self billed invoice.",
    )

    ubl23_CreditNoteDocumentReference = fields.Many2one(
        comodel_name="ubl.23.creditnotedocumentreference",
        string="A reference to a credit note.",
    )

    ubl23_SelfBilledCreditNoteDocumentReference = fields.Many2one(
        comodel_name="ubl.23.selfbilledcreditnotedocumentreference",
        string="A reference to a self billed credit note",
        help="A reference to a self billed credit note.",
    )

    ubl23_DebitNoteDocumentReference = fields.Many2one(
        comodel_name="ubl.23.debitnotedocumentreference",
        string="A reference to a debit note.",
    )

    ubl23_ReminderDocumentReference = fields.Many2one(
        comodel_name="ubl.23.reminderdocumentreference",
        string="A reference to a billing reminder.",
    )

    ubl23_AdditionalDocumentReference = fields.Many2one(
        comodel_name="ubl.23.additionaldocumentreference",
        string="A reference to an additional document",
        help="A reference to an additional document.",
    )

    ubl23_BillingReferenceLine = fields.One2many(
        "ubl.23.billingreferenceline",
        "ubl23_BillingReferenceLine_BillingReferenceType_id",
        string="A reference to a transaction line in the billing document",
        help="A reference to a transaction line in the billing document.",
    )


class CataloguePricingUpdateLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Catalogue Pricing Update Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line describing a pricing update to a
    catalogue line.</ns1:Definition>
    <ns1:ObjectClass>Catalogue Pricing Update Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.cataloguepricingupdatelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CataloguePricingUpdateLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the catalogue line to be updated",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the catalogue line to be updated.",
    )

    ubl23_ContractorCustomerParty = fields.Many2one(
        comodel_name="ubl.23.contractorcustomerparty",
        string="ContractorCustomerParty",
        help=(
            "The customer responsible for the contract associated with the "
            "catalogue line being updated."
        ),
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty",
        string="SellerSupplierParty",
        help=(
            "The seller/supplier responsible for the contract associated with "
            "the catalogue line being updated."
        ),
    )

    ubl23_RequiredItemLocationQuantity = fields.One2many(
        "ubl.23.requireditemlocationquantity",
        "ubl23_RequiredItemLocationQuantity_CataloguePricingUpdateLineType_id",
        string="RequiredItemLocationQuantity",
        help=(
            "Updated properties of the item in this catalogue line that are "
            "dependent on location and quantity."
        ),
    )


class ItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an item of trade. It includes a generic
    description applicable to all examples of the item together with optional
    subsidiary descriptions of any number of actual instances of the
    type.</ns1:Definition>
    <ns1:ObjectClass>Item</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>article, product, goods
    item</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this item.", xsd_type="DescriptionType"
    )

    ubl23_PackQuantity = fields.Float(
        string="PackQuantity",
        xsd_type="PackQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The unit packaging quantity; the number of subunits making up "
            "this item."
        ),
    )

    ubl23_PackSizeNumeric = fields.Float(
        string="The number of items in a pack of this item",
        xsd_type="PackSizeNumericType",
        digits=(
            16,
            4,
        ),
        help="The number of items in a pack of this item.",
    )

    ubl23_CatalogueIndicator = fields.Boolean(
        string="An indicator that this item was ordered from a catalogue",
        help=(
            "An indicator that this item was ordered from a catalogue (true) "
            "or not (false)."
        ),
    )

    ubl23_Name = fields.Char(
        string="A short name optionally given to this item",
        xsd_type="NameType",
        help=(
            "A short name optionally given to this item, such as a name from a"
            " catalogue, as distinct from a description."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="An indication that the transported item",
        help=(
            "An indication that the transported item, as delivered, is subject"
            " to an international regulation concerning the carriage of "
            "dangerous goods (true) or not (false)."
        ),
    )

    ubl23_AdditionalInformation = fields.Char(
        string="Further details regarding this item",
        xsd_type="AdditionalInformationType",
        help=(
            "Further details regarding this item (e.g., the URL of a relevant "
            "web page)."
        ),
    )

    ubl23_Keyword = fields.Char(
        string="A keyword",
        xsd_type="KeywordType",
        help=(
            "A keyword (search string) for this item, assigned by the seller "
            "party. Can also be a synonym for the name of the item."
        ),
    )

    ubl23_BrandName = fields.Char(
        string="A brand name of this item.", xsd_type="BrandNameType"
    )

    ubl23_ModelName = fields.Char(
        string="A model name of this item.", xsd_type="ModelNameType"
    )

    ubl23_BuyersItemIdentification = fields.Many2one(
        comodel_name="ubl.23.buyersitemidentification",
        string="Identifying information for this item",
        help=("Identifying information for this item, assigned by the buyer."),
    )

    ubl23_SellersItemIdentification = fields.Many2one(
        comodel_name="ubl.23.sellersitemidentification",
        string="SellersItemIdentification",
        help=("Identifying information for this item, assigned by the seller."),
    )

    ubl23_ManufacturersItemIdentification = fields.One2many(
        "ubl.23.manufacturersitemidentification",
        "ubl23_ManufacturersItemIdentification_ItemType_id",
        string="ManufacturersItemIdentification",
        help=(
            "Identifying information for this item, assigned by the " "manufacturer."
        ),
    )

    ubl23_StandardItemIdentification = fields.Many2one(
        comodel_name="ubl.23.standarditemidentification",
        string="StandardItemIdentification",
        help=(
            "Identifying information for this item, assigned according to a "
            "standard system."
        ),
    )

    ubl23_CatalogueItemIdentification = fields.Many2one(
        comodel_name="ubl.23.catalogueitemidentification",
        string="CatalogueItemIdentification",
        help=(
            "Identifying information for this item, assigned according to a "
            "cataloguing system."
        ),
    )

    ubl23_AdditionalItemIdentification = fields.One2many(
        "ubl.23.additionalitemidentification",
        "ubl23_AdditionalItemIdentification_ItemType_id",
        string="An additional identifier for this item",
        help="An additional identifier for this item.",
    )

    ubl23_CatalogueDocumentReference = fields.Many2one(
        comodel_name="ubl.23.cataloguedocumentreference",
        string="A reference to the catalogue in which this item appears",
        help="A reference to the catalogue in which this item appears.",
    )

    ubl23_ItemSpecificationDocumentReference = fields.One2many(
        "ubl.23.itemspecificationdocumentreference",
        "ubl23_ItemSpecificationDocumentReference_ItemType_id",
        string="A reference to a specification document for this item",
        help="A reference to a specification document for this item.",
    )

    ubl23_OriginCountry = fields.Many2one(
        comodel_name="ubl.23.origincountry",
        string="The country of origin of this item.",
    )

    ubl23_CommodityClassification = fields.One2many(
        "ubl.23.commoditytypeification",
        "ubl23_CommodityClassification_ItemType_id",
        string="CommodityClassification",
        help=(
            "A classification of this item according to a specific system for "
            "classifying commodities."
        ),
    )

    ubl23_TransactionConditions = fields.One2many(
        "ubl.23.transactionconditions",
        "ubl23_TransactionConditions_ItemType_id",
        string="A set of sales conditions applying to this item",
        help="A set of sales conditions applying to this item.",
    )

    ubl23_HazardousItem = fields.One2many(
        "ubl.23.hazardousitem",
        "ubl23_HazardousItem_ItemType_id",
        string="Information pertaining to this item as a hazardous item",
        help="Information pertaining to this item as a hazardous item.",
    )

    ubl23_ClassifiedTaxCategory = fields.One2many(
        "ubl.23.typeifiedtaxcategory",
        "ubl23_ClassifiedTaxCategory_ItemType_id",
        string="A tax category applicable to this item",
        help="A tax category applicable to this item.",
    )

    ubl23_AdditionalItemProperty = fields.One2many(
        "ubl.23.additionalitemproperty",
        "ubl23_AdditionalItemProperty_ItemType_id",
        string="An additional property of this item.",
    )

    ubl23_ManufacturerParty = fields.One2many(
        "ubl.23.manufacturerparty",
        "ubl23_ManufacturerParty_ItemType_id",
        string="The manufacturer of this item.",
    )

    ubl23_InformationContentProviderParty = fields.Many2one(
        comodel_name="ubl.23.informationcontentproviderparty",
        string="The party responsible for specification of this item",
        help="The party responsible for specification of this item.",
    )

    ubl23_OriginAddress = fields.One2many(
        "ubl.23.originaddress",
        "ubl23_OriginAddress_ItemType_id",
        string="A region",
        help="A region (not country) of origin of this item.",
    )

    ubl23_ItemInstance = fields.One2many(
        "ubl.23.iteminstance",
        "ubl23_ItemInstance_ItemType_id",
        string="A trackable",
        help="A trackable, unique instantiation of this item.",
    )

    ubl23_Certificate = fields.One2many(
        "ubl.23.certificate",
        "ubl23_Certificate_ItemType_id",
        string="A certificate associated with this item",
        help="A certificate associated with this item.",
    )

    ubl23_Dimension = fields.One2many(
        "ubl.23.dimension",
        "ubl23_Dimension_ItemType_id",
        string="One of the measurable dimensions",
        help=(
            "One of the measurable dimensions (length, mass, weight, or "
            "volume) of this item."
        ),
    )


class PricingReferenceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Pricing Reference. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A reference to the basis for pricing. This may be based on a
    catalogue or a quoted amount from a price list and include some alternative
    pricing conditions.</ns1:Definition>
    <ns1:ObjectClass>Pricing Reference</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.pricingreferencetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PricingReferenceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_OriginalItemLocationQuantity = fields.Many2one(
        comodel_name="ubl.23.originalitemlocationquantity",
        string="An original set of location",
        help=(
            "An original set of location-specific properties (e.g., price and "
            "quantity) associated with this item."
        ),
    )

    ubl23_AlternativeConditionPrice = fields.One2many(
        "ubl.23.alternativeconditionprice",
        "ubl23_AlternativeConditionPrice_PricingReferenceType_id",
        string="The price expressed in terms other than the actual price",
        help=(
            "The price expressed in terms other than the actual price, e.g., "
            "the list price v. the contracted price, or the price in bags v. "
            "the price in kilos, or the list price in bags v. the contracted "
            "price in kilos."
        ),
    )


class TransportExecutionTermsType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Execution Terms.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe terms applying to a transport execution
    plan.</ns1:Definition>
    <ns1:ObjectClass>Transport Execution Terms</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportexecutiontermstype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportExecutionTermsType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TransportUserSpecialTerms = fields.Char(
        string="TransportUserSpecialTerms",
        xsd_type="TransportUserSpecialTermsType",
        help=("Text describing special terms specified by the transport user."),
    )

    ubl23_TransportServiceProviderSpecialTerms = fields.Char(
        string="TransportServiceProviderSpecialTerms",
        xsd_type="TransportServiceProviderSpecialTermsType",
        help=(
            "Text describing special terms specified by the transport service "
            "provider."
        ),
    )

    ubl23_ChangeConditions = fields.Char(
        string="ChangeConditions",
        xsd_type="ChangeConditionsType",
        help=(
            "Text describing conditions applying to a change of these "
            "transport execution terms."
        ),
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_TransportExecutionTermsType_id",
        string="Payment terms associated with the transportation service",
        help="Payment terms associated with the transportation service.",
    )

    ubl23_DeliveryTerms = fields.One2many(
        "ubl.23.deliveryterms",
        "ubl23_DeliveryTerms_TransportExecutionTermsType_id",
        string="Delivery terms (e.g.",
        help=(
            "Delivery terms (e.g., Incoterms) associated with the "
            "transportation service."
        ),
    )

    ubl23_BonusPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.bonuspaymentterms",
        string="BonusPaymentTerms",
        help=(
            "Terms relating to payment of applicable bonuses associated with "
            "the transport service."
        ),
    )

    ubl23_CommissionPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.commissionpaymentterms",
        string="CommissionPaymentTerms",
        help=(
            "Terms of payment applying to a commission specified in the "
            "transport execution plan."
        ),
    )

    ubl23_PenaltyPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.penaltypaymentterms",
        string="PenaltyPaymentTerms",
        help=(
            "Terms of payment applying to a penalty specified in the transport"
            " execution plan."
        ),
    )

    ubl23_EnvironmentalEmission = fields.One2many(
        "ubl.23.environmentalemission",
        "ubl23_EnvironmentalEmission_TransportExecutionTermsType_id",
        string="EnvironmentalEmission",
        help=(
            "An environmental emission resulting from the transportation " "service."
        ),
    )

    ubl23_NotificationRequirement = fields.One2many(
        "ubl.23.notificationrequirement",
        "ubl23_NotificationRequirement_TransportExecutionTermsType_id",
        string="NotificationRequirement",
        help=(
            "A notification requirement related to the transportation service;"
            " e.g., a requirement that the transport user should be notified "
            "when goods are ready for pickup."
        ),
    )

    ubl23_ServiceChargePaymentTerms = fields.Many2one(
        comodel_name="ubl.23.servicechargepaymentterms",
        string="ServiceChargePaymentTerms",
        help=(
            "Payment terms for the service charge associated with the "
            "transport service."
        ),
    )


class BillingReference(models.AbstractModel):
    _description = "BillingReference"
    _name = "ubl.23.billingreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BillingReference"

    ubl23_BillingReference_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_BillingReference_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_BillingReference_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_BillingReference_ReminderLineType_id = fields.Many2one(
        comodel_name="ubl.23.reminderlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_BillingReference_RemittanceAdviceLineType_id = fields.Many2one(
        comodel_name="ubl.23.remittanceadvicelinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_BillingReference_StatementLineType_id = fields.Many2one(
        comodel_name="ubl.23.statementlinetype", xsd_implicit=True, ondelete="cascade"
    )


class CataloguePricingUpdateLine(models.AbstractModel):
    _description = "CataloguePricingUpdateLine"
    _name = "ubl.23.cataloguepricingupdateline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CataloguePricingUpdateLine"


class DeclaredPropertyItem(models.AbstractModel):
    _description = "DeclaredPropertyItem"
    _name = "ubl.23.declaredpropertyitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeclaredPropertyItem"


class Item(models.AbstractModel):
    _description = "Item"
    _name = "ubl.23.item"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Item"

    ubl23_Item_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Item_ReceiptLineType_id = fields.Many2one(
        comodel_name="ubl.23.receiptlinetype", xsd_implicit=True, ondelete="cascade"
    )


class PricingReference(models.AbstractModel):
    _description = "PricingReference"
    _name = "ubl.23.pricingreference"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PricingReference"


class SupplyItem(models.AbstractModel):
    _description = "SupplyItem"
    _name = "ubl.23.supplyitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplyItem"

    ubl23_SupplyItem_ExceptionCriteriaLineType_id = fields.Many2one(
        comodel_name="ubl.23.exceptioncriterialinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TransportExecutionTerms(models.AbstractModel):
    _description = "TransportExecutionTerms"
    _name = "ubl.23.transportexecutionterms"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportExecutionTerms"


class CatalogueItemSpecificationUpdateLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Catalogue Item Specification Update Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line describing the transaction that
    updates the specification of an item in a catalogue.</ns1:Definition>
    <ns1:ObjectClass>Catalogue Item Specification Update Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.catalogueitemspecificationupdatelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueItemSpecificationUpdateLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the line to be updated in a catalogue",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the line to be updated in a catalogue.",
    )

    ubl23_ContractorCustomerParty = fields.Many2one(
        comodel_name="ubl.23.contractorcustomerparty",
        string="ContractorCustomerParty",
        help=(
            "The customer responsible for the contract associated with the "
            "catalogue item."
        ),
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty",
        string="SellerSupplierParty",
        help=(
            "The seller/supplier responsible for the contract associated with "
            "the catalogue item."
        ),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The catalogue item to be updated.",
        xsd_required=True,
    )


class CatalogueLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Catalogue Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Catalogue describing a
    purchasable item.</ns1:Definition>
    <ns1:ObjectClass>Catalogue Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.cataloguelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the line in the catalogue",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the line in the catalogue.",
    )

    ubl23_ActionCode = fields.Char(
        string="ActionCode",
        xsd_type="ActionCodeType",
        help=(
            "A code signifying the action required to synchronize this "
            "catalogue line. Recommend codes (delete, update, add)"
        ),
    )

    ubl23_LifeCycleStatusCode = fields.Char(
        string="LifeCycleStatusCode",
        xsd_type="LifeCycleStatusCodeType",
        help=(
            "A code signifying the life cycle status of this catalogue line. "
            "Examples are pre-order, end of production"
        ),
    )

    ubl23_ContractSubdivision = fields.Char(
        string="ContractSubdivision",
        xsd_type="ContractSubdivisionType",
        help=("A subdivision of a contract or tender covering this catalogue " "line."),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_OrderableIndicator = fields.Boolean(
        string="OrderableIndicator",
        help=(
            "An indicator that this catalogue line describes an orderable item"
            " (true) or is included for reference purposes only (false)."
        ),
    )

    ubl23_OrderableUnit = fields.Char(
        string="OrderableUnit",
        xsd_type="OrderableUnitType",
        help=(
            "A textual description of the units in which the item described in"
            " this catalogue line can be ordered."
        ),
    )

    ubl23_ContentUnitQuantity = fields.Float(
        string="The numeric quantity of the ordering unit",
        xsd_type="ContentUnitQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The numeric quantity of the ordering unit (and units of measure) "
            "of the catalogue line."
        ),
    )

    ubl23_OrderQuantityIncrementNumeric = fields.Float(
        string="OrderQuantityIncrementNumeric",
        xsd_type="OrderQuantityIncrementNumericType",
        digits=(
            16,
            4,
        ),
        help=("The number of items that can set the order quantity increments."),
    )

    ubl23_MinimumOrderQuantity = fields.Float(
        string="MinimumOrderQuantity",
        xsd_type="MinimumOrderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum amount of the item described in this catalogue line "
            "that can be ordered."
        ),
    )

    ubl23_MaximumOrderQuantity = fields.Float(
        string="MaximumOrderQuantity",
        xsd_type="MaximumOrderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum amount of the item described in this catalogue line "
            "that can be ordered."
        ),
    )

    ubl23_WarrantyInformation = fields.Char(
        string="Text about a warranty",
        xsd_type="WarrantyInformationType",
        help=(
            "Text about a warranty (provided by WarrantyParty) for the good or"
            " service described in this catalogue line."
        ),
    )

    ubl23_PackLevelCode = fields.Char(
        string="PackLevelCode",
        xsd_type="PackLevelCodeType",
        help=(
            "A mutually agreed code signifying the level of packaging "
            "associated with the item described in this catalogue line."
        ),
    )

    ubl23_ContractorCustomerParty = fields.Many2one(
        comodel_name="ubl.23.contractorcustomerparty",
        string="ContractorCustomerParty",
        help=(
            "The customer responsible for the contract with which this "
            "catalogue line is associated."
        ),
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty",
        string="SellerSupplierParty",
        help=(
            "The seller/supplier responsible for the contract with which this "
            "catalogue line is associated."
        ),
    )

    ubl23_WarrantyParty = fields.Many2one(
        comodel_name="ubl.23.warrantyparty",
        string="WarrantyParty",
        help=(
            "The party responsible for any warranty associated with the item "
            "described in this catalogue line."
        ),
    )

    ubl23_WarrantyValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.warrantyvalidityperiod",
        string="WarrantyValidityPeriod",
        help=(
            "The period for which a warranty associated with the item in this "
            "catalogue line is valid."
        ),
    )

    ubl23_LineValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.linevalidityperiod",
        string="LineValidityPeriod",
        help=(
            "The period for which the information in this catalogue line is " "valid."
        ),
    )

    ubl23_ItemComparison = fields.One2many(
        "ubl.23.itemcomparison",
        "ubl23_ItemComparison_CatalogueLineType_id",
        string="ItemComparison",
        help=(
            "A combination of price and quantity used to provide price "
            "comparisons based on different sizes of order."
        ),
    )

    ubl23_ComponentRelatedItem = fields.One2many(
        "ubl.23.componentrelateditem",
        "ubl23_ComponentRelatedItem_CatalogueLineType_id",
        string="ComponentRelatedItem",
        help=("An item that may be a component of the item in this catalogue " "line."),
    )

    ubl23_AccessoryRelatedItem = fields.One2many(
        "ubl.23.accessoryrelateditem",
        "ubl23_AccessoryRelatedItem_CatalogueLineType_id",
        string="AccessoryRelatedItem",
        help=(
            "An item that may be an optional accessory of the item in this "
            "catalogue line."
        ),
    )

    ubl23_RequiredRelatedItem = fields.One2many(
        "ubl.23.requiredrelateditem",
        "ubl23_RequiredRelatedItem_CatalogueLineType_id",
        string="RequiredRelatedItem",
        help=("An item that may be required for the item in this catalogue line."),
    )

    ubl23_ReplacementRelatedItem = fields.One2many(
        "ubl.23.replacementrelateditem",
        "ubl23_ReplacementRelatedItem_CatalogueLineType_id",
        string="ReplacementRelatedItem",
        help=(
            "An item that may be a replacement for the item in this catalogue " "line."
        ),
    )

    ubl23_ComplementaryRelatedItem = fields.One2many(
        "ubl.23.complementaryrelateditem",
        "ubl23_ComplementaryRelatedItem_CatalogueLineType_id",
        string="ComplementaryRelatedItem",
        help="An item that may complement the item in this catalogue line.",
    )

    ubl23_ReplacedRelatedItem = fields.One2many(
        "ubl.23.replacedrelateditem",
        "ubl23_ReplacedRelatedItem_CatalogueLineType_id",
        string="ReplacedRelatedItem",
        help=(
            "An item in an existing catalogue that is being replaced by the "
            "item in this catalogue line."
        ),
    )

    ubl23_RequiredItemLocationQuantity = fields.One2many(
        "ubl.23.requireditemlocationquantity",
        "ubl23_RequiredItemLocationQuantity_CatalogueLineType_id",
        string="RequiredItemLocationQuantity",
        help=(
            "Properties of the item in this catalogue line that are dependent "
            "on location and quantity."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_CatalogueLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this catalogue line."),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="A specification of the item itself.",
        xsd_required=True,
    )

    ubl23_KeywordItemProperty = fields.One2many(
        "ubl.23.keyworditemproperty",
        "ubl23_KeywordItemProperty_CatalogueLineType_id",
        string="A property of the item in this catalogue line",
        help="A property of the item in this catalogue line.",
    )

    ubl23_CallForTendersLineReference = fields.Many2one(
        comodel_name="ubl.23.callfortenderslinereference",
        string="Reference to a Line on a Call For Tenders document",
        help="Reference to a Line on a Call For Tenders document.",
    )

    ubl23_CallForTendersDocumentReference = fields.Many2one(
        comodel_name="ubl.23.callfortendersdocumentreference",
        string="A class defining references to a Call For Tenders document",
        help="A class defining references to a Call For Tenders document.",
    )


class CatalogueRequestLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Catalogue Request Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line describing a request for a catalogue
    line.</ns1:Definition>
    <ns1:ObjectClass>Catalogue Request Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.cataloguerequestlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueRequestLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for the requested catalogue line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for the requested catalogue line.",
    )

    ubl23_ContractSubdivision = fields.Char(
        string="ContractSubdivision",
        xsd_type="ContractSubdivisionType",
        help=(
            "A subdivision of a contract or tender covering the line being "
            "requested."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_LineValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.linevalidityperiod",
        string="LineValidityPeriod",
        help=(
            "The period for which the information in the requested catalogue "
            "line is valid."
        ),
    )

    ubl23_RequiredItemLocationQuantity = fields.One2many(
        "ubl.23.requireditemlocationquantity",
        "ubl23_RequiredItemLocationQuantity_CatalogueRequestLineType_id",
        string="RequiredItemLocationQuantity",
        help=(
            "Properties of the item in the requested catalogue line that are "
            "dependent on location and quantity."
        ),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with the requested catalogue line",
        xsd_required=True,
        help="The item associated with the requested catalogue line.",
    )


class CriterionItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Criterion Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing a criteria</ns1:Definition>
    <ns1:ObjectClass>Criterion Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.criterionitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CriterionItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this criteria", xsd_type="IDType")

    ubl23_TypeCode = fields.Char(
        string="A code describing the type of criteria", xsd_type="TypeCodeType"
    )

    ubl23_CriterionDescription = fields.Char(
        string="The criteria for this item",
        xsd_type="CriterionDescriptionType",
        help="The criteria for this item, expressed as a text",
    )

    ubl23_DeclaredPropertyItem = fields.Many2one(
        comodel_name="ubl.23.declaredpropertyitem",
        string="The item associated with this criteria",
        xsd_required=True,
    )


class DespatchLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Despatch Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Despatch Advice.</ns1:Definition>
    <ns1:ObjectClass>Despatch Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.despatchlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this despatch line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this despatch line.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this despatch line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this despatch line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_LineStatusCode = fields.Char(
        string="LineStatusCode",
        xsd_type="LineStatusCodeType",
        help=(
            "A code signifying the status of this despatch line with respect "
            "to its original state."
        ),
    )

    ubl23_DeliveredQuantity = fields.Float(
        string="The quantity despatched (picked up).",
        xsd_type="DeliveredQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_BackorderQuantity = fields.Float(
        string="The quantity on back order at the supplier",
        xsd_type="BackorderQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity on back order at the supplier.",
    )

    ubl23_BackorderReason = fields.Char(
        string="The reason for the back order.", xsd_type="BackorderReasonType"
    )

    ubl23_OutstandingQuantity = fields.Float(
        string="The quantity outstanding",
        xsd_type="OutstandingQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The quantity outstanding (which will follow in a later despatch)."),
    )

    ubl23_OutstandingReason = fields.Char(
        string="The reason for the outstanding quantity",
        xsd_type="OutstandingReasonType",
        help="The reason for the outstanding quantity.",
    )

    ubl23_OversupplyQuantity = fields.Float(
        string="The quantity over-supplied",
        xsd_type="OversupplyQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity over-supplied, i.e., the quantity over and above "
            "that ordered."
        ),
    )

    ubl23_OrderLineReference = fields.One2many(
        "ubl.23.orderlinereference",
        "ubl23_OrderLineReference_DespatchLineType_id",
        string="OrderLineReference",
        help=("A reference to an order line associated with this despatch line."),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_DespatchLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this despatch line."),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this despatch line",
        xsd_required=True,
        help="The item associated with this despatch line.",
    )

    ubl23_Shipment = fields.One2many(
        "ubl.23.shipment",
        "ubl23_Shipment_DespatchLineType_id",
        string="A shipment associated with this despatch line",
        help="A shipment associated with this despatch line.",
    )

    ubl23_SubDespatchLine = fields.One2many(
        "ubl.23.subdespatchline",
        "ubl23_SubDespatchLine_DespatchLineType_id",
        string="A despatch line subsidiary to this despatch line",
        help="A despatch line subsidiary to this despatch line.",
    )


class EventLineItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Event Line Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line item describing the expected impacts
    associated with a retail event involving a specific product at a specific
    location.</ns1:Definition>
    <ns1:ObjectClass>Event Line Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.eventlineitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventLineItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_LineNumberNumeric = fields.Float(
        string="The number of this event line item.",
        xsd_type="LineNumberNumericType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ParticipatingLocationsLocation = fields.Many2one(
        comodel_name="ubl.23.participatinglocationslocation",
        string="ParticipatingLocationsLocation",
        help=(
            "The location of the stores involved in the event described in "
            "this line item."
        ),
    )

    ubl23_RetailPlannedImpact = fields.One2many(
        "ubl.23.retailplannedimpact",
        "ubl23_RetailPlannedImpact_EventLineItemType_id",
        string="A planned impact of the event described in this line item",
        help="A planned impact of the event described in this line item.",
    )

    ubl23_SupplyItem = fields.Many2one(
        comodel_name="ubl.23.supplyitem",
        string="The product with which the event is associated",
        xsd_required=True,
        help="The product with which the event is associated.",
    )


class ExceptionCriteriaLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Exception Criteria Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an ExceptionCriteria document that
    specifies a threshold for forecast variance, product activity, or
    performance history, the exceeding of which should trigger an exception
    message.</ns1:Definition>
    <ns1:ObjectClass>Exception Criteria Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.exceptioncriterialinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExceptionCriteriaLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this exception criteria line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this exception criteria line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_ThresholdValueComparisonCode = fields.Char(
        string="ThresholdValueComparisonCode",
        xsd_required=True,
        xsd_type="ThresholdValueComparisonCodeType",
        help=(
            "Type of comparison to be carried out in reference to the set "
            "threshold. Allowed values are: EXCEEDS_EXCEPTION_VALUE "
            "FALLS_BELOW_EXCEPTION_VALUE"
        ),
    )

    ubl23_ThresholdQuantity = fields.Float(
        string="A quantity beyond which an exception will be triggered",
        xsd_required=True,
        xsd_type="ThresholdQuantityType",
        digits=(
            16,
            4,
        ),
        help="A quantity beyond which an exception will be triggered.",
    )

    ubl23_ExceptionStatusCode = fields.Char(
        string="A code signifying status specific to a shipment exception",
        xsd_type="ExceptionStatusCodeType",
        help="A code signifying status specific to a shipment exception.",
    )

    ubl23_CollaborationPriorityCode = fields.Char(
        string="CollaborationPriorityCode",
        xsd_type="CollaborationPriorityCodeType",
        help=(
            "A collaboratively assigned code signifying priority of the "
            "Exception. Possible values are: HIGH, LOW, MEDIUM"
        ),
    )

    ubl23_ExceptionResolutionCode = fields.Char(
        string="Coded representation of possible resolution methods",
        xsd_type="ExceptionResolutionCodeType",
        help=(
            "Coded representation of possible resolution methods. Possible "
            "values are: DEFAULT_TO_AVERAGE_OF_COMPARED_VALUES "
            "DEFAULT_TO_BUYERS_VALUE DEFAULT_TO_HIGH_VALUE "
            "DEFAULT_TO_LOW_VALUE DEFAULT_TO_SELLERS_VALUE MANUAL_RESOLUTION "
            "MUTUALLY_DEFINED"
        ),
    )

    ubl23_SupplyChainActivityTypeCode = fields.Char(
        string="SupplyChainActivityTypeCode",
        xsd_type="SupplyChainActivityTypeCodeType",
        help=(
            "Establishes the criterion for one of the three types of "
            "exceptions. There can be three types of exception criteria: "
            "Operational, Metric and Forecast Exceptions. This will be set if "
            "this Exception is about an Operational Exception. Description "
            "could be: A code used to identify an operational exception. "
            "Possible values are: CANCELED_ORDERS EMERGENCY_ORDERS ON_HAND "
            "ORDERS RECEIPTS SALES SHIPMENTS"
        ),
    )

    ubl23_PerformanceMetricTypeCode = fields.Char(
        string="A code signifying a measure of performance",
        xsd_type="PerformanceMetricTypeCodeType",
        help="A code signifying a measure of performance.",
    )

    ubl23_EffectivePeriod = fields.Many2one(
        comodel_name="ubl.23.effectiveperiod",
        string="EffectivePeriod",
        help=("The period during which this exception criteria line is in " "effect."),
    )

    ubl23_SupplyItem = fields.One2many(
        "ubl.23.supplyitem",
        "ubl23_SupplyItem_ExceptionCriteriaLineType_id",
        string="SupplyItem",
        help=("The Trade Item that is the subject of the Exception Criterion."),
    )

    ubl23_ForecastExceptionCriterionLine = fields.Many2one(
        comodel_name="ubl.23.forecastexceptioncriterionline",
        string="ForecastExceptionCriterionLine",
        help=(
            "Establishes the criterion for one of the three types of "
            "exceptions. This class provides the criterion for the kind of "
            "forecast exception, the identification of the purpose of the "
            "forecast, the source of data and the time basis criterion for the"
            " exception."
        ),
    )


class ExceptionNotificationLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Exception Notification Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an Exception
    Notification.</ns1:Definition>
    <ns1:ObjectClass>Exception Notification Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.exceptionnotificationlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExceptionNotificationLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this exception notification line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this exception notification line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the exception.", xsd_type="DescriptionType"
    )

    ubl23_ExceptionStatusCode = fields.Char(
        string="A code signifying status specific to a shipment exception",
        xsd_type="ExceptionStatusCodeType",
        help="A code signifying status specific to a shipment exception.",
    )

    ubl23_CollaborationPriorityCode = fields.Char(
        string="Priority of Exception.", xsd_type="CollaborationPriorityCodeType"
    )

    ubl23_ResolutionCode = fields.Char(
        string="Coded representation of possible resolution methods",
        xsd_type="ResolutionCodeType",
        help=(
            "Coded representation of possible resolution methods. Possible "
            "values are: DEFAULT_TO_AVERAGE_OF_COMPARED_VALUES "
            "DEFAULT_TO_BUYERS_VALUE DEFAULT_TO_HIGH_VALUE "
            "DEFAULT_TO_LOW_VALUE DEFAULT_TO_SELLERS_VALUE MANUAL_RESOLUTION "
            "MUTUALLY_DEFINED"
        ),
    )

    ubl23_ComparedValueMeasure = fields.Char(
        string="ComparedValueMeasure",
        xsd_required=True,
        xsd_type="ComparedValueMeasureType",
        help=(
            "The value that was compared with the source value that resulted "
            "in the exception"
        ),
    )

    ubl23_SourceValueMeasure = fields.Char(
        string="The value used as the basis of comparison",
        xsd_required=True,
        xsd_type="SourceValueMeasureType",
    )

    ubl23_VarianceQuantity = fields.Float(
        string="VarianceQuantity",
        xsd_type="VarianceQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The variance of a data item from an expected value during a "
            "particular time interval."
        ),
    )

    ubl23_SupplyChainActivityTypeCode = fields.Char(
        string="SupplyChainActivityTypeCode",
        xsd_type="SupplyChainActivityTypeCodeType",
        help=(
            "Establishes the criterion for one of the three types of "
            "exceptions: Operational, performance metric and forecast. This "
            "reports an exception notification about an operational exception."
            " Description could be: A code used to identify an operational "
            "exception. Possible values are: CANCELED_ORDERS EMERGENCY_ORDERS "
            "ON_HAND ORDERS RECEIPTS SALES SHIPMENTS"
        ),
    )

    ubl23_PerformanceMetricTypeCode = fields.Char(
        string="A code used to identify a measure of performance",
        xsd_type="PerformanceMetricTypeCodeType",
        help=(
            "A code used to identify a measure of performance. It defines the "
            "type of the Performance Metric on which an exception criteria is "
            "being defined"
        ),
    )

    ubl23_ExceptionObservationPeriod = fields.Many2one(
        comodel_name="ubl.23.exceptionobservationperiod",
        string="The period",
        help="The period (start-end date) when this exception is observed",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_ExceptionNotificationLineType_id",
        string="A reference to Exception Criteria document can be provided",
        help="A reference to Exception Criteria document can be provided.",
    )

    ubl23_ForecastException = fields.Many2one(
        comodel_name="ubl.23.forecastexception",
        string="A forecast accuracy or comparison exception",
        help="A forecast accuracy or comparison exception.",
    )

    ubl23_SupplyItem = fields.Many2one(
        comodel_name="ubl.23.supplyitem",
        string="SupplyItem",
        xsd_required=True,
        help=("The product associated with this exception notification line."),
    )


class InstructionForReturnsLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Instruction For Returns Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an Instruction for
    Returns.</ns1:Definition>
    <ns1:ObjectClass>Instruction For Returns Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.instructionforreturnslinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InstructionForReturnsLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this instruction for returns line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this instruction for returns line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of goods being returned",
        xsd_required=True,
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of goods being returned.",
    )

    ubl23_ManufacturerParty = fields.Many2one(
        comodel_name="ubl.23.manufacturerparty",
        string="The manufacturer of the goods being returned",
        help="The manufacturer of the goods being returned.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="A description of the item being returned",
        xsd_required=True,
        help="A description of the item being returned.",
    )


class InventoryReportLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Inventory Report Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an Inventory
    Report.</ns1:Definition>
    <ns1:ObjectClass>Inventory Report Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.inventoryreportlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InventoryReportLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this inventory report line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this inventory report line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="Quantity",
        xsd_required=True,
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=("The quantity of the item reported that is currently in stock."),
    )

    ubl23_InventoryValueAmount = fields.Float(
        string="InventoryValueAmount",
        xsd_type="InventoryValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value of the quantity of the item reported that is currently "
            "in stock."
        ),
    )

    ubl23_AvailabilityDate = fields.Date(
        string="The date from which the goods will be available",
        help=(
            "The date from which the goods will be available. If not present, "
            "the goods are available now."
        ),
    )

    ubl23_AvailabilityStatusCode = fields.Char(
        string="A code signifying the item's level of availability",
        xsd_type="AvailabilityStatusCodeType",
        help="A code signifying the item's level of availability.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this inventory report line",
        xsd_required=True,
        help="The item associated with this inventory report line.",
    )

    ubl23_InventoryLocation = fields.Many2one(
        comodel_name="ubl.23.inventorylocation",
        string="The location of the reported quantity of goods",
        help="The location of the reported quantity of goods.",
    )


class InvoiceLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Invoice Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an Invoice.</ns1:Definition>
    <ns1:ObjectClass>Invoice Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.invoicelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InvoiceLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this invoice line.",
        xsd_required=True,
        xsd_type="IDType",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this invoice line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this invoice line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_InvoicedQuantity = fields.Float(
        string="The quantity",
        xsd_type="InvoicedQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity (of items) on this invoice line.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this invoice line",
        xsd_required=True,
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this invoice line, including allowance "
            "charges but net of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this invoice line, including all allowances,"
            " charges and taxes."
        ),
    )

    ubl23_TaxPointDate = fields.Date(
        string="The date of this invoice line",
        help=(
            "The date of this invoice line, used to indicate the point at "
            "which tax becomes applicable."
        ),
    )

    ubl23_AccountingCostCode = fields.Char(
        string="The buyer's accounting cost centre for this invoice line",
        xsd_type="AccountingCostCodeType",
        help=(
            "The buyer's accounting cost centre for this invoice line, "
            "expressed as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The buyer's accounting cost centre for this invoice line, "
            "expressed as text."
        ),
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_FreeOfChargeIndicator = fields.Boolean(
        string="An indicator that this invoice line is free of charge",
        help=(
            "An indicator that this invoice line is free of charge (true) or "
            "not (false). The default is false."
        ),
    )

    ubl23_InvoicePeriod = fields.One2many(
        "ubl.23.invoiceperiod",
        "ubl23_InvoicePeriod_InvoiceLineType_id",
        string="An invoice period to which this invoice line applies",
        help="An invoice period to which this invoice line applies.",
    )

    ubl23_OrderLineReference = fields.One2many(
        "ubl.23.orderlinereference",
        "ubl23_OrderLineReference_InvoiceLineType_id",
        string="OrderLineReference",
        help=("A reference to an order line associated with this invoice line."),
    )

    ubl23_DespatchLineReference = fields.One2many(
        "ubl.23.despatchlinereference",
        "ubl23_DespatchLineReference_InvoiceLineType_id",
        string="DespatchLineReference",
        help=("A reference to a despatch line associated with this invoice line."),
    )

    ubl23_ReceiptLineReference = fields.One2many(
        "ubl.23.receiptlinereference",
        "ubl23_ReceiptLineReference_InvoiceLineType_id",
        string="ReceiptLineReference",
        help=("A reference to a receipt line associated with this invoice line."),
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_InvoiceLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this invoice " "line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_InvoiceLineType_id",
        string="DocumentReference",
        help="A reference to a document associated with this invoice line.",
    )

    ubl23_PricingReference = fields.Many2one(
        comodel_name="ubl.23.pricingreference",
        string="PricingReference",
        help=(
            "A reference to pricing and item location information associated "
            "with this invoice line."
        ),
    )

    ubl23_OriginatorParty = fields.Many2one(
        comodel_name="ubl.23.originatorparty",
        string="OriginatorParty",
        help=("The party who originated the Order to which the Invoice is " "related."),
    )

    ubl23_Delivery = fields.One2many(
        "ubl.23.delivery",
        "ubl23_Delivery_InvoiceLineType_id",
        string="A delivery associated with this invoice line",
        help="A delivery associated with this invoice line.",
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_InvoiceLineType_id",
        string="PaymentTerms",
        help=("A specification of payment terms associated with this invoice " "line."),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_InvoiceLineType_id",
        string="An allowance or charge associated with this invoice line",
        help="An allowance or charge associated with this invoice line.",
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_InvoiceLineType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "invoice line."
        ),
    )

    ubl23_WithholdingTaxTotal = fields.One2many(
        "ubl.23.withholdingtaxtotal",
        "ubl23_WithholdingTaxTotal_InvoiceLineType_id",
        string="WithholdingTaxTotal",
        help=(
            "A reference to a TaxTotal class describing the amount that has "
            "been withhold by the authorities, e.g. if the creditor is in dept"
            " because of non paid taxes."
        ),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this invoice line",
        xsd_required=True,
        help="The item associated with this invoice line.",
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="The price of the item associated with this invoice line",
        help="The price of the item associated with this invoice line.",
    )

    ubl23_DeliveryTerms = fields.Many2one(
        comodel_name="ubl.23.deliveryterms",
        string="DeliveryTerms",
        help=(
            "Terms and conditions of the delivery associated with this invoice" " line."
        ),
    )

    ubl23_SubInvoiceLine = fields.One2many(
        "ubl.23.subinvoiceline",
        "ubl23_SubInvoiceLine_InvoiceLineType_id",
        string="An invoice line subsidiary to this invoice line",
        help="An invoice line subsidiary to this invoice line.",
    )

    ubl23_ItemPriceExtension = fields.Many2one(
        comodel_name="ubl.23.itempriceextension",
        string="The price extension",
        help=(
            "The price extension, calculated by multiplying the price per unit"
            " by the quantity of items on this invoice line."
        ),
    )


class ItemManagementProfileType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Management Profile.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a management profile for an
    item.</ns1:Definition>
    <ns1:ObjectClass>Item Management Profile</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.itemmanagementprofiletype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemManagementProfileType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_FrozenPeriodDaysNumeric = fields.Float(
        string="FrozenPeriodDaysNumeric",
        xsd_type="FrozenPeriodDaysNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of days in the future that an order forecast quantity "
            "automatically becomes a confirmed order for a product."
        ),
    )

    ubl23_MinimumInventoryQuantity = fields.Float(
        string="MinimumInventoryQuantity",
        xsd_type="MinimumInventoryQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of the item that should trigger a replenishment "
            "order to avoid depleting the safety stock."
        ),
    )

    ubl23_MultipleOrderQuantity = fields.Float(
        string="MultipleOrderQuantity",
        xsd_type="MultipleOrderQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The order quantity multiples in which the product may be ordered."),
    )

    ubl23_OrderIntervalDaysNumeric = fields.Float(
        string="OrderIntervalDaysNumeric",
        xsd_type="OrderIntervalDaysNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of days between regular replenishment orders for the "
            "product."
        ),
    )

    ubl23_ReplenishmentOwnerDescription = fields.Char(
        string="ReplenishmentOwnerDescription",
        xsd_type="ReplenishmentOwnerDescriptionType",
        help=("The trading partner maintaining this item management profile."),
    )

    ubl23_TargetServicePercent = fields.Char(
        string="TargetServicePercent",
        xsd_type="TargetServicePercentType",
        help=(
            "The Unit Service Level the trading partners expect to be "
            "maintained, expressed as a percentage. Unite Service Level (USL) "
            "is a term used in Inventory Management, which is sometimes known "
            "as fill rate, counts the average number of units short expressed "
            "as the percentage of the order quantity."
        ),
    )

    ubl23_TargetInventoryQuantity = fields.Float(
        string="The target inventory quantity.",
        xsd_type="TargetInventoryQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_EffectivePeriod = fields.Many2one(
        comodel_name="ubl.23.effectiveperiod",
        string="The period during which this profile is effective",
        xsd_required=True,
        help="The period during which this profile is effective.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this item management profile",
        xsd_required=True,
        help="The item associated with this item management profile.",
    )

    ubl23_ItemLocationQuantity = fields.Many2one(
        comodel_name="ubl.23.itemlocationquantity",
        string="A set of location",
        help=(
            "A set of location-specific properties (e.g., price and quantity) "
            "associated with the item."
        ),
    )


class PerformanceDataLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Performance Data Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Performance
    History.</ns1:Definition>
    <ns1:ObjectClass>Performance Data Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.performancedatalinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PerformanceDataLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this performance data line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this performance data line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_PerformanceValueQuantity = fields.Float(
        string="The value of the reported attribute.",
        xsd_required=True,
        xsd_type="PerformanceValueQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_PerformanceMetricTypeCode = fields.Char(
        string="PerformanceMetricTypeCode",
        xsd_required=True,
        xsd_type="PerformanceMetricTypeCodeType",
        help=(
            "A code signifying the measure of performance applicable to the "
            "reported attribute."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period to which this performance data line applies",
        help="The period to which this performance data line applies.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item whose performance is reported in this data line",
        help="The item whose performance is reported in this data line.",
    )


class ReceiptLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Receipt Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Receipt Advice.</ns1:Definition>
    <ns1:ObjectClass>Receipt Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.receiptlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiptLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this receipt line.",
        xsd_required=True,
        xsd_type="IDType",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this receipt line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this receipt line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_ReceivedQuantity = fields.Float(
        string="The quantity received.",
        xsd_type="ReceivedQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ShortQuantity = fields.Float(
        string="ShortQuantity",
        xsd_type="ShortQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity received short; the difference between the quantity "
            "reported despatched and the quantity actually received."
        ),
    )

    ubl23_ShortageActionCode = fields.Char(
        string="ShortageActionCode",
        xsd_type="ShortageActionCodeType",
        help=(
            "A code signifying the action that the delivery party wishes the "
            "despatch party to take as the result of a shortage."
        ),
    )

    ubl23_RejectedQuantity = fields.Float(
        string="The quantity rejected.",
        xsd_type="RejectedQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_RejectReasonCode = fields.Char(
        string="The reason for a rejection",
        xsd_type="RejectReasonCodeType",
        help="The reason for a rejection, expressed as a code.",
    )

    ubl23_RejectReason = fields.Char(
        string="The reason for a rejection (RejectReason)",
        xsd_type="RejectReasonType",
        help="The reason for a rejection, expressed as text.",
    )

    ubl23_RejectActionCode = fields.Char(
        string="RejectActionCode",
        xsd_type="RejectActionCodeType",
        help=(
            "A code signifying the action that the delivery party wishes the "
            "despatch party to take as the result of a rejection."
        ),
    )

    ubl23_QuantityDiscrepancyCode = fields.Char(
        string="A code signifying the type of a discrepancy in quantity",
        xsd_type="QuantityDiscrepancyCodeType",
        help="A code signifying the type of a discrepancy in quantity.",
    )

    ubl23_OversupplyQuantity = fields.Float(
        string="The quantity over-supplied",
        xsd_type="OversupplyQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity over-supplied, i.e., the quantity over and above the"
            " quantity ordered."
        ),
    )

    ubl23_ReceivedDate = fields.Date(
        string="The date on which the goods or services were received",
        help="The date on which the goods or services were received.",
    )

    ubl23_TimingComplaintCode = fields.Char(
        string="A complaint about the timing of delivery",
        xsd_type="TimingComplaintCodeType",
        help=("A complaint about the timing of delivery, expressed as a code."),
    )

    ubl23_TimingComplaint = fields.Char(
        string="A complaint about the timing of delivery (TimingComplaint)",
        xsd_type="TimingComplaintType",
        help="A complaint about the timing of delivery, expressed as text.",
    )

    ubl23_OrderLineReference = fields.Many2one(
        comodel_name="ubl.23.orderlinereference",
        string="OrderLineReference",
        help=("A reference to the order line associated with this receipt line."),
    )

    ubl23_DespatchLineReference = fields.One2many(
        "ubl.23.despatchlinereference",
        "ubl23_DespatchLineReference_ReceiptLineType_id",
        string="DespatchLineReference",
        help=("A reference to a despatch line associated with this receipt line."),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_ReceiptLineType_id",
        string="DocumentReference",
        help="A reference to a document associated with this receipt line.",
    )

    ubl23_Item = fields.One2many(
        "ubl.23.item",
        "ubl23_Item_ReceiptLineType_id",
        string="An item associated with this receipt line",
        help="An item associated with this receipt line.",
    )

    ubl23_Shipment = fields.One2many(
        "ubl.23.shipment",
        "ubl23_Shipment_ReceiptLineType_id",
        string="A shipment associated with this receipt line",
        help="A shipment associated with this receipt line.",
    )


class RequestForTenderLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Request For Tender Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Request for Tender describing an
    item of goods or a service solicited in the Request for
    Tender.</ns1:Definition>
    <ns1:ObjectClass>Request For Tender Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.requestfortenderlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestForTenderLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this request for tender line",
        xsd_type="IDType",
        help="An identifier for this request for tender line.",
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help=("A universally unique identifier for this request for tender line."),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="Quantity",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of the item for which a tender is requested in this " "line."
        ),
    )

    ubl23_MinimumQuantity = fields.Float(
        string="MinimumQuantity",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum quantity of the item associated with this request for"
            " tender line."
        ),
    )

    ubl23_MaximumQuantity = fields.Float(
        string="MaximumQuantity",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum quantity of the item associated with this request for"
            " tender line."
        ),
    )

    ubl23_TaxIncludedIndicator = fields.Boolean(
        string="Indicates whether the amounts are taxes included",
        help=(
            "Indicates whether the amounts are taxes included (true) or not " "(false)."
        ),
    )

    ubl23_MinimumAmount = fields.Float(
        string="The minimum amount allowed for this deliverable",
        xsd_type="MinimumAmountType",
        digits=(
            16,
            4,
        ),
        help="The minimum amount allowed for this deliverable.",
    )

    ubl23_MaximumAmount = fields.Float(
        string="The maximum amount allowed for this deliverable",
        xsd_type="MaximumAmountType",
        digits=(
            16,
            4,
        ),
        help="The maximum amount allowed for this deliverable.",
    )

    ubl23_EstimatedAmount = fields.Float(
        string="The estimated total amount of the deliverable",
        xsd_type="EstimatedAmountType",
        digits=(
            16,
            4,
        ),
        help="The estimated total amount of the deliverable.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_RequestForTenderLineType_id",
        string="DocumentReference",
        help=(
            "A reference to a document associated with this request for tender" " line."
        ),
    )

    ubl23_DeliveryPeriod = fields.One2many(
        "ubl.23.deliveryperiod",
        "ubl23_DeliveryPeriod_RequestForTenderLineType_id",
        string="DeliveryPeriod",
        help=(
            "An applicable period for the deliverable or set of deliverables "
            "in this tendering process."
        ),
    )

    ubl23_RequiredItemLocationQuantity = fields.One2many(
        "ubl.23.requireditemlocationquantity",
        "ubl23_RequiredItemLocationQuantity_RequestForTenderLineType_id",
        string="RequiredItemLocationQuantity",
        help=(
            "Properties of the item specified in this request for tender line "
            "that are dependent on location and quantity."
        ),
    )

    ubl23_WarrantyValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.warrantyvalidityperiod",
        string="WarrantyValidityPeriod",
        help=(
            "The period during which a warranty to be associated with this "
            "request for tender line must apply."
        ),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="An item for which a tender is requested",
        xsd_required=True,
        help="An item for which a tender is requested.",
    )

    ubl23_SubRequestForTenderLine = fields.One2many(
        "ubl.23.subrequestfortenderline",
        "ubl23_SubRequestForTenderLine_RequestForTenderLineType_id",
        string="A subsidiary request for tender line",
        help="A subsidiary request for tender line.",
    )


class StockAvailabilityReportLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Stock Availability Report Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Stock Availability Report
    describing the availability of an item of sale.</ns1:Definition>
    <ns1:ObjectClass>Stock Availability Report Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.stockavailabilityreportlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StockAvailabilityReportLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this stock availability line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this stock availability line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of the item currently in stock",
        xsd_required=True,
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of the item currently in stock.",
    )

    ubl23_ValueAmount = fields.Float(
        string="ValueAmount",
        xsd_type="ValueAmountType",
        digits=(
            16,
            4,
        ),
        help=("The monetary value of the quantity of the item currently in " "stock."),
    )

    ubl23_AvailabilityDate = fields.Date(
        string="The date from which the item will be available",
        help=(
            "The date from which the item will be available. A date identical "
            "to or earlier than the IssueDate of the Stock Availability Report"
            " means that the item is available now"
        ),
    )

    ubl23_AvailabilityStatusCode = fields.Char(
        string="A code signifying the level of availability of the item",
        xsd_type="AvailabilityStatusCodeType",
        help="A code signifying the level of availability of the item.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="Item",
        xsd_required=True,
        help=("The item associated with this stock availability report line."),
    )


class TenderLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tender Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Tender.</ns1:Definition>
    <ns1:ObjectClass>Tender Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this tender line.", xsd_type="IDType"
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of the item quoted in this tender line",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of the item quoted in this tender line.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this tender line",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this tender line, including allowance "
            "charges but net of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this tender line, including all allowances, "
            "charges and taxes."
        ),
    )

    ubl23_TotalTaxAmount = fields.Float(
        string="The total tax amount for this tender line",
        xsd_type="TotalTaxAmountType",
        digits=(
            16,
            4,
        ),
        help="The total tax amount for this tender line.",
    )

    ubl23_OrderableUnit = fields.Char(
        string="OrderableUnit",
        xsd_type="OrderableUnitType",
        help=(
            "Text describing a unit in which the item described in this tender"
            " line can be ordered."
        ),
    )

    ubl23_ContentUnitQuantity = fields.Float(
        string="The unit of measure and quantity of the orderable unit",
        xsd_type="ContentUnitQuantityType",
        digits=(
            16,
            4,
        ),
        help="The unit of measure and quantity of the orderable unit.",
    )

    ubl23_OrderQuantityIncrementNumeric = fields.Float(
        string="OrderQuantityIncrementNumeric",
        xsd_type="OrderQuantityIncrementNumericType",
        digits=(
            16,
            4,
        ),
        help=("The number of items that can set the order quantity increments."),
    )

    ubl23_MinimumOrderQuantity = fields.Float(
        string="MinimumOrderQuantity",
        xsd_type="MinimumOrderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum number of items described in this tender line that "
            "can be ordered."
        ),
    )

    ubl23_MaximumOrderQuantity = fields.Float(
        string="MaximumOrderQuantity",
        xsd_type="MaximumOrderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum number of items described in this tender line that "
            "can be ordered."
        ),
    )

    ubl23_WarrantyInformation = fields.Char(
        string="Text about a warranty",
        xsd_type="WarrantyInformationType",
        help=(
            "Text about a warranty (provided by WarrantyParty) for the good or"
            " service described in this tender line."
        ),
    )

    ubl23_PackLevelCode = fields.Char(
        string="PackLevelCode",
        xsd_type="PackLevelCodeType",
        help=(
            "A mutually agreed code signifying the level of packaging "
            "associated with the item described in this tender line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_TenderLineType_id",
        string="A reference to a document associated with this tender line",
        help="A reference to a document associated with this tender line.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this tender line",
        help="The item associated with this tender line.",
    )

    ubl23_OfferedItemLocationQuantity = fields.One2many(
        "ubl.23.offereditemlocationquantity",
        "ubl23_OfferedItemLocationQuantity_TenderLineType_id",
        string="A set of location",
        help=(
            "A set of location-specific properties (e.g., price, quantity, "
            "lead time) associated with the item described in this tender "
            "line."
        ),
    )

    ubl23_ReplacementRelatedItem = fields.One2many(
        "ubl.23.replacementrelateditem",
        "ubl23_ReplacementRelatedItem_TenderLineType_id",
        string="ReplacementRelatedItem",
        help=(
            "A catalogue item that may be a replacement for the item described"
            " in this tender line."
        ),
    )

    ubl23_WarrantyParty = fields.Many2one(
        comodel_name="ubl.23.warrantyparty",
        string="WarrantyParty",
        help=(
            "The party responsible for any warranty described in this tender " "line."
        ),
    )

    ubl23_WarrantyValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.warrantyvalidityperiod",
        string="WarrantyValidityPeriod",
        help=(
            "The period for which a warranty associated with the item "
            "described in this tender line is valid."
        ),
    )

    ubl23_SubTenderLine = fields.One2many(
        "ubl.23.subtenderline",
        "ubl23_SubTenderLine_TenderLineType_id",
        string="An association to a Sub Tender Line",
    )

    ubl23_CallForTendersLineReference = fields.Many2one(
        comodel_name="ubl.23.callfortenderslinereference",
        string="Reference to a Line on a Call For Tenders document",
        help="Reference to a Line on a Call For Tenders document.",
    )

    ubl23_CallForTendersDocumentReference = fields.Many2one(
        comodel_name="ubl.23.callfortendersdocumentreference",
        string="A class defining references to a Call For Tenders document",
        help="A class defining references to a Call For Tenders document.",
    )


class CatalogueItemSpecificationUpdateLine(models.AbstractModel):
    _description = "CatalogueItemSpecificationUpdateLine"
    _name = "ubl.23.catalogueitemspecificationupdateline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueItemSpecificationUpdateLine"


class CatalogueLine(models.AbstractModel):
    _description = "CatalogueLine"
    _name = "ubl.23.catalogueline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueLine"


class CatalogueRequestLine(models.AbstractModel):
    _description = "CatalogueRequestLine"
    _name = "ubl.23.cataloguerequestline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CatalogueRequestLine"


class CriterionItem(models.AbstractModel):
    _description = "CriterionItem"
    _name = "ubl.23.criterionitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CriterionItem"

    ubl23_CriterionItem_AttestationLineType_id = fields.Many2one(
        comodel_name="ubl.23.attestationlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_CriterionItem_GoodsProcessingType_id = fields.Many2one(
        comodel_name="ubl.23.goodsprocessingtype", xsd_implicit=True, ondelete="cascade"
    )


class DespatchLine(models.AbstractModel):
    _description = "DespatchLine"
    _name = "ubl.23.despatchline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DespatchLine"


class EventLineItem(models.AbstractModel):
    _description = "EventLineItem"
    _name = "ubl.23.eventlineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "EventLineItem"

    ubl23_EventLineItem_MiscellaneousEventType_id = fields.Many2one(
        comodel_name="ubl.23.miscellaneouseventtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ExceptionCriteriaLine(models.AbstractModel):
    _description = "ExceptionCriteriaLine"
    _name = "ubl.23.exceptioncriterialine"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExceptionCriteriaLine"


class ExceptionNotificationLine(models.AbstractModel):
    _description = "ExceptionNotificationLine"
    _name = "ubl.23.exceptionnotificationline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExceptionNotificationLine"


class HandlingUnitDespatchLine(models.AbstractModel):
    _description = "HandlingUnitDespatchLine"
    _name = "ubl.23.handlingunitdespatchline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "HandlingUnitDespatchLine"

    ubl23_HandlingUnitDespatchLine_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class InstructionForReturnsLine(models.AbstractModel):
    _description = "InstructionForReturnsLine"
    _name = "ubl.23.instructionforreturnsline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InstructionForReturnsLine"


class InventoryReportLine(models.AbstractModel):
    _description = "InventoryReportLine"
    _name = "ubl.23.inventoryreportline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InventoryReportLine"


class InvoiceLine(models.AbstractModel):
    _description = "InvoiceLine"
    _name = "ubl.23.invoiceline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InvoiceLine"

    ubl23_InvoiceLine_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )


class ItemManagementProfile(models.AbstractModel):
    _description = "ItemManagementProfile"
    _name = "ubl.23.itemmanagementprofile"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemManagementProfile"


class PerformanceDataLine(models.AbstractModel):
    _description = "PerformanceDataLine"
    _name = "ubl.23.performancedataline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PerformanceDataLine"


class ReceiptLine(models.AbstractModel):
    _description = "ReceiptLine"
    _name = "ubl.23.receiptline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceiptLine"


class ReceivedHandlingUnitReceiptLine(models.AbstractModel):
    _description = "ReceivedHandlingUnitReceiptLine"
    _name = "ubl.23.receivedhandlingunitreceiptline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReceivedHandlingUnitReceiptLine"

    ubl23_ReceivedHandlingUnitReceiptLine_TransportHandlingUnitType_id = (
        fields.Many2one(
            comodel_name="ubl.23.transporthandlingunittype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class RequestForTenderLine(models.AbstractModel):
    _description = "RequestForTenderLine"
    _name = "ubl.23.requestfortenderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestForTenderLine"

    ubl23_RequestForTenderLine_ProcurementProjectType_id = fields.Many2one(
        comodel_name="ubl.23.procurementprojecttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class StockAvailabilityReportLine(models.AbstractModel):
    _description = "StockAvailabilityReportLine"
    _name = "ubl.23.stockavailabilityreportline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StockAvailabilityReportLine"


class SubDespatchLine(models.AbstractModel):
    _description = "SubDespatchLine"
    _name = "ubl.23.subdespatchline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubDespatchLine"

    ubl23_SubDespatchLine_DespatchLineType_id = fields.Many2one(
        comodel_name="ubl.23.despatchlinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubInvoiceLine(models.AbstractModel):
    _description = "SubInvoiceLine"
    _name = "ubl.23.subinvoiceline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubInvoiceLine"

    ubl23_SubInvoiceLine_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubRequestForTenderLine(models.AbstractModel):
    _description = "SubRequestForTenderLine"
    _name = "ubl.23.subrequestfortenderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubRequestForTenderLine"

    ubl23_SubRequestForTenderLine_RequestForTenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.requestfortenderlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SubTenderLine(models.AbstractModel):
    _description = "SubTenderLine"
    _name = "ubl.23.subtenderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubTenderLine"

    ubl23_SubTenderLine_TenderLineType_id = fields.Many2one(
        comodel_name="ubl.23.tenderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class TenderLine(models.AbstractModel):
    _description = "TenderLine"
    _name = "ubl.23.tenderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderLine"

    ubl23_TenderLine_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class AttestationLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Attestation Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing an attestation line</ns1:Definition>
    <ns1:ObjectClass>Attestation Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.attestationlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AttestationLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this attestation line", xsd_type="IDType"
    )

    ubl23_TypeCode = fields.Char(
        string="TypeCode",
        xsd_type="TypeCodeType",
        help="A code describing the type of attestation line or statement",
    )

    ubl23_Description = fields.Char(
        string="A textual description of this attestation line",
        xsd_type="DescriptionType",
    )

    ubl23_CriterionItem = fields.One2many(
        "ubl.23.criterionitem",
        "ubl23_CriterionItem_AttestationLineType_id",
        string="Criterion items associated with this attestation line",
    )

    ubl23_SubAttestationLine = fields.One2many(
        "ubl.23.subattestationline",
        "ubl23_SubAttestationLine_AttestationLineType_id",
        string="An attestation line subsidiary to this attestation line",
    )


class GoodsItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Goods Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a separately identifiable quantity of goods
    of a single product type.</ns1:Definition>
    <ns1:ObjectClass>Goods Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.goodsitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this goods item.", xsd_type="IDType"
    )

    ubl23_SequenceNumberID = fields.Char(
        string="SequenceNumberID",
        xsd_type="SequenceNumberIDType",
        help=(
            "A sequence number differentiating a specific goods item within a "
            "consignment."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing this goods item to identify it for customs",
        xsd_type="DescriptionType",
        help=(
            "Text describing this goods item to identify it for customs, "
            "statistical, or transport purposes."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="HazardousRiskIndicator",
        help=(
            "An indication that the transported goods item is subject to an "
            "international regulation concerning the carriage of dangerous "
            "goods (true) or not (false)."
        ),
    )

    ubl23_DeclaredCustomsValueAmount = fields.Float(
        string="DeclaredCustomsValueAmount",
        xsd_type="DeclaredCustomsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=("The total declared value for customs purposes of the goods item."),
    )

    ubl23_DeclaredForCarriageValueAmount = fields.Float(
        string="The value of this goods item",
        xsd_type="DeclaredForCarriageValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value of this goods item, declared by the shipper or his "
            "agent solely for the purpose of varying the carrier's level of "
            "liability from that provided in the contract of carriage, in case"
            " of loss or damage to goods or delayed delivery."
        ),
    )

    ubl23_DeclaredStatisticsValueAmount = fields.Float(
        string="DeclaredStatisticsValueAmount",
        xsd_type="DeclaredStatisticsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total declared value of all the goods items in the same "
            "consignment with this goods item that have the same statistical "
            "heading."
        ),
    )

    ubl23_FreeOnBoardValueAmount = fields.Float(
        string="FreeOnBoardValueAmount",
        xsd_type="FreeOnBoardValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount that has to be or has been paid as calculated"
            " under the applicable trade delivery."
        ),
    )

    ubl23_InsuranceValueAmount = fields.Float(
        string="The amount covered by insurance for this goods item",
        xsd_type="InsuranceValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount covered by insurance for this goods item.",
    )

    ubl23_ValueAmount = fields.Float(
        string="The amount on which a duty",
        xsd_type="ValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount on which a duty, tax, or fee will be assessed.",
    )

    ubl23_GrossWeightMeasure = fields.Char(
        string="The weight of this goods item",
        xsd_type="GrossWeightMeasureType",
        help=(
            "The weight of this goods item, including packing and packaging "
            "but excluding the carrier's equipment."
        ),
    )

    ubl23_NetWeightMeasure = fields.Char(
        string="The weight of this goods item (NetWeightMeasure)",
        xsd_type="NetWeightMeasureType",
        help=(
            "The weight of this goods item, excluding packing but including "
            "packaging that normally accompanies the goods."
        ),
    )

    ubl23_NetNetWeightMeasure = fields.Char(
        string="The total weight of this goods item",
        xsd_type="NetNetWeightMeasureType",
        help=(
            "The total weight of this goods item, excluding all packing and "
            "packaging."
        ),
    )

    ubl23_ChargeableWeightMeasure = fields.Char(
        string="The weight on which a charge is to be based",
        xsd_type="ChargeableWeightMeasureType",
        help="The weight on which a charge is to be based.",
    )

    ubl23_GrossVolumeMeasure = fields.Char(
        string="The volume of this goods item",
        xsd_type="GrossVolumeMeasureType",
        help=(
            "The volume of this goods item, normally calculated by multiplying"
            " its maximum length, width, and height."
        ),
    )

    ubl23_NetVolumeMeasure = fields.Char(
        string="The volume contained by a goods item",
        xsd_type="NetVolumeMeasureType",
        help=(
            "The volume contained by a goods item, excluding the volume of any"
            " packaging material."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The number of units making up this goods item",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of units making up this goods item.",
    )

    ubl23_PreferenceCriterionCode = fields.Char(
        string="PreferenceCriterionCode",
        xsd_type="PreferenceCriterionCodeType",
        help=(
            "A code signifying the treatment preference for this goods item "
            "according to international trading agreements."
        ),
    )

    ubl23_RequiredCustomsID = fields.Char(
        string="RequiredCustomsID",
        xsd_type="RequiredCustomsIDType",
        help=(
            "An identifier for a set of tariff codes required to specify a "
            "type of goods for customs, transport, statistical, or other "
            "regulatory purposes."
        ),
    )

    ubl23_CustomsStatusCode = fields.Char(
        string="CustomsStatusCode",
        xsd_type="CustomsStatusCodeType",
        help=(
            "A code assigned by customs to signify the status of this goods " "item."
        ),
    )

    ubl23_CustomsProcedureCode = fields.Char(
        string="CustomsProcedureCode",
        xsd_type="CustomsProcedureCodeType",
        help=(
            "A code assigned by customs to signifying the customs procedure "
            "applied to this Goods Item."
        ),
    )

    ubl23_CustomsTariffQuantity = fields.Float(
        string="CustomsTariffQuantity",
        xsd_type="CustomsTariffQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "Quantity of the units in this goods item as required by customs "
            "for tariff, statistical, or fiscal purposes."
        ),
    )

    ubl23_CustomsImportClassifiedIndicator = fields.Boolean(
        string="CustomsImportClassifiedIndicator",
        help=(
            "An indicator that this goods item has been classified for import "
            "by customs (true) or not (false)."
        ),
    )

    ubl23_ChargeableQuantity = fields.Float(
        string="ChargeableQuantity",
        xsd_type="ChargeableQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The number of units in the goods item to which charges apply."),
    )

    ubl23_ReturnableQuantity = fields.Float(
        string="The number of units in the goods item that may be returned",
        xsd_type="ReturnableQuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of units in the goods item that may be returned.",
    )

    ubl23_TraceID = fields.Char(
        string="An identifier for use in tracing this goods item",
        xsd_type="TraceIDType",
        help=(
            "An identifier for use in tracing this goods item, such as the EPC"
            " number used in RFID."
        ),
    )

    ubl23_Item = fields.One2many(
        "ubl.23.item",
        "ubl23_Item_GoodsItemType_id",
        string="Product information relating to a goods item",
        help="Product information relating to a goods item.",
    )

    ubl23_GoodsItemContainer = fields.One2many(
        "ubl.23.goodsitemcontainer",
        "ubl23_GoodsItemContainer_GoodsItemType_id",
        string="GoodsItemContainer",
        help=(
            "The transporting of a goods item in a unit of transport equipment"
            " (e.g., container)."
        ),
    )

    ubl23_FreightAllowanceCharge = fields.One2many(
        "ubl.23.freightallowancecharge",
        "ubl23_FreightAllowanceCharge_GoodsItemType_id",
        string="A cost incurred by the shipper in moving goods",
        help=(
            "A cost incurred by the shipper in moving goods, by whatever "
            "means, from one place to another under the terms of the contract "
            "of carriage. In addition to transport costs, this may include "
            "such elements as packing, documentation, loading, unloading, and "
            "insurance to the extent that they relate to the freight costs."
        ),
    )

    ubl23_InvoiceLine = fields.One2many(
        "ubl.23.invoiceline",
        "ubl23_InvoiceLine_GoodsItemType_id",
        string="InvoiceLine",
        help=("Information about an invoice line relating to this goods item."),
    )

    ubl23_OrderLineReference = fields.One2many(
        "ubl.23.orderlinereference",
        "ubl23_OrderLineReference_GoodsItemType_id",
        string="OrderLineReference",
        help=("A reference to an order line associated with this goods item."),
    )

    ubl23_Temperature = fields.One2many(
        "ubl.23.temperature",
        "ubl23_Temperature_GoodsItemType_id",
        string="The temperature of the goods item.",
    )

    ubl23_ContainedGoodsItem = fields.One2many(
        "ubl.23.containedgoodsitem",
        "ubl23_ContainedGoodsItem_GoodsItemType_id",
        string="A goods item contained in this goods item",
        help="A goods item contained in this goods item.",
    )

    ubl23_OriginAddress = fields.Many2one(
        comodel_name="ubl.23.originaddress",
        string="OriginAddress",
        help=(
            "The region in which the goods have been produced or manufactured,"
            " according to criteria laid down for the purposes of application "
            "of the customs tariff, or of quantitative restrictions, or of any"
            " other measure related to trade."
        ),
    )

    ubl23_Delivery = fields.Many2one(
        comodel_name="ubl.23.delivery", string="The delivery of this goods item."
    )

    ubl23_Pickup = fields.Many2one(
        comodel_name="ubl.23.pickup", string="The pickup of this goods item."
    )

    ubl23_Despatch = fields.Many2one(
        comodel_name="ubl.23.despatch", string="The despatch of this goods item."
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_GoodsItemType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "goods item."
        ),
    )

    ubl23_ContainingPackage = fields.One2many(
        "ubl.23.containingpackage",
        "ubl23_ContainingPackage_GoodsItemType_id",
        string="A package containing this goods item",
        help="A package containing this goods item.",
    )

    ubl23_ShipmentDocumentReference = fields.Many2one(
        comodel_name="ubl.23.shipmentdocumentreference",
        string="ShipmentDocumentReference",
        help=("A reference to a shipping document associated with this goods " "item."),
    )

    ubl23_MinimumTemperature = fields.Many2one(
        comodel_name="ubl.23.minimumtemperature",
        string="Information about minimum temperature",
        help="Information about minimum temperature.",
    )

    ubl23_MaximumTemperature = fields.Many2one(
        comodel_name="ubl.23.maximumtemperature",
        string="Information about maximum temperature",
        help="Information about maximum temperature.",
    )


class GoodsProcessingType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Goods Processing. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the processing of goods and
    products</ns1:Definition>
    <ns1:ObjectClass>Goods Processing</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.goodsprocessingtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsProcessingType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this goods processing",
        xsd_type="IDType",
        help="An identifier for this goods processing.",
    )

    ubl23_TypeCode = fields.Char(
        string="A type code for this goods processing",
        xsd_type="TypeCodeType",
        help="A type code for this goods processing.",
    )

    ubl23_Description = fields.Char(
        string="Description",
        xsd_type="DescriptionType",
        help=(
            "A description for this goods processing expressed in one or more "
            "languages"
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period within this goods processing was performed",
    )

    ubl23_ProcessingParty = fields.Many2one(
        comodel_name="ubl.23.processingparty", string="The party processing the goods"
    )

    ubl23_CriterionItem = fields.One2many(
        "ubl.23.criterionitem",
        "ubl23_CriterionItem_GoodsProcessingType_id",
        string="CriterionItem",
        help=(
            "A reference to a criterion item that applies to this goods " "processing"
        ),
    )

    ubl23_SubGoodsProcessing = fields.One2many(
        "ubl.23.subgoodsprocessing",
        "ubl23_SubGoodsProcessing_GoodsProcessingType_id",
        string="A subordinate processing to this goods processing",
    )


class MiscellaneousEventType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Miscellaneous Event. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a miscellaneous event associated with a
    retail event.</ns1:Definition>
    <ns1:ObjectClass>Miscellaneous Event</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.miscellaneouseventtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MiscellaneousEventType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_MiscellaneousEventTypeCode = fields.Char(
        string="A code signifying the type of this miscellaneous event",
        xsd_required=True,
        xsd_type="MiscellaneousEventTypeCodeType",
        help=(
            "A code signifying the type of this miscellaneous event. Examples "
            "are: ASSORTMENT_CHARGE DISASTER FORECAST_DECREASE "
            "FORECAST_INCREASE FREIGHT_FLOW_ALLOCATION INVENTORY_POLICY_CHANGE"
            " LOCATION_CLOSING LOCATION_OPENING OTHER OUT_OF_STOCK "
            "PACKAGING_LABELING_CHANGE PRICE_DECREASE PRICE_INCREASE "
            "STORE_FORMAT_OR_PLANOGRAM_CHANGE TEST_MARKET WEATHER"
        ),
    )

    ubl23_EventLineItem = fields.One2many(
        "ubl.23.eventlineitem",
        "ubl23_EventLineItem_MiscellaneousEventType_id",
        string="An event line item for this miscellaneous retail event",
        help="An event line item for this miscellaneous retail event.",
    )


class ProcurementProjectType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Procurement Project. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a project to procure goods, works, or
    services.</ns1:Definition>
    <ns1:ObjectClass>Procurement Project</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.procurementprojecttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProjectType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this procurement project",
        xsd_type="IDType",
        help="An identifier for this procurement project.",
    )

    ubl23_Name = fields.Char(
        string="A name of this procurement project.", xsd_type="NameType"
    )

    ubl23_Description = fields.Char(
        string="Text describing this procurement project",
        xsd_type="DescriptionType",
        help="Text describing this procurement project.",
    )

    ubl23_ProcurementTypeCode = fields.Char(
        string="A code signifying the type of procurement project",
        xsd_type="ProcurementTypeCodeType",
        help=(
            "A code signifying the type of procurement project (e.g., goods, "
            "works, services)."
        ),
    )

    ubl23_ProcurementSubTypeCode = fields.Char(
        string="ProcurementSubTypeCode",
        xsd_type="ProcurementSubTypeCodeType",
        help=(
            "A code signifying the subcategory of the type of work for this "
            "project (e.g., land surveying, IT consulting)."
        ),
    )

    ubl23_QualityControlCode = fields.Char(
        string="QualityControlCode",
        xsd_type="QualityControlCodeType",
        help=(
            "The indication of whether or not the control quality is included "
            "in the works project."
        ),
    )

    ubl23_RequiredFeeAmount = fields.Float(
        string="RequiredFeeAmount",
        xsd_type="RequiredFeeAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount of the reimbursement fee for concession procurement "
            "projects."
        ),
    )

    ubl23_FeeDescription = fields.Char(
        string="FeeDescription",
        xsd_type="FeeDescriptionType",
        help=(
            "Text describing the reimbursement fee for concession procurement "
            "projects."
        ),
    )

    ubl23_RequestedDeliveryDate = fields.Date(
        string="The requested delivery date for this procurement project",
        help="The requested delivery date for this procurement project.",
    )

    ubl23_EstimatedOverallContractQuantity = fields.Float(
        string="EstimatedOverallContractQuantity",
        xsd_type="EstimatedOverallContractQuantityType",
        digits=(
            16,
            4,
        ),
        help="The estimated overall quantity for this procurement project.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text applying to the Procurement Project. This element "
            "may contain additional information about the lot/contract that is"
            " not contained explicitly in another structure."
        ),
    )

    ubl23_SMESuitableIndicator = fields.Boolean(
        string="Suitable for Small",
        help=(
            "Suitable for Small- and Medium-sized Enterprises. This element "
            "specifies that the buyer accepts the risks associated of "
            "contracting with SMEs."
        ),
    )

    ubl23_ProcurementAdditionalType = fields.One2many(
        "ubl.23.procurementadditionaltype",
        "ubl23_ProcurementAdditionalType_ProcurementProjectType_id",
        string="An association to additional procurement type",
        help="An association to additional procurement type.",
    )

    ubl23_RequestedTenderTotal = fields.Many2one(
        comodel_name="ubl.23.requestedtendertotal",
        string="Budget monetary amounts for the project as whole",
        help="Budget monetary amounts for the project as whole.",
    )

    ubl23_MainCommodityClassification = fields.One2many(
        "ubl.23.maincommoditytypeification",
        "ubl23_MainCommodityClassification_ProcurementProjectType_id",
        string="MainCommodityClassification",
        help=(
            "An association to the main classification category for the "
            "deliverable requested."
        ),
    )

    ubl23_AdditionalCommodityClassification = fields.One2many(
        "ubl.23.additionalcommoditytypeification",
        "ubl23_AdditionalCommodityClassification_ProcurementProjectType_id",
        string="AdditionalCommodityClassification",
        help=(
            "An association to additional classification categories for the "
            "deliverable requested."
        ),
    )

    ubl23_RealizedLocation = fields.One2many(
        "ubl.23.realizedlocation",
        "ubl23_RealizedLocation_ProcurementProjectType_id",
        string="RealizedLocation",
        help=("A place where this procurement project will be physically " "realized."),
    )

    ubl23_PlannedPeriod = fields.Many2one(
        comodel_name="ubl.23.plannedperiod",
        string="PlannedPeriod",
        help=(
            "The period during which this procurement project is planned to "
            "take place."
        ),
    )

    ubl23_ContractExtension = fields.Many2one(
        comodel_name="ubl.23.contractextension",
        string="The contract extension for this tendering process",
        help="The contract extension for this tendering process.",
    )

    ubl23_RequestForTenderLine = fields.One2many(
        "ubl.23.requestfortenderline",
        "ubl23_RequestForTenderLine_ProcurementProjectType_id",
        string="A good or service this project is intended to procure",
        help="A good or service this project is intended to procure.",
    )


class PromotionalEventLineItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Promotional Event Line Item.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a line item associated with a promotional
    event.</ns1:Definition>
    <ns1:ObjectClass>Promotional Event Line Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.promotionaleventlineitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalEventLineItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Amount = fields.Monetary(
        string="Amount",
        xsd_required=True,
        xsd_type="AmountType",
        currency_field="brl_currency_id",
        help="The amount associated with this promotional event line item.",
    )

    ubl23_EventLineItem = fields.Many2one(
        comodel_name="ubl.23.eventlineitem",
        string="EventLineItem",
        xsd_required=True,
        help=(
            "A line item describing the expected impacts associated with this "
            "promotional event for a specific product at a specific location."
        ),
    )


class AttestationLine(models.AbstractModel):
    _description = "AttestationLine"
    _name = "ubl.23.attestationline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AttestationLine"

    ubl23_AttestationLine_AttestationType_id = fields.Many2one(
        comodel_name="ubl.23.attestationtype", xsd_implicit=True, ondelete="cascade"
    )


class ContainedGoodsItem(models.AbstractModel):
    _description = "ContainedGoodsItem"
    _name = "ubl.23.containedgoodsitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContainedGoodsItem"

    ubl23_ContainedGoodsItem_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )


class GoodsItem(models.AbstractModel):
    _description = "GoodsItem"
    _name = "ubl.23.goodsitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItem"

    ubl23_GoodsItem_PackageType_id = fields.Many2one(
        comodel_name="ubl.23.packagetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_GoodsItem_ShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.shipmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_GoodsItem_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_GoodsItem_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class GoodsProcessing(models.AbstractModel):
    _description = "GoodsProcessing"
    _name = "ubl.23.goodsprocessing"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsProcessing"


class MiscellaneousEvent(models.AbstractModel):
    _description = "MiscellaneousEvent"
    _name = "ubl.23.miscellaneousevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MiscellaneousEvent"


class ProcurementProject(models.AbstractModel):
    _description = "ProcurementProject"
    _name = "ubl.23.procurementproject"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProject"


class PromotionalEventLineItem(models.AbstractModel):
    _description = "PromotionalEventLineItem"
    _name = "ubl.23.promotionaleventlineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalEventLineItem"

    ubl23_PromotionalEventLineItem_PromotionalSpecificationType_id = fields.Many2one(
        comodel_name="ubl.23.promotionalspecificationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ReferencedGoodsItem(models.AbstractModel):
    _description = "ReferencedGoodsItem"
    _name = "ubl.23.referencedgoodsitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedGoodsItem"


class SubAttestationLine(models.AbstractModel):
    _description = "SubAttestationLine"
    _name = "ubl.23.subattestationline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubAttestationLine"

    ubl23_SubAttestationLine_AttestationLineType_id = fields.Many2one(
        comodel_name="ubl.23.attestationlinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubGoodsProcessing(models.AbstractModel):
    _description = "SubGoodsProcessing"
    _name = "ubl.23.subgoodsprocessing"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubGoodsProcessing"

    ubl23_SubGoodsProcessing_GoodsProcessingType_id = fields.Many2one(
        comodel_name="ubl.23.goodsprocessingtype", xsd_implicit=True, ondelete="cascade"
    )


class AttestationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Attestation. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing an attestation made for an
    item</ns1:Definition>
    <ns1:ObjectClass>Attestation</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.attestationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AttestationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this attestation.", xsd_type="IDType"
    )

    ubl23_Name = fields.Char(string="A name of this attestation.", xsd_type="NameType")

    ubl23_Description = fields.Char(
        string="A textual description of this attestation",
        xsd_type="DescriptionType",
        help="A textual description of this attestation.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_AcceptanceIndicator = fields.Boolean(
        string="Indicates whether the attestation has been accepted or not",
        help="Indicates whether the attestation has been accepted or not.",
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which this attestation is valid",
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty", string="The party issuing this attestation"
    )

    ubl23_AttestationLine = fields.One2many(
        "ubl.23.attestationline",
        "ubl23_AttestationLine_AttestationType_id",
        string="AttestationLine",
        help=(
            "An attestation or statement made and which forms part of this "
            "attestation"
        ),
    )


class GoodsItemPassportCounterfoilType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Goods Item Passport Counterfoil.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing a Goods Item Passport or ATA Carnet
    Counterfoil</ns1:Definition>
    <ns1:ObjectClass>Goods Item Passport Counterfoil</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>ATA Carnet
    Counterfoil</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.goodsitempassportcounterfoiltype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemPassportCounterfoilType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="This identifier for this Goods Item Passport Counterfoil",
        xsd_required=True,
        xsd_type="IDType",
    )

    ubl23_GoodsItemPassportID = fields.Char(
        string="GoodsItemPassportID",
        xsd_type="GoodsItemPassportIDType",
        help=(
            "The identifier of the Goods Item Passport or ATA Carnet of this "
            "counterfoil, usually the number on the upper part of the orange "
            "hazard placard required on the means of transport"
        ),
    )

    ubl23_FinalReexportationDate = fields.Date(
        string="Final date of re-exportation",
        help=(
            "Final date of re-exportation, if less than the overall validity "
            "period of te Goods Item Passport or ATA Carnet"
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_CustomsOfficeLocation = fields.Many2one(
        comodel_name="ubl.23.customsofficelocation",
        string="CustomsOfficeLocation",
        help=(
            "The location of the customs office to where the counterfoil has "
            "been presented"
        ),
    )

    ubl23_GoodsItem = fields.Many2one(
        comodel_name="ubl.23.goodsitem",
        string="A goods item associated with this counterfoil",
    )

    ubl23_ExportationDocumentReference = fields.One2many(
        "ubl.23.exportationdocumentreference",
        "ubl23_ExportationDocumentReference_GoodsItemPassportCounterfoilType_id",
        string="ExportationDocumentReference",
        help=(
            "A reference to a document used for the export of the goods "
            "related to this counterfoil"
        ),
    )

    ubl23_ImportationDocumentReference = fields.One2many(
        "ubl.23.importationdocumentreference",
        "ubl23_ImportationDocumentReference_GoodsItemPassportCounterfoilType_id",
        string="ImportationDocumentReference",
        help=(
            "A reference to a document used for the import of the goods "
            "related to this counterfoil"
        ),
    )

    ubl23_ReexportationDocumentReference = fields.One2many(
        "ubl.23.reexportationdocumentreference",
        "ubl23_ReexportationDocumentReference_GoodsItemPassportCounterfoilType_id",
        string="A reference to a document used for the re",
        help=(
            "A reference to a document used for the re-exportation of the "
            "goods related to this counterfoil"
        ),
    )

    ubl23_ReimportationDocumentReference = fields.One2many(
        "ubl.23.reimportationdocumentreference",
        "ubl23_ReimportationDocumentReference_GoodsItemPassportCounterfoilType_id",
        string="A reference to a document used for re",
        help=(
            "A reference to a document used for re-importation of the goods "
            "related to this counterfoil"
        ),
    )

    ubl23_VoucherDocumentReference = fields.One2many(
        "ubl.23.voucherdocumentreference",
        "ubl23_VoucherDocumentReference_GoodsItemPassportCounterfoilType_id",
        string="A reference to a voucher related to this counterfoil",
    )


class PackageType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Package. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a package.</ns1:Definition>
    <ns1:ObjectClass>Package</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.packagetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PackageType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this package.", xsd_type="IDType")

    ubl23_Quantity = fields.Float(
        string="The quantity of items contained in this package",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of items contained in this package.",
    )

    ubl23_ReturnableMaterialIndicator = fields.Boolean(
        string="An indicator that the packaging material is returnable",
        help=(
            "An indicator that the packaging material is returnable (true) or "
            "not (false)."
        ),
    )

    ubl23_PackageLevelCode = fields.Char(
        string="A code signifying a level of packaging",
        xsd_type="PackageLevelCodeType",
        help="A code signifying a level of packaging.",
    )

    ubl23_PackagingTypeCode = fields.Char(
        string="A code signifying a type of packaging",
        xsd_type="PackagingTypeCodeType",
        help="A code signifying a type of packaging.",
    )

    ubl23_PackagingType = fields.Char(
        string="The type of packaging",
        xsd_type="PackagingTypeType",
        help="The type of packaging, described as a text.",
    )

    ubl23_PackingMaterial = fields.Char(
        string="Text describing the packaging material",
        xsd_type="PackingMaterialType",
        help="Text describing the packaging material.",
    )

    ubl23_TraceID = fields.Char(
        string="An identifier for use in tracing this package",
        xsd_type="TraceIDType",
        help=(
            "An identifier for use in tracing this package, such as the EPC "
            "number used in RFID."
        ),
    )

    ubl23_ContainedPackage = fields.One2many(
        "ubl.23.containedpackage",
        "ubl23_ContainedPackage_PackageType_id",
        string="A package contained within this package",
        help="A package contained within this package.",
    )

    ubl23_ContainingTransportEquipment = fields.Many2one(
        comodel_name="ubl.23.containingtransportequipment",
        string="The piece of transport equipment containing this package",
        help="The piece of transport equipment containing this package.",
    )

    ubl23_GoodsItem = fields.One2many(
        "ubl.23.goodsitem",
        "ubl23_GoodsItem_PackageType_id",
        string="A goods item included in this package",
        help="A goods item included in this package.",
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_PackageType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "package."
        ),
    )

    ubl23_DeliveryUnit = fields.One2many(
        "ubl.23.deliveryunit",
        "ubl23_DeliveryUnit_PackageType_id",
        string="A delivery unit within this package.",
    )

    ubl23_Delivery = fields.Many2one(
        comodel_name="ubl.23.delivery", string="The delivery of this package."
    )

    ubl23_Pickup = fields.Many2one(
        comodel_name="ubl.23.pickup", string="The pickup of this package."
    )

    ubl23_Despatch = fields.Many2one(
        comodel_name="ubl.23.despatch", string="The despatch of this package."
    )


class ProcurementProjectLotType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Procurement Project Lot.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe one of the parts of a procurement project
    that is being subdivided to allow the contracting party to award different
    lots to different economic operators under different
    contracts.</ns1:Definition>
    <ns1:ObjectClass>Procurement Project Lot</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.procurementprojectlottype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProjectLotType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this procurement project lot",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this procurement project lot.",
    )

    ubl23_LegalDocumentReference = fields.One2many(
        "ubl.23.legaldocumentreference",
        "ubl23_LegalDocumentReference_ProcurementProjectLotType_id",
        string="A reference to a legal document.",
    )

    ubl23_TechnicalDocumentReference = fields.One2many(
        "ubl.23.technicaldocumentreference",
        "ubl23_TechnicalDocumentReference_ProcurementProjectLotType_id",
        string="A reference to a technical document.",
    )

    ubl23_RequiredDocumentReference = fields.One2many(
        "ubl.23.requireddocumentreference",
        "ubl23_RequiredDocumentReference_ProcurementProjectLotType_id",
        string="A reference to a required document.",
    )

    ubl23_ProvidedDocumentReference = fields.One2many(
        "ubl.23.provideddocumentreference",
        "ubl23_ProvidedDocumentReference_ProcurementProjectLotType_id",
        string="A reference to a provided document.",
    )

    ubl23_AdditionalDocumentReference = fields.One2many(
        "ubl.23.additionaldocumentreference",
        "ubl23_AdditionalDocumentReference_ProcurementProjectLotType_id",
        string="AdditionalDocumentReference",
        help=(
            "A reference to an additional document associated with this " "document."
        ),
    )

    ubl23_TenderingTerms = fields.Many2one(
        comodel_name="ubl.23.tenderingterms",
        string="Tendering terms for this procurement project lot",
        help="Tendering terms for this procurement project lot.",
    )

    ubl23_TenderingProcess = fields.Many2one(
        comodel_name="ubl.23.tenderingprocess",
        string="Tendering process for this procurement project lot",
        help="Tendering process for this procurement project lot.",
    )

    ubl23_ProcurementProject = fields.Many2one(
        comodel_name="ubl.23.procurementproject",
        string="A description of the procurement project to be divided",
        help="A description of the procurement project to be divided.",
    )


class PromotionalSpecificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Promotional Specification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a promotional event as a set of item
    locations that share a set of promotional tactics.</ns1:Definition>
    <ns1:ObjectClass>Promotional Specification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.promotionalspecificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalSpecificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SpecificationID = fields.Char(
        string="An identifier for this promotional specification",
        xsd_type="SpecificationIDType",
        help="An identifier for this promotional specification.",
    )

    ubl23_PromotionalEventLineItem = fields.One2many(
        "ubl.23.promotionaleventlineitem",
        "ubl23_PromotionalEventLineItem_PromotionalSpecificationType_id",
        string="PromotionalEventLineItem",
        help=(
            "A line item for a promotional event involving a specific product "
            "at a specific location; it describes the expected impacts "
            "associated with the event and specifies the promotional price of "
            "the item."
        ),
    )

    ubl23_EventTactic = fields.One2many(
        "ubl.23.eventtactic",
        "ubl23_EventTactic_PromotionalSpecificationType_id",
        string="An event tactic associated with this promotion",
        help="An event tactic associated with this promotion.",
    )


class ActualPackage(models.AbstractModel):
    _description = "ActualPackage"
    _name = "ubl.23.actualpackage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActualPackage"

    ubl23_ActualPackage_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class Attestation(models.AbstractModel):
    _description = "Attestation"
    _name = "ubl.23.attestation"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Attestation"


class ContainedPackage(models.AbstractModel):
    _description = "ContainedPackage"
    _name = "ubl.23.containedpackage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContainedPackage"

    ubl23_ContainedPackage_PackageType_id = fields.Many2one(
        comodel_name="ubl.23.packagetype", xsd_implicit=True, ondelete="cascade"
    )


class ContainingPackage(models.AbstractModel):
    _description = "ContainingPackage"
    _name = "ubl.23.containingpackage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContainingPackage"

    ubl23_ContainingPackage_GoodsItemType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemtype", xsd_implicit=True, ondelete="cascade"
    )


class GoodsItemPassportCounterfoil(models.AbstractModel):
    _description = "GoodsItemPassportCounterfoil"
    _name = "ubl.23.goodsitempassportcounterfoil"
    _inherit = "spec.mixin.ubl"
    _binding_type = "GoodsItemPassportCounterfoil"


class InterestedProcurementProjectLot(models.AbstractModel):
    _description = "InterestedProcurementProjectLot"
    _name = "ubl.23.interestedprocurementprojectlot"
    _inherit = "spec.mixin.ubl"
    _binding_type = "InterestedProcurementProjectLot"

    ubl23_InterestedProcurementProjectLot_TendererPartyQualificationType_id = (
        fields.Many2one(
            comodel_name="ubl.23.tendererpartyqualificationtype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class Package(models.AbstractModel):
    _description = "Package"
    _name = "ubl.23.package"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Package"

    ubl23_Package_OrderedShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.orderedshipmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Package_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_Package_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ProcurementProjectLot(models.AbstractModel):
    _description = "ProcurementProjectLot"
    _name = "ubl.23.procurementprojectlot"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ProcurementProjectLot"

    ubl23_ProcurementProjectLot_TenderPreparationType_id = fields.Many2one(
        comodel_name="ubl.23.tenderpreparationtype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ProcurementProjectLot_TenderedProjectType_id = fields.Many2one(
        comodel_name="ubl.23.tenderedprojecttype", xsd_implicit=True, ondelete="cascade"
    )


class PromotionalSpecification(models.AbstractModel):
    _description = "PromotionalSpecification"
    _name = "ubl.23.promotionalspecification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalSpecification"

    ubl23_PromotionalSpecification_PromotionalEventType_id = fields.Many2one(
        comodel_name="ubl.23.promotionaleventtype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ReferencedPackage(models.AbstractModel):
    _description = "ReferencedPackage"
    _name = "ubl.23.referencedpackage"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedPackage"


class PromotionalEventType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Promotional Event. Details</ns1:DictionaryEntryName>
    <ns1:Definition>Agree can be renamed as PromotionalEvents</ns1:Definition>
    <ns1:ObjectClass>Promotional Event</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.promotionaleventtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalEventType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PromotionalEventTypeCode = fields.Char(
        string="A code signifying the type of this promotional event",
        xsd_required=True,
        xsd_type="PromotionalEventTypeCodeType",
        help=(
            "A code signifying the type of this promotional event. Examples "
            "can be: Holiday, Seasonal Event, Store Closing, Trade Item "
            "Introduction"
        ),
    )

    ubl23_SubmissionDate = fields.Date(
        string="SubmissionDate",
        help=(
            "The date on which a proposal for this promotional event was " "submitted."
        ),
    )

    ubl23_FirstShipmentAvailibilityDate = fields.Date(
        string="FirstShipmentAvailibilityDate",
        help=(
            "The first day that products will be available to ship from buyer "
            "to seller if the proposal for this promotional event is accepted."
        ),
    )

    ubl23_LatestProposalAcceptanceDate = fields.Date(
        string="The deadline for acceptance of this promotional event",
        help="The deadline for acceptance of this promotional event.",
    )

    ubl23_PromotionalSpecification = fields.One2many(
        "ubl.23.promotionalspecification",
        "ubl23_PromotionalSpecification_PromotionalEventType_id",
        string="A specification for a promotional event",
        help="A specification for a promotional event.",
    )


class QualificationResolutionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Qualification Resolution.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the acceptance or rejection of an economic
    operator in a tendering process.</ns1:Definition>
    <ns1:ObjectClass>Qualification Resolution</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.qualificationresolutiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QualificationResolutionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AdmissionCode = fields.Char(
        string="AdmissionCode",
        xsd_required=True,
        xsd_type="AdmissionCodeType",
        help=(
            "An indicator that the economic operator has been accepted into "
            "the tendering process (true) or rejected from the tendering "
            "process (false)."
        ),
    )

    ubl23_ExclusionReason = fields.Char(
        string="ExclusionReason",
        xsd_type="ExclusionReasonType",
        help=(
            "Text describing a reason for an exclusion from the tendering " "process."
        ),
    )

    ubl23_Resolution = fields.Char(
        string="Text describing this qualification resolution",
        xsd_type="ResolutionType",
        help="Text describing this qualification resolution.",
    )

    ubl23_ResolutionDate = fields.Date(
        string="ResolutionDate",
        xsd_required=True,
        help=("The date on which this qualification resolution was formalized."),
    )

    ubl23_ProcurementProjectLot = fields.Many2one(
        comodel_name="ubl.23.procurementprojectlot",
        string="ProcurementProjectLot",
        help=(
            "The Procurement project lot to which this tenderer is accepted or"
            " rejected."
        ),
    )


class TenderedProjectType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tendered Project. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a tendered project or project
    lot.</ns1:Definition>
    <ns1:ObjectClass>Tendered Project</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderedprojecttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderedProjectType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_VariantID = fields.Char(
        string="An identifier for this variant of a tendered project",
        xsd_type="VariantIDType",
        help="An identifier for this variant of a tendered project.",
    )

    ubl23_FeeAmount = fields.Float(
        string="The fee amount for tendered projects",
        xsd_type="FeeAmountType",
        digits=(
            16,
            4,
        ),
        help="The fee amount for tendered projects.",
    )

    ubl23_FeeDescription = fields.Char(
        string="Text describing the fee amount for tendered projects",
        xsd_type="FeeDescriptionType",
        help="Text describing the fee amount for tendered projects.",
    )

    ubl23_TenderEnvelopeID = fields.Char(
        string="TenderEnvelopeID",
        xsd_type="TenderEnvelopeIDType",
        help=(
            "An identifier for the tender envelope this tendered project " "belongs to."
        ),
    )

    ubl23_TenderEnvelopeTypeCode = fields.Char(
        string="TenderEnvelopeTypeCode",
        xsd_type="TenderEnvelopeTypeCodeType",
        help=(
            "A code signifying the type of tender envelope this tendered "
            "project belongs to."
        ),
    )

    ubl23_AdditionalFee = fields.One2many(
        "ubl.23.additionalfee",
        "ubl23_AdditionalFee_TenderedProjectType_id",
        string="An additional fee for this tendered project",
        help="An additional fee for this tendered project.",
    )

    ubl23_ProcurementProjectLot = fields.One2many(
        "ubl.23.procurementprojectlot",
        "ubl23_ProcurementProjectLot_TenderedProjectType_id",
        string="ProcurementProjectLot",
        help=(
            "The procurement project lot to which this Tender Line refers to. "
            "If there are no lots, this should not be defined."
        ),
    )

    ubl23_EvidenceDocumentReference = fields.One2many(
        "ubl.23.evidencedocumentreference",
        "ubl23_EvidenceDocumentReference_TenderedProjectType_id",
        string="A reference to a non",
        help=(
            "A reference to a non-structured evidentiary document supporting "
            "this tendered project."
        ),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_TenderedProjectType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to the "
            "monetary total for this tendered project."
        ),
    )

    ubl23_LegalMonetaryTotal = fields.Many2one(
        comodel_name="ubl.23.legalmonetarytotal",
        string="The total amount for this tendered project",
        help="The total amount for this tendered project.",
    )

    ubl23_TenderLine = fields.One2many(
        "ubl.23.tenderline",
        "ubl23_TenderLine_TenderedProjectType_id",
        string="A line in the tender for this tendered project",
        help="A line in the tender for this tendered project.",
    )

    ubl23_AwardingCriterionResponse = fields.One2many(
        "ubl.23.awardingcriterionresponse",
        "ubl23_AwardingCriterionResponse_TenderedProjectType_id",
        string="An association to an Awarding Criterion Response",
        help="An association to an Awarding Criterion Response.",
    )


class TendererPartyQualificationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tenderer Party Qualification.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the qualifications of a tenderer
    party.</ns1:Definition>
    <ns1:ObjectClass>Tenderer Party Qualification</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tendererpartyqualificationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererPartyQualificationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_InterestedProcurementProjectLot = fields.One2many(
        "ubl.23.interestedprocurementprojectlot",
        "ubl23_InterestedProcurementProjectLot_TendererPartyQualificationType_id",
        string="The procurement project lot the party is interested in",
        help="The procurement project lot the party is interested in.",
    )

    ubl23_MainQualifyingParty = fields.Many2one(
        comodel_name="ubl.23.mainqualifyingparty",
        string="The qualifications of the main tenderer party",
        xsd_required=True,
        help="The qualifications of the main tenderer party.",
    )

    ubl23_AdditionalQualifyingParty = fields.One2many(
        "ubl.23.additionalqualifyingparty",
        "ubl23_AdditionalQualifyingParty_TendererPartyQualificationType_id",
        string="AdditionalQualifyingParty",
        help=(
            "The qualifications of a tenderer party other than the main "
            "tenderer party when bidding as a consortium."
        ),
    )


class TransportHandlingUnitType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Handling Unit.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a uniquely identifiable unit consisting of
    one or more packages, goods items, or pieces of transport
    equipment.</ns1:Definition>
    <ns1:ObjectClass>Transport Handling Unit</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Logistics Unit, Handling Unit,
    THU</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transporthandlingunittype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportHandlingUnitType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this transport handling unit",
        xsd_type="IDType",
        help="An identifier for this transport handling unit.",
    )

    ubl23_TransportHandlingUnitTypeCode = fields.Char(
        string="A code signifying the type of this transport handling unit",
        xsd_type="TransportHandlingUnitTypeCodeType",
        help="A code signifying the type of this transport handling unit.",
    )

    ubl23_HandlingCode = fields.Char(
        string="The handling required for this transport handling unit",
        xsd_type="HandlingCodeType",
        help=(
            "The handling required for this transport handling unit, expressed"
            " as a code."
        ),
    )

    ubl23_HandlingInstructions = fields.Char(
        string="HandlingInstructions",
        xsd_type="HandlingInstructionsType",
        help=(
            "The handling required for this transport handling unit, expressed"
            " as text."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="HazardousRiskIndicator",
        help=(
            "An indicator that the materials contained in this transport "
            "handling unit are subject to an international regulation "
            "concerning the carriage of dangerous goods (true) or not (false)."
        ),
    )

    ubl23_TotalGoodsItemQuantity = fields.Float(
        string="TotalGoodsItemQuantity",
        xsd_type="TotalGoodsItemQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The total number of goods items in this transport handling unit."),
    )

    ubl23_TotalPackageQuantity = fields.Float(
        string="TotalPackageQuantity",
        xsd_type="TotalPackageQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The total number of packages in this transport handling unit."),
    )

    ubl23_DamageRemarks = fields.Char(
        string="DamageRemarks",
        xsd_type="DamageRemarksType",
        help=(
            "Text describing damage associated with this transport handling " "unit."
        ),
    )

    ubl23_ShippingMarks = fields.Char(
        string="ShippingMarks",
        xsd_type="ShippingMarksType",
        help=(
            "Text describing the marks and numbers on this transport handling " "unit."
        ),
    )

    ubl23_TraceID = fields.Char(
        string="TraceID",
        xsd_type="TraceIDType",
        help=(
            "An identifier for use in tracing this transport handling unit, "
            "such as the EPC number used in RFID."
        ),
    )

    ubl23_HandlingUnitDespatchLine = fields.One2many(
        "ubl.23.handlingunitdespatchline",
        "ubl23_HandlingUnitDespatchLine_TransportHandlingUnitType_id",
        string="HandlingUnitDespatchLine",
        help=("A despatch line associated with this transport handling unit."),
    )

    ubl23_ActualPackage = fields.One2many(
        "ubl.23.actualpackage",
        "ubl23_ActualPackage_TransportHandlingUnitType_id",
        string="A package contained in this transport handling unit",
        help="A package contained in this transport handling unit.",
    )

    ubl23_ReceivedHandlingUnitReceiptLine = fields.One2many(
        "ubl.23.receivedhandlingunitreceiptline",
        "ubl23_ReceivedHandlingUnitReceiptLine_TransportHandlingUnitType_id",
        string="ReceivedHandlingUnitReceiptLine",
        help="A receipt line associated with this transport handling unit.",
    )

    ubl23_TransportEquipment = fields.One2many(
        "ubl.23.transportequipment",
        "ubl23_TransportEquipment_TransportHandlingUnitType_id",
        string="TransportEquipment",
        help=(
            "A piece of transport equipment associated with this transport "
            "handling unit."
        ),
    )

    ubl23_TransportMeans = fields.One2many(
        "ubl.23.transportmeans",
        "ubl23_TransportMeans_TransportHandlingUnitType_id",
        string="TransportMeans",
        help=("A means of transport associated with this transport handling " "unit."),
    )

    ubl23_HazardousGoodsTransit = fields.One2many(
        "ubl.23.hazardousgoodstransit",
        "ubl23_HazardousGoodsTransit_TransportHandlingUnitType_id",
        string="Transit",
        help=(
            "Transit-related information regarding a type of hazardous goods "
            "contained in this transport handling unit."
        ),
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_TransportHandlingUnitType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "transport handling unit."
        ),
    )

    ubl23_MinimumTemperature = fields.Many2one(
        comodel_name="ubl.23.minimumtemperature",
        string="MinimumTemperature",
        help=(
            "The minimum required operating temperature of this transport "
            "handling unit."
        ),
    )

    ubl23_MaximumTemperature = fields.Many2one(
        comodel_name="ubl.23.maximumtemperature",
        string="MaximumTemperature",
        help=(
            "The maximum allowable operating temperature of this transport "
            "handling unit."
        ),
    )

    ubl23_GoodsItem = fields.One2many(
        "ubl.23.goodsitem",
        "ubl23_GoodsItem_TransportHandlingUnitType_id",
        string="A goods item contained in this transport handling unit",
        help="A goods item contained in this transport handling unit.",
    )

    ubl23_FloorSpaceMeasurementDimension = fields.Many2one(
        comodel_name="ubl.23.floorspacemeasurementdimension",
        string="FloorSpaceMeasurementDimension",
        help=(
            "The floor space measurement dimension associated with this "
            "transport handling unit."
        ),
    )

    ubl23_PalletSpaceMeasurementDimension = fields.Many2one(
        comodel_name="ubl.23.palletspacemeasurementdimension",
        string="PalletSpaceMeasurementDimension",
        help=(
            "The pallet space measurement dimension associated to this "
            "transport handling unit."
        ),
    )

    ubl23_ShipmentDocumentReference = fields.One2many(
        "ubl.23.shipmentdocumentreference",
        "ubl23_ShipmentDocumentReference_TransportHandlingUnitType_id",
        string="ShipmentDocumentReference",
        help=(
            "A reference to a shipping document associated with this transport"
            " handling unit."
        ),
    )

    ubl23_Status = fields.One2many(
        "ubl.23.status",
        "ubl23_Status_TransportHandlingUnitType_id",
        string="The status of this transport handling unit",
        help="The status of this transport handling unit.",
    )

    ubl23_CustomsDeclaration = fields.One2many(
        "ubl.23.customsdeclaration",
        "ubl23_CustomsDeclaration_TransportHandlingUnitType_id",
        string="CustomsDeclaration",
        help=("Describes identifiers or references relating to customs " "procedures."),
    )

    ubl23_ReferencedShipment = fields.One2many(
        "ubl.23.referencedshipment",
        "ubl23_ReferencedShipment_TransportHandlingUnitType_id",
        string="A shipment associated with this transport handling unit",
        help="A shipment associated with this transport handling unit.",
    )

    ubl23_Package = fields.One2many(
        "ubl.23.package",
        "ubl23_Package_TransportHandlingUnitType_id",
        string="Package",
        help="A package contained in this transport handling unit.",
    )


class AwardedTenderedProject(models.AbstractModel):
    _description = "AwardedTenderedProject"
    _name = "ubl.23.awardedtenderedproject"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AwardedTenderedProject"


class PackagedTransportHandlingUnit(models.AbstractModel):
    _description = "PackagedTransportHandlingUnit"
    _name = "ubl.23.packagedtransporthandlingunit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PackagedTransportHandlingUnit"

    ubl23_PackagedTransportHandlingUnit_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PromotionalEvent(models.AbstractModel):
    _description = "PromotionalEvent"
    _name = "ubl.23.promotionalevent"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PromotionalEvent"


class QualificationResolution(models.AbstractModel):
    _description = "QualificationResolution"
    _name = "ubl.23.qualificationresolution"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QualificationResolution"


class TenderedProject(models.AbstractModel):
    _description = "TenderedProject"
    _name = "ubl.23.tenderedproject"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderedProject"


class TendererPartyQualification(models.AbstractModel):
    _description = "TendererPartyQualification"
    _name = "ubl.23.tendererpartyqualification"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TendererPartyQualification"


class TransportHandlingUnit(models.AbstractModel):
    _description = "TransportHandlingUnit"
    _name = "ubl.23.transporthandlingunit"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportHandlingUnit"

    ubl23_TransportHandlingUnit_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_TransportHandlingUnit_ShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.shipmenttype", xsd_implicit=True, ondelete="cascade"
    )


class TransportEquipmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transport Equipment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a piece of equipment used to transport
    goods.</ns1:Definition>
    <ns1:ObjectClass>Transport Equipment</ns1:ObjectClass>
    <ns1:AlternativeBusinessTerms>Shipping Container, Sea Container, Rail Wagon,
    Pallet, Trailer, Unit Load Device, ULD</ns1:AlternativeBusinessTerms>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportequipmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEquipmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this piece of transport equipment",
        xsd_type="IDType",
        help="An identifier for this piece of transport equipment.",
    )

    ubl23_ReferencedConsignmentID = fields.Char(
        string="ReferencedConsignmentID",
        xsd_type="ReferencedConsignmentIDType",
        help=(
            "An identifier for the consignment contained by this piece of "
            "transport equipment."
        ),
    )

    ubl23_TransportEquipmentTypeCode = fields.Char(
        string="TransportEquipmentTypeCode",
        xsd_type="TransportEquipmentTypeCodeType",
        help=("A code signifying the type of this piece of transport equipment."),
    )

    ubl23_ProviderTypeCode = fields.Char(
        string="ProviderTypeCode",
        xsd_type="ProviderTypeCodeType",
        help=(
            "A code signifying the type of provider of this piece of transport"
            " equipment."
        ),
    )

    ubl23_OwnerTypeCode = fields.Char(
        string="OwnerTypeCode",
        xsd_type="OwnerTypeCodeType",
        help=(
            "A code signifying the type of owner of this piece of transport "
            "equipment."
        ),
    )

    ubl23_SizeTypeCode = fields.Char(
        string="SizeTypeCode",
        xsd_type="SizeTypeCodeType",
        help=(
            "A code signifying the size and type of this piece of piece of "
            "transport equipment. When the piece of transport equipment is a "
            "shipping container, it is recommended to use "
            "ContainerSizeTypeCode for validation."
        ),
    )

    ubl23_DispositionCode = fields.Char(
        string="DispositionCode",
        xsd_type="DispositionCodeType",
        help=(
            "A code signifying the current disposition of this piece of "
            "transport equipment."
        ),
    )

    ubl23_FullnessIndicationCode = fields.Char(
        string="FullnessIndicationCode",
        xsd_type="FullnessIndicationCodeType",
        help=(
            "A code signifying whether this piece of transport equipment is "
            "full, partially full, or empty."
        ),
    )

    ubl23_RefrigerationOnIndicator = fields.Boolean(
        string="RefrigerationOnIndicator",
        help=(
            "An indicator that this piece of transport equipment's "
            "refrigeration is on (true) or off (false)."
        ),
    )

    ubl23_Information = fields.Char(
        string="Information",
        xsd_type="InformationType",
        help=("Additional information about this piece of transport equipment."),
    )

    ubl23_ReturnabilityIndicator = fields.Boolean(
        string="ReturnabilityIndicator",
        help=(
            "An indicator that this piece of transport equipment is returnable"
            " (true) or not (false)."
        ),
    )

    ubl23_LegalStatusIndicator = fields.Boolean(
        string="LegalStatusIndicator",
        help=(
            "An indication of the legal status of this piece of transport "
            "equipment with respect to the Container Convention Code."
        ),
    )

    ubl23_AirFlowPercent = fields.Char(
        string="AirFlowPercent",
        xsd_type="AirFlowPercentType",
        help=(
            "The percent of the airflow within this piece of transport " "equipment."
        ),
    )

    ubl23_HumidityPercent = fields.Char(
        string="HumidityPercent",
        xsd_type="HumidityPercentType",
        help=("The percent humidity within this piece of transport equipment."),
    )

    ubl23_AnimalFoodApprovedIndicator = fields.Boolean(
        string="AnimalFoodApprovedIndicator",
        help=(
            "An indicator that this piece of transport equipment is approved "
            "for animal food (true) or not (false)."
        ),
    )

    ubl23_HumanFoodApprovedIndicator = fields.Boolean(
        string="HumanFoodApprovedIndicator",
        help=(
            "An indicator that this piece of transport equipment is approved "
            "for human food (true) or not (false)."
        ),
    )

    ubl23_DangerousGoodsApprovedIndicator = fields.Boolean(
        string="DangerousGoodsApprovedIndicator",
        help=(
            "An indicator that this piece of transport equipment is approved "
            "for dangerous goods (true) or not (false)."
        ),
    )

    ubl23_RefrigeratedIndicator = fields.Boolean(
        string="RefrigeratedIndicator",
        help=(
            "An indicator that this piece of transport equipment is "
            "refrigerated (true) or not (false)."
        ),
    )

    ubl23_Characteristics = fields.Char(
        string="Characteristics of this piece of transport equipment",
        xsd_type="CharacteristicsType",
        help="Characteristics of this piece of transport equipment.",
    )

    ubl23_DamageRemarks = fields.Char(
        string="Damage associated with this piece of transport equipment",
        xsd_type="DamageRemarksType",
        help="Damage associated with this piece of transport equipment.",
    )

    ubl23_Description = fields.Char(
        string="Text describing this piece of transport equipment",
        xsd_type="DescriptionType",
        help="Text describing this piece of transport equipment.",
    )

    ubl23_SpecialTransportRequirements = fields.Char(
        string="Special transport requirements expressed as text",
        xsd_type="SpecialTransportRequirementsType",
        help="Special transport requirements expressed as text.",
    )

    ubl23_GrossWeightMeasure = fields.Char(
        string="The gross weight of this piece of transport equipment",
        xsd_type="GrossWeightMeasureType",
        help="The gross weight of this piece of transport equipment.",
    )

    ubl23_GrossVolumeMeasure = fields.Char(
        string="The gross volume of this piece of transport equipment",
        xsd_type="GrossVolumeMeasureType",
        help="The gross volume of this piece of transport equipment.",
    )

    ubl23_TareWeightMeasure = fields.Char(
        string="The weight of this piece of transport equipment when empty",
        xsd_type="TareWeightMeasureType",
        help="The weight of this piece of transport equipment when empty.",
    )

    ubl23_TrackingDeviceCode = fields.Char(
        string="TrackingDeviceCode",
        xsd_type="TrackingDeviceCodeType",
        help=(
            "A code signifying the tracking device for this piece of transport"
            " equipment."
        ),
    )

    ubl23_PowerIndicator = fields.Boolean(
        string="PowerIndicator",
        help=(
            "An indicator that this piece of transport equipment can supply "
            "power (true) or not (false)."
        ),
    )

    ubl23_TraceID = fields.Char(
        string="TraceID",
        xsd_type="TraceIDType",
        help=(
            "An identifier for use in tracing this piece of transport "
            "equipment, such as the EPC number used in RFID."
        ),
    )

    ubl23_MeasurementDimension = fields.One2many(
        "ubl.23.measurementdimension",
        "ubl23_MeasurementDimension_TransportEquipmentType_id",
        string="A measurable dimension (length",
        help=(
            "A measurable dimension (length, mass, weight, or volume) of this "
            "piece of transport equipment."
        ),
    )

    ubl23_TransportEquipmentSeal = fields.One2many(
        "ubl.23.transportequipmentseal",
        "ubl23_TransportEquipmentSeal_TransportEquipmentType_id",
        string="A seal securing the door of a piece of transport equipment",
        help="A seal securing the door of a piece of transport equipment.",
    )

    ubl23_MinimumTemperature = fields.Many2one(
        comodel_name="ubl.23.minimumtemperature",
        string="In the case of a refrigeration unit",
        help=(
            "In the case of a refrigeration unit, the minimum allowable "
            "operating temperature for this container."
        ),
    )

    ubl23_MaximumTemperature = fields.Many2one(
        comodel_name="ubl.23.maximumtemperature",
        string="In the case of a refrigeration unit (MaximumTemperature)",
        help=(
            "In the case of a refrigeration unit, the maximum allowable "
            "operating temperature for this container."
        ),
    )

    ubl23_ProviderParty = fields.Many2one(
        comodel_name="ubl.23.providerparty",
        string="The party providing this piece of transport equipment",
        help="The party providing this piece of transport equipment.",
    )

    ubl23_LoadingProofParty = fields.Many2one(
        comodel_name="ubl.23.loadingproofparty",
        string="LoadingProofParty",
        help=(
            "The authorized party responsible for certifying that the goods "
            "were loaded into this piece of transport equipment."
        ),
    )

    ubl23_SupplierParty = fields.Many2one(
        comodel_name="ubl.23.supplierparty",
        string="The party that supplies this piece of transport equipment",
        help="The party that supplies this piece of transport equipment.",
    )

    ubl23_OwnerParty = fields.Many2one(
        comodel_name="ubl.23.ownerparty",
        string="The party that owns this piece of transport equipment",
        help="The party that owns this piece of transport equipment.",
    )

    ubl23_OperatingParty = fields.Many2one(
        comodel_name="ubl.23.operatingparty",
        string="The party that operates this piece of transport equipment",
        help="The party that operates this piece of transport equipment.",
    )

    ubl23_LoadingLocation = fields.Many2one(
        comodel_name="ubl.23.loadinglocation",
        string="LoadingLocation",
        help=("The location where this piece of transport equipment is loaded."),
    )

    ubl23_UnloadingLocation = fields.Many2one(
        comodel_name="ubl.23.unloadinglocation",
        string="UnloadingLocation",
        help=("The location where this piece of transport equipment is unloaded."),
    )

    ubl23_StorageLocation = fields.Many2one(
        comodel_name="ubl.23.storagelocation",
        string="StorageLocation",
        help=(
            "The location where this piece of transport equipment is being " "stored."
        ),
    )

    ubl23_PositioningTransportEvent = fields.One2many(
        "ubl.23.positioningtransportevent",
        "ubl23_PositioningTransportEvent_TransportEquipmentType_id",
        string="A positioning of this piece of transport equipment",
        help="A positioning of this piece of transport equipment.",
    )

    ubl23_QuarantineTransportEvent = fields.One2many(
        "ubl.23.quarantinetransportevent",
        "ubl23_QuarantineTransportEvent_TransportEquipmentType_id",
        string="A quarantine of this piece of transport equipment",
        help="A quarantine of this piece of transport equipment.",
    )

    ubl23_DeliveryTransportEvent = fields.One2many(
        "ubl.23.deliverytransportevent",
        "ubl23_DeliveryTransportEvent_TransportEquipmentType_id",
        string="A delivery of this piece of transport equipment",
        help="A delivery of this piece of transport equipment.",
    )

    ubl23_PickupTransportEvent = fields.One2many(
        "ubl.23.pickuptransportevent",
        "ubl23_PickupTransportEvent_TransportEquipmentType_id",
        string="A pickup of this piece of transport equipment",
        help="A pickup of this piece of transport equipment.",
    )

    ubl23_HandlingTransportEvent = fields.One2many(
        "ubl.23.handlingtransportevent",
        "ubl23_HandlingTransportEvent_TransportEquipmentType_id",
        string="A handling of this piece of transport equipment",
        help="A handling of this piece of transport equipment.",
    )

    ubl23_LoadingTransportEvent = fields.One2many(
        "ubl.23.loadingtransportevent",
        "ubl23_LoadingTransportEvent_TransportEquipmentType_id",
        string="A loading of this piece of transport equipment",
        help="A loading of this piece of transport equipment.",
    )

    ubl23_TransportEvent = fields.One2many(
        "ubl.23.transportevent",
        "ubl23_TransportEvent_TransportEquipmentType_id",
        string="TransportEvent",
        help=(
            "A transport event associated with this piece of transport " "equipment."
        ),
    )

    ubl23_ApplicableTransportMeans = fields.Many2one(
        comodel_name="ubl.23.applicabletransportmeans",
        string="ApplicableTransportMeans",
        help=(
            "The applicable transport means associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_HaulageTradingTerms = fields.One2many(
        "ubl.23.haulagetradingterms",
        "ubl23_HaulageTradingTerms_TransportEquipmentType_id",
        string="HaulageTradingTerms",
        help=(
            "A set of haulage trading terms associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_HazardousGoodsTransit = fields.One2many(
        "ubl.23.hazardousgoodstransit",
        "ubl23_HazardousGoodsTransit_TransportEquipmentType_id",
        string="Transit",
        help=(
            "Transit-related information regarding a type of hazardous goods "
            "contained in this piece of transport equipment."
        ),
    )

    ubl23_PackagedTransportHandlingUnit = fields.One2many(
        "ubl.23.packagedtransporthandlingunit",
        "ubl23_PackagedTransportHandlingUnit_TransportEquipmentType_id",
        string="PackagedTransportHandlingUnit",
        help=(
            "A packaged transport handling unit associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_ServiceAllowanceCharge = fields.One2many(
        "ubl.23.serviceallowancecharge",
        "ubl23_ServiceAllowanceCharge_TransportEquipmentType_id",
        string="ServiceAllowanceCharge",
        help=(
            "A service allowance charge associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_FreightAllowanceCharge = fields.One2many(
        "ubl.23.freightallowancecharge",
        "ubl23_FreightAllowanceCharge_TransportEquipmentType_id",
        string="FreightAllowanceCharge",
        help=(
            "A freight allowance charge associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_AttachedTransportEquipment = fields.One2many(
        "ubl.23.attachedtransportequipment",
        "ubl23_AttachedTransportEquipment_TransportEquipmentType_id",
        string="AttachedTransportEquipment",
        help=(
            "A piece of transport equipment attached to this piece of "
            "transport equipment."
        ),
    )

    ubl23_Delivery = fields.Many2one(
        comodel_name="ubl.23.delivery",
        string="The delivery of this piece of transport equipment",
        help="The delivery of this piece of transport equipment.",
    )

    ubl23_Pickup = fields.Many2one(
        comodel_name="ubl.23.pickup",
        string="The pickup of this piece of transport equipment",
        help="The pickup of this piece of transport equipment.",
    )

    ubl23_Despatch = fields.Many2one(
        comodel_name="ubl.23.despatch",
        string="The despatch of this piece of transport equipment",
        help="The despatch of this piece of transport equipment.",
    )

    ubl23_ShipmentDocumentReference = fields.One2many(
        "ubl.23.shipmentdocumentreference",
        "ubl23_ShipmentDocumentReference_TransportEquipmentType_id",
        string="ShipmentDocumentReference",
        help=(
            "A reference to a shipping document associated with this piece of "
            "transport equipment."
        ),
    )

    ubl23_ContainedInTransportEquipment = fields.One2many(
        "ubl.23.containedintransportequipment",
        "ubl23_ContainedInTransportEquipment_TransportEquipmentType_id",
        string="ContainedInTransportEquipment",
        help=(
            "A piece of transport equipment contained in this piece of "
            "transport equipment."
        ),
    )

    ubl23_Package = fields.One2many(
        "ubl.23.package",
        "ubl23_Package_TransportEquipmentType_id",
        string="A package contained in this piece of transport equipment",
        help="A package contained in this piece of transport equipment.",
    )

    ubl23_GoodsItem = fields.One2many(
        "ubl.23.goodsitem",
        "ubl23_GoodsItem_TransportEquipmentType_id",
        string="GoodsItem",
        help="A goods item contained in this piece of transport equipment.",
    )

    ubl23_VerifiedGrossMass = fields.Many2one(
        comodel_name="ubl.23.verifiedgrossmass",
        string="VerifiedGrossMass",
        help=("The verified gross mass of this piece of transport equipment."),
    )


class AttachedTransportEquipment(models.AbstractModel):
    _description = "AttachedTransportEquipment"
    _name = "ubl.23.attachedtransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AttachedTransportEquipment"

    ubl23_AttachedTransportEquipment_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ContainedInTransportEquipment(models.AbstractModel):
    _description = "ContainedInTransportEquipment"
    _name = "ubl.23.containedintransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContainedInTransportEquipment"

    ubl23_ContainedInTransportEquipment_TransportEquipmentType_id = fields.Many2one(
        comodel_name="ubl.23.transportequipmenttype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ContainingTransportEquipment(models.AbstractModel):
    _description = "ContainingTransportEquipment"
    _name = "ubl.23.containingtransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContainingTransportEquipment"


class ReferencedTransportEquipment(models.AbstractModel):
    _description = "ReferencedTransportEquipment"
    _name = "ubl.23.referencedtransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedTransportEquipment"


class SupportedTransportEquipment(models.AbstractModel):
    _description = "SupportedTransportEquipment"
    _name = "ubl.23.supportedtransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupportedTransportEquipment"

    ubl23_SupportedTransportEquipment_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TransportEquipment(models.AbstractModel):
    _description = "TransportEquipment"
    _name = "ubl.23.transportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportEquipment"

    ubl23_TransportEquipment_GoodsItemContainerType_id = fields.Many2one(
        comodel_name="ubl.23.goodsitemcontainertype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_TransportEquipment_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_TransportEquipment_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class UnsupportedTransportEquipment(models.AbstractModel):
    _description = "UnsupportedTransportEquipment"
    _name = "ubl.23.unsupportedtransportequipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UnsupportedTransportEquipment"

    ubl23_UnsupportedTransportEquipment_TransportationServiceType_id = fields.Many2one(
        comodel_name="ubl.23.transportationservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class TransportationServiceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transportation Service.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a transportation service.</ns1:Definition>
    <ns1:ObjectClass>Transportation Service</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportationservicetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportationServiceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TransportServiceCode = fields.Char(
        string="TransportServiceCode",
        xsd_required=True,
        xsd_type="TransportServiceCodeType",
        help=(
            "A code signifying the extent of this transportation service "
            "(e.g., door-to-door, port-to-port)."
        ),
    )

    ubl23_TariffClassCode = fields.Char(
        string="TariffClassCode",
        xsd_type="TariffClassCodeType",
        help=(
            "A code signifying the tariff class applicable to this "
            "transportation service."
        ),
    )

    ubl23_Priority = fields.Char(
        string="The priority of this transportation service",
        xsd_type="PriorityType",
        help="The priority of this transportation service.",
    )

    ubl23_FreightRateClassCode = fields.Char(
        string="FreightRateClassCode",
        xsd_type="FreightRateClassCodeType",
        help=(
            "A code signifying the rate class for freight in this "
            "transportation service."
        ),
    )

    ubl23_TransportationServiceDescription = fields.Char(
        string="Text describing this transportation service",
        xsd_type="TransportationServiceDescriptionType",
        help="Text describing this transportation service.",
    )

    ubl23_TransportationServiceDetailsURI = fields.Char(
        string="The Uniform Resource Identifier",
        xsd_type="TransportationServiceDetailsURIType",
        help=(
            "The Uniform Resource Identifier (URI) of a document providing "
            "additional details regarding this transportation service."
        ),
    )

    ubl23_NominationDate = fields.Date(
        string="In a transport contract",
        help=(
            "In a transport contract, the deadline date by which this "
            "transportation service has to be booked. For example, if this "
            "service is scheduled for Wednesday 16 February 2011 at 10 a.m. "
            "CET, the nomination date might be Tuesday15 February 2011."
        ),
    )

    ubl23_Name = fields.Char(
        string="The name of this transportation service",
        xsd_type="NameType",
        help="The name of this transportation service.",
    )

    ubl23_SequenceNumeric = fields.Float(
        string="SequenceNumeric",
        xsd_type="SequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number indicating the order of this transportation service in a"
            " sequence of transportation services."
        ),
    )

    ubl23_TransportEquipment = fields.One2many(
        "ubl.23.transportequipment",
        "ubl23_TransportEquipment_TransportationServiceType_id",
        string="TransportEquipment",
        help=("A piece of transport equipment used in this transportation " "service."),
    )

    ubl23_SupportedTransportEquipment = fields.One2many(
        "ubl.23.supportedtransportequipment",
        "ubl23_SupportedTransportEquipment_TransportationServiceType_id",
        string="SupportedTransportEquipment",
        help=(
            "A piece of transport equipment supported in this transportation "
            "service."
        ),
    )

    ubl23_UnsupportedTransportEquipment = fields.One2many(
        "ubl.23.unsupportedtransportequipment",
        "ubl23_UnsupportedTransportEquipment_TransportationServiceType_id",
        string="UnsupportedTransportEquipment",
        help=(
            "A piece of transport equipment that is not supported in this "
            "transportation service."
        ),
    )

    ubl23_CommodityClassification = fields.One2many(
        "ubl.23.commoditytypeification",
        "ubl23_CommodityClassification_TransportationServiceType_id",
        string="A classification of this transportation service",
        help="A classification of this transportation service.",
    )

    ubl23_SupportedCommodityClassification = fields.One2many(
        "ubl.23.supportedcommoditytypeification",
        "ubl23_SupportedCommodityClassification_TransportationServiceType_id",
        string="A classification (e.g.",
        help=(
            "A classification (e.g., general cargo) for commodities that can "
            "be handled in this transportation service."
        ),
    )

    ubl23_UnsupportedCommodityClassification = fields.One2many(
        "ubl.23.unsupportedcommoditytypeification",
        "ubl23_UnsupportedCommodityClassification_TransportationServiceType_id",
        string="UnsupportedCommodityClassification",
        help=(
            "A classification for commodities that cannot be handled in this "
            "transportation service."
        ),
    )

    ubl23_TotalCapacityDimension = fields.Many2one(
        comodel_name="ubl.23.totalcapacitydimension",
        string="TotalCapacityDimension",
        help=(
            "The total capacity or volume available in this transportation " "service."
        ),
    )

    ubl23_ShipmentStage = fields.One2many(
        "ubl.23.shipmentstage",
        "ubl23_ShipmentStage_TransportationServiceType_id",
        string="ShipmentStage",
        help=("One of the stages of shipment in this transportation service."),
    )

    ubl23_TransportEvent = fields.One2many(
        "ubl.23.transportevent",
        "ubl23_TransportEvent_TransportationServiceType_id",
        string="TransportEvent",
        help=(
            "One of the transport events taking place in this transportation "
            "service."
        ),
    )

    ubl23_ResponsibleTransportServiceProviderParty = fields.Many2one(
        comodel_name="ubl.23.responsibletransportserviceproviderparty",
        string="ResponsibleTransportServiceProviderParty",
        help=(
            "The transport service provider responsible for this "
            "transportation service."
        ),
    )

    ubl23_EnvironmentalEmission = fields.One2many(
        "ubl.23.environmentalemission",
        "ubl23_EnvironmentalEmission_TransportationServiceType_id",
        string="EnvironmentalEmission",
        help=(
            "An environmental emission resulting from this transportation " "service."
        ),
    )

    ubl23_EstimatedDurationPeriod = fields.Many2one(
        comodel_name="ubl.23.estimateddurationperiod",
        string="The estimated duration of this transportation service",
        help="The estimated duration of this transportation service.",
    )

    ubl23_ScheduledServiceFrequency = fields.One2many(
        "ubl.23.scheduledservicefrequency",
        "ubl23_ScheduledServiceFrequency_TransportationServiceType_id",
        string="ScheduledServiceFrequency",
        help=(
            "A class to specify which day of the week a transport service is "
            "operational."
        ),
    )


class AdditionalTransportationService(models.AbstractModel):
    _description = "AdditionalTransportationService"
    _name = "ubl.23.additionaltransportationservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AdditionalTransportationService"


class FinalDeliveryTransportationService(models.AbstractModel):
    _description = "FinalDeliveryTransportationService"
    _name = "ubl.23.finaldeliverytransportationservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "FinalDeliveryTransportationService"


class MainTransportationService(models.AbstractModel):
    _description = "MainTransportationService"
    _name = "ubl.23.maintransportationservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "MainTransportationService"


class OriginalDespatchTransportationService(models.AbstractModel):
    _description = "OriginalDespatchTransportationService"
    _name = "ubl.23.originaldespatchtransportationservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OriginalDespatchTransportationService"


class TransportationService(models.AbstractModel):
    _description = "TransportationService"
    _name = "ubl.23.transportationservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportationService"


class ConsignmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consignment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an identifiable collection of one or more
    goods items to be transported between the consignor and the consignee. This
    information may be defined within a transport contract. A consignment may
    comprise more than one shipment (e.g., when consolidated by a freight
    forwarder).</ns1:Definition>
    <ns1:ObjectClass>Consignment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consignmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsignmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="ID",
        xsd_required=True,
        xsd_type="IDType",
        help=(
            "An identifier assigned to a collection of goods for both import "
            "and export."
        ),
    )

    ubl23_CarrierAssignedID = fields.Char(
        string="An identifier for this consignment",
        xsd_type="CarrierAssignedIDType",
        help="An identifier for this consignment, assigned by the carrier.",
    )

    ubl23_ConsigneeAssignedID = fields.Char(
        string="An identifier for this consignment (ConsigneeAssignedID)",
        xsd_type="ConsigneeAssignedIDType",
        help=("An identifier for this consignment, assigned by the consignee."),
    )

    ubl23_ConsignorAssignedID = fields.Char(
        string="An identifier for this consignment (ConsignorAssignedID)",
        xsd_type="ConsignorAssignedIDType",
        help=("An identifier for this consignment, assigned by the consignor."),
    )

    ubl23_FreightForwarderAssignedID = fields.Char(
        string="FreightForwarderAssignedID",
        xsd_type="FreightForwarderAssignedIDType",
        help=(
            "An identifier for this consignment, assigned by the freight " "forwarder."
        ),
    )

    ubl23_BrokerAssignedID = fields.Char(
        string="An identifier for this consignment (BrokerAssignedID)",
        xsd_type="BrokerAssignedIDType",
        help="An identifier for this consignment, assigned by the broker.",
    )

    ubl23_ContractedCarrierAssignedID = fields.Char(
        string="ContractedCarrierAssignedID",
        xsd_type="ContractedCarrierAssignedIDType",
        help=(
            "An identifier for this consignment, assigned by the contracted " "carrier."
        ),
    )

    ubl23_PerformingCarrierAssignedID = fields.Char(
        string="PerformingCarrierAssignedID",
        xsd_type="PerformingCarrierAssignedIDType",
        help=(
            "An identifier for this consignment, assigned by the performing " "carrier."
        ),
    )

    ubl23_SummaryDescription = fields.Char(
        string="A textual summary description of the consignment",
        xsd_type="SummaryDescriptionType",
        help="A textual summary description of the consignment.",
    )

    ubl23_TotalInvoiceAmount = fields.Float(
        string="TotalInvoiceAmount",
        xsd_type="TotalInvoiceAmountType",
        digits=(
            16,
            4,
        ),
        help=("The total of all invoice amounts declared in this consignment."),
    )

    ubl23_DeclaredCustomsValueAmount = fields.Float(
        string="DeclaredCustomsValueAmount",
        xsd_type="DeclaredCustomsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total declared value for customs purposes of all the goods in"
            " this consignment, regardless of whether they are subject to the "
            "same customs procedure, tariff/statistical categorization, "
            "country information, or duty regime."
        ),
    )

    ubl23_TariffDescription = fields.Char(
        string="Text describing the tariff applied to this consignment",
        xsd_type="TariffDescriptionType",
        help="Text describing the tariff applied to this consignment.",
    )

    ubl23_TariffCode = fields.Char(
        string="A code signifying the tariff applied to this consignment",
        xsd_type="TariffCodeType",
        help="A code signifying the tariff applied to this consignment.",
    )

    ubl23_InsurancePremiumAmount = fields.Float(
        string="InsurancePremiumAmount",
        xsd_type="InsurancePremiumAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The amount of the premium payable to an insurance company for "
            "insuring the goods contained in this consignment."
        ),
    )

    ubl23_GrossWeightMeasure = fields.Char(
        string="The total declared weight of the goods in this consignment",
        xsd_type="GrossWeightMeasureType",
        help=(
            "The total declared weight of the goods in this consignment, "
            "including packaging but excluding the carrier's equipment."
        ),
    )

    ubl23_NetWeightMeasure = fields.Char(
        string="NetWeightMeasure",
        xsd_type="NetWeightMeasureType",
        help=(
            "The total net weight of all the goods items referred to as one "
            "consignment."
        ),
    )

    ubl23_NetNetWeightMeasure = fields.Char(
        string="The total net weight of the goods in this consignment",
        xsd_type="NetNetWeightMeasureType",
        help=(
            "The total net weight of the goods in this consignment, exclusive "
            "of packaging."
        ),
    )

    ubl23_ChargeableWeightMeasure = fields.Char(
        string="The weight upon which a charge is to be based",
        xsd_type="ChargeableWeightMeasureType",
        help="The weight upon which a charge is to be based.",
    )

    ubl23_GrossVolumeMeasure = fields.Char(
        string="GrossVolumeMeasure",
        xsd_type="GrossVolumeMeasureType",
        help=("The total volume of the goods referred to as one consignment."),
    )

    ubl23_NetVolumeMeasure = fields.Char(
        string="NetVolumeMeasure",
        xsd_type="NetVolumeMeasureType",
        help=(
            "The total net volume of all goods items referred to as one " "consignment."
        ),
    )

    ubl23_LoadingLengthMeasure = fields.Char(
        string="LoadingLengthMeasure",
        xsd_type="LoadingLengthMeasureType",
        help=(
            "The total length in a means of transport or a piece of transport "
            "equipment which, given the width and height of the transport "
            "means, will accommodate all of the consignments in a single "
            "consolidation."
        ),
    )

    ubl23_Remarks = fields.Char(
        string="Remarks concerning the complete consignment",
        xsd_type="RemarksType",
        help=(
            "Remarks concerning the complete consignment, to be printed on the"
            " transport document."
        ),
    )

    ubl23_HazardousRiskIndicator = fields.Boolean(
        string="HazardousRiskIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "subject to an international regulation concerning the carriage of"
            " dangerous goods (true) or not (false)."
        ),
    )

    ubl23_AnimalFoodIndicator = fields.Boolean(
        string="AnimalFoodIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "animal foodstuffs (true) or not (false)."
        ),
    )

    ubl23_HumanFoodIndicator = fields.Boolean(
        string="HumanFoodIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "for human consumption (true) or not (false)."
        ),
    )

    ubl23_LivestockIndicator = fields.Boolean(
        string="An indication that the transported goods are livestock",
        help=(
            "An indication that the transported goods are livestock (true) or "
            "not (false)."
        ),
    )

    ubl23_BulkCargoIndicator = fields.Boolean(
        string="BulkCargoIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "bulk cargoes (true) or not (false)."
        ),
    )

    ubl23_ContainerizedIndicator = fields.Boolean(
        string="ContainerizedIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "containerized cargoes (true) or not (false)."
        ),
    )

    ubl23_GeneralCargoIndicator = fields.Boolean(
        string="GeneralCargoIndicator",
        help=(
            "An indication that the transported goods in this consignment are "
            "general cargoes (true) or not (false)."
        ),
    )

    ubl23_SpecialSecurityIndicator = fields.Boolean(
        string="SpecialSecurityIndicator",
        help=(
            "An indication that the transported goods in this consignment "
            "require special security (true) or not (false)."
        ),
    )

    ubl23_ThirdPartyPayerIndicator = fields.Boolean(
        string="ThirdPartyPayerIndicator",
        help=(
            "An indication that this consignment will be paid for by a third "
            "party (true) or not (false)."
        ),
    )

    ubl23_CarrierServiceInstructions = fields.Char(
        string="Service instructions to the carrier",
        xsd_type="CarrierServiceInstructionsType",
        help="Service instructions to the carrier, expressed as text.",
    )

    ubl23_CustomsClearanceServiceInstructions = fields.Char(
        string="Service instructions for customs clearance",
        xsd_type="CustomsClearanceServiceInstructionsType",
        help=("Service instructions for customs clearance, expressed as text."),
    )

    ubl23_ForwarderServiceInstructions = fields.Char(
        string="Service instructions for the forwarder",
        xsd_type="ForwarderServiceInstructionsType",
        help="Service instructions for the forwarder, expressed as text.",
    )

    ubl23_SpecialServiceInstructions = fields.Char(
        string="Special service instructions",
        xsd_type="SpecialServiceInstructionsType",
        help="Special service instructions, expressed as text.",
    )

    ubl23_SequenceID = fields.Char(
        string="A sequence identifier for this consignment",
        xsd_type="SequenceIDType",
        help="A sequence identifier for this consignment.",
    )

    ubl23_ShippingPriorityLevelCode = fields.Char(
        string="ShippingPriorityLevelCode",
        xsd_type="ShippingPriorityLevelCodeType",
        help=(
            "A code signifying the priority or level of service required for "
            "this consignment."
        ),
    )

    ubl23_HandlingCode = fields.Char(
        string="The handling required for this consignment",
        xsd_type="HandlingCodeType",
        help=("The handling required for this consignment, expressed as a code."),
    )

    ubl23_HandlingInstructions = fields.Char(
        string="HandlingInstructions",
        xsd_type="HandlingInstructionsType",
        help=("The handling required for this consignment, expressed as text."),
    )

    ubl23_Information = fields.Char(
        string="Free",
        xsd_type="InformationType",
        help=(
            "Free-form text pertinent to this consignment, conveying "
            "information that is not contained explicitly in other structures."
        ),
    )

    ubl23_TotalGoodsItemQuantity = fields.Float(
        string="The total number of goods items in this consignment",
        xsd_type="TotalGoodsItemQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of goods items in this consignment.",
    )

    ubl23_TotalTransportHandlingUnitQuantity = fields.Float(
        string="The number of pieces of transport handling equipment",
        xsd_type="TotalTransportHandlingUnitQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of pieces of transport handling equipment (pallets, "
            "boxes, cases, etc.) in this consignment."
        ),
    )

    ubl23_InsuranceValueAmount = fields.Float(
        string="The amount covered by insurance for this consignment",
        xsd_type="InsuranceValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount covered by insurance for this consignment.",
    )

    ubl23_DeclaredForCarriageValueAmount = fields.Float(
        string="The value of this consignment",
        xsd_type="DeclaredForCarriageValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value of this consignment, declared by the shipper or his "
            "agent solely for the purpose of varying the carrier's level of "
            "liability from that provided in the contract of carriage, in case"
            " of loss or damage to goods or delayed delivery."
        ),
    )

    ubl23_DeclaredStatisticsValueAmount = fields.Float(
        string="The value",
        xsd_type="DeclaredStatisticsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value, declared for statistical purposes, of those goods in "
            "this consignment that have the same statistical heading."
        ),
    )

    ubl23_FreeOnBoardValueAmount = fields.Float(
        string="FreeOnBoardValueAmount",
        xsd_type="FreeOnBoardValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount that has to be or has been paid as calculated"
            " under the applicable trade delivery."
        ),
    )

    ubl23_SpecialInstructions = fields.Char(
        string="Special instructions relating to this consignment",
        xsd_type="SpecialInstructionsType",
        help="Special instructions relating to this consignment.",
    )

    ubl23_SplitConsignmentIndicator = fields.Boolean(
        string="SplitConsignmentIndicator",
        help=(
            "An indicator that this consignment has been split in transit "
            "(true) or not (false)."
        ),
    )

    ubl23_DeliveryInstructions = fields.Char(
        string="DeliveryInstructions",
        xsd_type="DeliveryInstructionsType",
        help="A set of delivery instructions relating to this consignment.",
    )

    ubl23_ConsignmentQuantity = fields.Float(
        string="The count in this consignment considering goods items",
        xsd_type="ConsignmentQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The count in this consignment considering goods items, child "
            "consignments, shipments"
        ),
    )

    ubl23_ConsolidatableIndicator = fields.Boolean(
        string="An indicator that this consignment can be consolidated",
        help=(
            "An indicator that this consignment can be consolidated (true) or "
            "not (false)."
        ),
    )

    ubl23_HaulageInstructions = fields.Char(
        string="Instructions regarding haulage of this consignment",
        xsd_type="HaulageInstructionsType",
        help=(
            "Instructions regarding haulage of this consignment, expressed as " "text."
        ),
    )

    ubl23_LoadingSequenceID = fields.Char(
        string="An identifier for the loading sequence of this consignment",
        xsd_type="LoadingSequenceIDType",
        help="An identifier for the loading sequence of this consignment.",
    )

    ubl23_ChildConsignmentQuantity = fields.Float(
        string="The quantity of",
        xsd_type="ChildConsignmentQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of (consolidated) child consignments",
    )

    ubl23_TotalPackagesQuantity = fields.Float(
        string="The total number of packages associated with a Consignment",
        xsd_type="TotalPackagesQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of packages associated with a Consignment.",
    )

    ubl23_ConsolidatedShipment = fields.One2many(
        "ubl.23.consolidatedshipment",
        "ubl23_ConsolidatedShipment_ConsignmentType_id",
        string="A consolidated shipment",
        help=(
            "A consolidated shipment (a shipment created by an act of "
            "consolidation)."
        ),
    )

    ubl23_CustomsDeclaration = fields.One2many(
        "ubl.23.customsdeclaration",
        "ubl23_CustomsDeclaration_ConsignmentType_id",
        string="CustomsDeclaration",
        help=(
            "A class describing identifiers or references relating to customs "
            "procedures."
        ),
    )

    ubl23_RequestedPickupTransportEvent = fields.Many2one(
        comodel_name="ubl.23.requestedpickuptransportevent",
        string="RequestedPickupTransportEvent",
        help=(
            "The pickup of this consignment requested by the party requesting "
            "a transportation service (the transport user)."
        ),
    )

    ubl23_RequestedDeliveryTransportEvent = fields.Many2one(
        comodel_name="ubl.23.requesteddeliverytransportevent",
        string="RequestedDeliveryTransportEvent",
        help=(
            "The delivery of this consignment requested by the party "
            "requesting a transportation service (the transport user)."
        ),
    )

    ubl23_PlannedPickupTransportEvent = fields.Many2one(
        comodel_name="ubl.23.plannedpickuptransportevent",
        string="PlannedPickupTransportEvent",
        help=(
            "The pickup of this consignment planned by the party responsible "
            "for providing the transportation service (the transport service "
            "provider)."
        ),
    )

    ubl23_PlannedDeliveryTransportEvent = fields.Many2one(
        comodel_name="ubl.23.planneddeliverytransportevent",
        string="PlannedDeliveryTransportEvent",
        help=(
            "The delivery of this consignment planned by the party responsible"
            " for providing the transportation service (the transport service "
            "provider)."
        ),
    )

    ubl23_ActualPickupTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualpickuptransportevent",
        string="ActualPickupTransportEvent",
        help=(
            "The actual pickup of this consignment by the party responsible "
            "for providing the transportation service (the transport service "
            "provider)."
        ),
    )

    ubl23_ActualDeliveryTransportEvent = fields.Many2one(
        comodel_name="ubl.23.actualdeliverytransportevent",
        string="ActualDeliveryTransportEvent",
        help=(
            "The actual delivery of this consignment by the party responsible "
            "for providing the transportation service (the transport service "
            "provider)."
        ),
    )

    ubl23_Status = fields.One2many(
        "ubl.23.status",
        "ubl23_Status_ConsignmentType_id",
        string="Status",
        help=(
            "The status of a particular condition associated with this " "consignment."
        ),
    )

    ubl23_ChildConsignment = fields.One2many(
        "ubl.23.childconsignment",
        "ubl23_ChildConsignment_ConsignmentType_id",
        string="ChildConsignment",
        help=(
            "One of the child consignments of which a consolidated consignment"
            " is composed."
        ),
    )

    ubl23_ConsigneeParty = fields.Many2one(
        comodel_name="ubl.23.consigneeparty",
        string="A party to which goods are consigned",
        help="A party to which goods are consigned.",
    )

    ubl23_ExporterParty = fields.Many2one(
        comodel_name="ubl.23.exporterparty",
        string="The party that makes the export declaration",
        help=(
            "The party that makes the export declaration, or on behalf of "
            "which the export declaration is made, and that is the owner of "
            "the goods in this consignment or has similar right of disposal "
            "over them at the time when the declaration is accepted."
        ),
    )

    ubl23_ConsignorParty = fields.Many2one(
        comodel_name="ubl.23.consignorparty",
        string="The party consigning goods",
        help=(
            "The party consigning goods, as stipulated in the transport "
            "contract by the party ordering transport."
        ),
    )

    ubl23_ImporterParty = fields.Many2one(
        comodel_name="ubl.23.importerparty",
        string="ImporterParty",
        help=(
            "The party that makes an import declaration regarding this "
            "consignment, or on behalf of which a customs clearing agent or "
            "other authorized person makes an import declaration regarding "
            "this consignment. This may include a person who has possession of"
            " the goods or to whom the goods are consigned."
        ),
    )

    ubl23_CarrierParty = fields.Many2one(
        comodel_name="ubl.23.carrierparty",
        string="CarrierParty",
        help=(
            "The party providing the transport of goods in this consignment "
            "between named points."
        ),
    )

    ubl23_FreightForwarderParty = fields.Many2one(
        comodel_name="ubl.23.freightforwarderparty",
        string="FreightForwarderParty",
        help=(
            "The party combining individual smaller consignments into a single"
            " larger shipment (the consolidated shipment), which is sent to a "
            "counterpart that mirrors the consolidator's activity by dividing "
            "the consolidated consignment into its original components."
        ),
    )

    ubl23_NotifyParty = fields.Many2one(
        comodel_name="ubl.23.notifyparty",
        string="NotifyParty",
        help=(
            "The party to be notified upon arrival of goods and when special "
            "occurrences (usually pre-defined) take place during a "
            "transportation service."
        ),
    )

    ubl23_OriginalDespatchParty = fields.Many2one(
        comodel_name="ubl.23.originaldespatchparty",
        string="The original despatch",
        help="The original despatch (sender) party for this consignment.",
    )

    ubl23_FinalDeliveryParty = fields.Many2one(
        comodel_name="ubl.23.finaldeliveryparty",
        string="The final delivery party for this consignment",
        help="The final delivery party for this consignment.",
    )

    ubl23_PerformingCarrierParty = fields.Many2one(
        comodel_name="ubl.23.performingcarrierparty",
        string="The party performing the carriage of this consignment",
        help="The party performing the carriage of this consignment.",
    )

    ubl23_SubstituteCarrierParty = fields.Many2one(
        comodel_name="ubl.23.substitutecarrierparty",
        string="SubstituteCarrierParty",
        help=("A substitute party performing the carriage of this consignment."),
    )

    ubl23_LogisticsOperatorParty = fields.Many2one(
        comodel_name="ubl.23.logisticsoperatorparty",
        string="The logistics operator party for this consignment",
        help="The logistics operator party for this consignment.",
    )

    ubl23_TransportAdvisorParty = fields.Many2one(
        comodel_name="ubl.23.transportadvisorparty",
        string="The party providing transport advice this consignment",
        help="The party providing transport advice this consignment.",
    )

    ubl23_HazardousItemNotificationParty = fields.Many2one(
        comodel_name="ubl.23.hazardousitemnotificationparty",
        string="HazardousItemNotificationParty",
        help=(
            "The party that would be notified of a hazardous item in this "
            "consignment."
        ),
    )

    ubl23_InsuranceParty = fields.Many2one(
        comodel_name="ubl.23.insuranceparty",
        string="The party holding the insurance for this consignment",
        help="The party holding the insurance for this consignment.",
    )

    ubl23_MortgageHolderParty = fields.Many2one(
        comodel_name="ubl.23.mortgageholderparty",
        string="The party holding the mortgage for this consignment",
        help="The party holding the mortgage for this consignment.",
    )

    ubl23_BillOfLadingHolderParty = fields.Many2one(
        comodel_name="ubl.23.billofladingholderparty",
        string="The party holding the bill of lading for this consignment",
        help="The party holding the bill of lading for this consignment.",
    )

    ubl23_OriginalDepartureCountry = fields.Many2one(
        comodel_name="ubl.23.originaldeparturecountry",
        string="OriginalDepartureCountry",
        help=(
            "The country from which the goods in this consignment were "
            "originally exported, without any commercial transaction taking "
            "place in intermediate countries."
        ),
    )

    ubl23_FinalDestinationCountry = fields.Many2one(
        comodel_name="ubl.23.finaldestinationcountry",
        string="FinalDestinationCountry",
        help=(
            "The country in which the goods in this consignment are to be "
            "delivered to the final consignee or buyer."
        ),
    )

    ubl23_TransitCountry = fields.One2many(
        "ubl.23.transitcountry",
        "ubl23_TransitCountry_ConsignmentType_id",
        string="TransitCountry",
        help=(
            "One of the countries through which goods or passengers in this "
            "consignment are routed between the country of original departure "
            "and the country of final destination."
        ),
    )

    ubl23_TransportContract = fields.Many2one(
        comodel_name="ubl.23.transportcontract",
        string="A transport contract relating to this consignment",
        help="A transport contract relating to this consignment.",
    )

    ubl23_TransportEvent = fields.One2many(
        "ubl.23.transportevent",
        "ubl23_TransportEvent_ConsignmentType_id",
        string="TransportEvent",
        help=(
            "A class describing a significant occurrence or happening related "
            "to the transportation of goods."
        ),
    )

    ubl23_OriginalDespatchTransportationService = fields.Many2one(
        comodel_name="ubl.23.originaldespatchtransportationservice",
        string="OriginalDespatchTransportationService",
        help=(
            "The service for pickup from the consignor under the transport "
            "contract for this consignment."
        ),
    )

    ubl23_FinalDeliveryTransportationService = fields.Many2one(
        comodel_name="ubl.23.finaldeliverytransportationservice",
        string="FinalDeliveryTransportationService",
        help=(
            "The service for delivery to the consignee under the transport "
            "contract for this consignment."
        ),
    )

    ubl23_DeliveryTerms = fields.Many2one(
        comodel_name="ubl.23.deliveryterms",
        string="DeliveryTerms",
        help=(
            "The conditions agreed upon between a seller and a buyer with "
            "regard to the delivery of goods and/or services (e.g., CIF, FOB, "
            "or EXW from the INCOTERMS Terms of Delivery)."
        ),
    )

    ubl23_PaymentTerms = fields.Many2one(
        comodel_name="ubl.23.paymentterms",
        string="The terms of payment between the parties",
        help=(
            "The terms of payment between the parties (such as logistics "
            "service client, logistics service provider) in a transaction."
        ),
    )

    ubl23_CollectPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.collectpaymentterms",
        string="CollectPaymentTerms",
        help=(
            "The terms of payment that apply to the collection of this " "consignment."
        ),
    )

    ubl23_DisbursementPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.disbursementpaymentterms",
        string="The terms of payment for disbursement",
        help="The terms of payment for disbursement.",
    )

    ubl23_PrepaidPaymentTerms = fields.Many2one(
        comodel_name="ubl.23.prepaidpaymentterms",
        string="The terms of payment for prepayment.",
    )

    ubl23_FreightAllowanceCharge = fields.One2many(
        "ubl.23.freightallowancecharge",
        "ubl23_FreightAllowanceCharge_ConsignmentType_id",
        string="A cost incurred by the shipper in moving goods",
        help=(
            "A cost incurred by the shipper in moving goods, by whatever "
            "means, from one place to another under the terms of the contract "
            "of carriage for this consignment. In addition to transport costs,"
            " this may include such elements as packing, documentation, "
            "loading, unloading, and insurance to the extent that they relate "
            "to the freight costs."
        ),
    )

    ubl23_ExtraAllowanceCharge = fields.One2many(
        "ubl.23.extraallowancecharge",
        "ubl23_ExtraAllowanceCharge_ConsignmentType_id",
        string="A charge for extra allowance.",
    )

    ubl23_MainCarriageShipmentStage = fields.One2many(
        "ubl.23.maincarriageshipmentstage",
        "ubl23_MainCarriageShipmentStage_ConsignmentType_id",
        string="A shipment stage during main carriage",
        help="A shipment stage during main carriage.",
    )

    ubl23_PreCarriageShipmentStage = fields.One2many(
        "ubl.23.precarriageshipmentstage",
        "ubl23_PreCarriageShipmentStage_ConsignmentType_id",
        string="A shipment stage during precarriage",
        help=(
            "A shipment stage during precarriage (usually refers to movement "
            "activity that takes place prior to the container being loaded at "
            "a port of loading)."
        ),
    )

    ubl23_OnCarriageShipmentStage = fields.One2many(
        "ubl.23.oncarriageshipmentstage",
        "ubl23_OnCarriageShipmentStage_ConsignmentType_id",
        string="A shipment stage during on-carriage",
        help=(
            "A shipment stage during on-carriage (usually refers to movement "
            "activity that takes place after the container is discharged at a "
            "port of discharge)."
        ),
    )

    ubl23_TransportHandlingUnit = fields.One2many(
        "ubl.23.transporthandlingunit",
        "ubl23_TransportHandlingUnit_ConsignmentType_id",
        string="TransportHandlingUnit",
        help=("A transport handling unit used for loose and containerized goods."),
    )

    ubl23_FirstArrivalPortLocation = fields.Many2one(
        comodel_name="ubl.23.firstarrivalportlocation",
        string="The first arrival location in a transport",
        help=(
            "The first arrival location in a transport. This would be a port "
            "for sea, an airport for air, a terminal for rail, or a border "
            "post for land crossing."
        ),
    )

    ubl23_LastExitPortLocation = fields.Many2one(
        comodel_name="ubl.23.lastexitportlocation",
        string="The final exporting location in a transport",
        help=(
            "The final exporting location in a transport. This would be a port"
            " for sea, an airport for air, a terminal for rail, or a border "
            "post for land crossing."
        ),
    )

    ubl23_OfficeOfEntryLocation = fields.Many2one(
        comodel_name="ubl.23.officeofentrylocation",
        string="The location of the office of entry of this consignment",
        help="The location of the office of entry of this consignment.",
    )

    ubl23_OfficeOfSubSequentiallyEntryLocation = fields.Many2one(
        comodel_name="ubl.23.officeofsubsequentiallyentrylocation",
        string="OfficeOfSubSequentiallyEntryLocation",
        help=(
            "The location of the office of the subsequentially entry of this "
            "consignment."
        ),
    )

    ubl23_OfficeOfExitLocation = fields.Many2one(
        comodel_name="ubl.23.officeofexitlocation",
        string="The location of the office of exit of this consignment",
        help="The location of the office of exit of this consignment.",
    )

    ubl23_OfficeOfDepartureLocation = fields.Many2one(
        comodel_name="ubl.23.officeofdeparturelocation",
        string="OfficeOfDepartureLocation",
        help="The location of the office of departure of this consignment.",
    )

    ubl23_OfficeOfDestinationLocation = fields.Many2one(
        comodel_name="ubl.23.officeofdestinationlocation",
        string="OfficeOfDestinationLocation",
        help=("The location of the office of destination of this consignment."),
    )

    ubl23_OfficeOfImportLocation = fields.Many2one(
        comodel_name="ubl.23.officeofimportlocation",
        string="The location of the office of import of this consignment",
        help="The location of the office of import of this consignment.",
    )

    ubl23_OfficeOfExportLocation = fields.Many2one(
        comodel_name="ubl.23.officeofexportlocation",
        string="The location of the office of export of this consignment",
        help="The location of the office of export of this consignment.",
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_ConsignmentType_id",
        string="DocumentReference",
        help=(
            "A reference to a document related to or relevant for this " "consignment."
        ),
    )


class ChildConsignment(models.AbstractModel):
    _description = "ChildConsignment"
    _name = "ubl.23.childconsignment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ChildConsignment"

    ubl23_ChildConsignment_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class Consignment(models.AbstractModel):
    _description = "Consignment"
    _name = "ubl.23.consignment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Consignment"

    ubl23_Consignment_ShipmentType_id = fields.Many2one(
        comodel_name="ubl.23.shipmenttype", xsd_implicit=True, ondelete="cascade"
    )


class ReferencedConsignment(models.AbstractModel):
    _description = "ReferencedConsignment"
    _name = "ubl.23.referencedconsignment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedConsignment"


class ShipmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Shipment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class defining an identifiable collection of one or more
    goods items to be transported between the seller party and the buyer party.
    This information may be defined within a commercial contract. A shipment
    can be transported in different consignments (e.g., split for logistical
    purposes).</ns1:Definition>
    <ns1:ObjectClass>Shipment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.shipmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ShipmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this shipment.", xsd_type="IDType")

    ubl23_ShippingPriorityLevelCode = fields.Char(
        string="ShippingPriorityLevelCode",
        xsd_type="ShippingPriorityLevelCodeType",
        help=(
            "A code signifying the priority or level of service required for "
            "this shipment."
        ),
    )

    ubl23_HandlingCode = fields.Char(
        string="The handling required for this shipment",
        xsd_type="HandlingCodeType",
        help=("The handling required for this shipment, expressed as a code."),
    )

    ubl23_HandlingInstructions = fields.Char(
        string="HandlingInstructions",
        xsd_type="HandlingInstructionsType",
        help="The handling required for this shipment, expressed as text.",
    )

    ubl23_Information = fields.Char(
        string="Free",
        xsd_type="InformationType",
        help=(
            "Free-form text pertinent to this shipment, conveying information "
            "that is not contained explicitly in other structures."
        ),
    )

    ubl23_GrossWeightMeasure = fields.Char(
        string="GrossWeightMeasure",
        xsd_type="GrossWeightMeasureType",
        help=(
            "The total gross weight of a shipment; the weight of the goods "
            "plus packaging plus transport equipment."
        ),
    )

    ubl23_NetWeightMeasure = fields.Char(
        string="The net weight of this shipment",
        xsd_type="NetWeightMeasureType",
        help="The net weight of this shipment, excluding packaging.",
    )

    ubl23_NetNetWeightMeasure = fields.Char(
        string="The total net weight of this shipment",
        xsd_type="NetNetWeightMeasureType",
        help=(
            "The total net weight of this shipment, excluding packaging and "
            "transport equipment."
        ),
    )

    ubl23_GrossVolumeMeasure = fields.Char(
        string="The total volume of the goods in this shipment",
        xsd_type="GrossVolumeMeasureType",
        help=(
            "The total volume of the goods in this shipment, including " "packaging."
        ),
    )

    ubl23_NetVolumeMeasure = fields.Char(
        string="NetVolumeMeasure",
        xsd_type="NetVolumeMeasureType",
        help=(
            "The total volume of the goods in this shipment, excluding "
            "packaging and transport equipment."
        ),
    )

    ubl23_TotalGoodsItemQuantity = fields.Float(
        string="The total number of goods items in this shipment",
        xsd_type="TotalGoodsItemQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of goods items in this shipment.",
    )

    ubl23_TotalTransportHandlingUnitQuantity = fields.Float(
        string="The number of pieces of transport handling equipment",
        xsd_type="TotalTransportHandlingUnitQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The number of pieces of transport handling equipment (pallets, "
            "boxes, cases, etc.) in this shipment."
        ),
    )

    ubl23_InsuranceValueAmount = fields.Float(
        string="The amount covered by insurance for this shipment",
        xsd_type="InsuranceValueAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount covered by insurance for this shipment.",
    )

    ubl23_DeclaredCustomsValueAmount = fields.Float(
        string="DeclaredCustomsValueAmount",
        xsd_type="DeclaredCustomsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total declared value for customs purposes of those goods in "
            "this shipment that are subject to the same customs procedure and "
            "have the same tariff/statistical heading, country information, "
            "and duty regime."
        ),
    )

    ubl23_DeclaredForCarriageValueAmount = fields.Float(
        string="The value of this shipment",
        xsd_type="DeclaredForCarriageValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value of this shipment, declared by the shipper or his agent "
            "solely for the purpose of varying the carrier's level of "
            "liability from that provided in the contract of carriage, in case"
            " of loss or damage to goods or delayed delivery."
        ),
    )

    ubl23_DeclaredStatisticsValueAmount = fields.Float(
        string="The value",
        xsd_type="DeclaredStatisticsValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The value, declared for statistical purposes, of those goods in "
            "this shipment that have the same statistical heading."
        ),
    )

    ubl23_FreeOnBoardValueAmount = fields.Float(
        string="FreeOnBoardValueAmount",
        xsd_type="FreeOnBoardValueAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount that has to be or has been paid as calculated"
            " under the applicable trade delivery."
        ),
    )

    ubl23_SpecialInstructions = fields.Char(
        string="Special instructions relating to this shipment",
        xsd_type="SpecialInstructionsType",
        help="Special instructions relating to this shipment.",
    )

    ubl23_DeliveryInstructions = fields.Char(
        string="Delivery instructions relating to this shipment",
        xsd_type="DeliveryInstructionsType",
        help="Delivery instructions relating to this shipment.",
    )

    ubl23_SplitConsignmentIndicator = fields.Boolean(
        string="SplitConsignmentIndicator",
        help=(
            "An indicator that the consignment has been split in transit "
            "(true) or not (false)."
        ),
    )

    ubl23_ConsignmentQuantity = fields.Float(
        string="The total number of consignments within this shipment",
        xsd_type="ConsignmentQuantityType",
        digits=(
            16,
            4,
        ),
        help="The total number of consignments within this shipment.",
    )

    ubl23_Consignment = fields.One2many(
        "ubl.23.consignment",
        "ubl23_Consignment_ShipmentType_id",
        string="A consignment covering this shipment",
        help="A consignment covering this shipment.",
    )

    ubl23_GoodsItem = fields.One2many(
        "ubl.23.goodsitem",
        "ubl23_GoodsItem_ShipmentType_id",
        string="A goods item included in this shipment",
        help="A goods item included in this shipment.",
    )

    ubl23_ShipmentStage = fields.One2many(
        "ubl.23.shipmentstage",
        "ubl23_ShipmentStage_ShipmentType_id",
        string="A stage in the transport movement of this shipment",
        help="A stage in the transport movement of this shipment.",
    )

    ubl23_Delivery = fields.Many2one(
        comodel_name="ubl.23.delivery", string="The delivery of this shipment."
    )

    ubl23_TransportHandlingUnit = fields.One2many(
        "ubl.23.transporthandlingunit",
        "ubl23_TransportHandlingUnit_ShipmentType_id",
        string="A transport handling unit associated with this shipment",
        help="A transport handling unit associated with this shipment.",
    )

    ubl23_ReturnAddress = fields.Many2one(
        comodel_name="ubl.23.returnaddress",
        string="The address to which a shipment should be returned",
        help="The address to which a shipment should be returned.",
    )

    ubl23_OriginAddress = fields.Many2one(
        comodel_name="ubl.23.originaddress",
        string="OriginAddress",
        help=(
            "The region in which the goods have been produced or manufactured,"
            " according to criteria laid down for the purposes of application "
            "of the customs tariff, or of quantitative restrictions, or of any"
            " other measure related to trade."
        ),
    )

    ubl23_FirstArrivalPortLocation = fields.Many2one(
        comodel_name="ubl.23.firstarrivalportlocation",
        string="The first arrival location of a shipment",
        help=(
            "The first arrival location of a shipment. This would be a port "
            "for sea, an airport for air, a terminal for rail, or a border "
            "post for land crossing."
        ),
    )

    ubl23_LastExitPortLocation = fields.Many2one(
        comodel_name="ubl.23.lastexitportlocation",
        string="The final exporting location for a shipment",
        help=(
            "The final exporting location for a shipment. This would be a port"
            " for sea, an airport for air, a terminal for rail, or a border "
            "post for land crossing."
        ),
    )

    ubl23_ExportCountry = fields.Many2one(
        comodel_name="ubl.23.exportcountry",
        string="The country from which the goods were originally exported",
        help=(
            "The country from which the goods were originally exported, "
            "without any commercial transaction taking place in intermediate "
            "countries."
        ),
    )

    ubl23_FreightAllowanceCharge = fields.One2many(
        "ubl.23.freightallowancecharge",
        "ubl23_FreightAllowanceCharge_ShipmentType_id",
        string="A cost incurred by the shipper in moving goods",
        help=(
            "A cost incurred by the shipper in moving goods, by whatever "
            "means, from one place to another under the terms of the contract "
            "of carriage. In addition to transport costs, this may include "
            "such elements as packing, documentation, loading, unloading, and "
            "insurance to the extent that they relate to the freight costs."
        ),
    )


class TransportationSegmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Transportation Segment.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe one segment or leg in a transportation
    service.</ns1:Definition>
    <ns1:ObjectClass>Transportation Segment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.transportationsegmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportationSegmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SequenceNumeric = fields.Float(
        string="SequenceNumeric",
        xsd_required=True,
        xsd_type="SequenceNumericType",
        digits=(
            16,
            4,
        ),
        help=(
            "A number indicating the order of this segment in the sequence of "
            "transportation segments making up a transportation service."
        ),
    )

    ubl23_TransportExecutionPlanReferenceID = fields.Char(
        string="TransportExecutionPlanReferenceID",
        xsd_type="TransportExecutionPlanReferenceIDType",
        help=(
            "An identifier for the transport execution plan governing this "
            "transportation segment."
        ),
    )

    ubl23_TransportationService = fields.Many2one(
        comodel_name="ubl.23.transportationservice",
        string="TransportationService",
        xsd_required=True,
        help=("The transportation service used in this transportation segment."),
    )

    ubl23_TransportServiceProviderParty = fields.Many2one(
        comodel_name="ubl.23.transportserviceproviderparty",
        string="TransportServiceProviderParty",
        xsd_required=True,
        help=(
            "The transport service provider responsible for carrying out "
            "transportation services in this transportation segment."
        ),
    )

    ubl23_ReferencedConsignment = fields.Many2one(
        comodel_name="ubl.23.referencedconsignment",
        string="A consignment referenced in this transportation segment",
        help=(
            "A consignment referenced in this transportation segment. Such a "
            "consignment may have different identifiers than the consignment "
            "identifiers being used in the transportation service agreed "
            "between the transport user and the transport service provider."
        ),
    )

    ubl23_ShipmentStage = fields.One2many(
        "ubl.23.shipmentstage",
        "ubl23_ShipmentStage_TransportationSegmentType_id",
        string="ShipmentStage",
        help=("The shipment stage associated with this transportation segment."),
    )


class ConsolidatedShipment(models.AbstractModel):
    _description = "ConsolidatedShipment"
    _name = "ubl.23.consolidatedshipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsolidatedShipment"

    ubl23_ConsolidatedShipment_ConsignmentType_id = fields.Many2one(
        comodel_name="ubl.23.consignmenttype", xsd_implicit=True, ondelete="cascade"
    )


class ReferencedShipment(models.AbstractModel):
    _description = "ReferencedShipment"
    _name = "ubl.23.referencedshipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedShipment"

    ubl23_ReferencedShipment_TransportHandlingUnitType_id = fields.Many2one(
        comodel_name="ubl.23.transporthandlingunittype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class ReportedShipment(models.AbstractModel):
    _description = "ReportedShipment"
    _name = "ubl.23.reportedshipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReportedShipment"


class Shipment(models.AbstractModel):
    _description = "Shipment"
    _name = "ubl.23.shipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Shipment"

    ubl23_Shipment_DespatchLineType_id = fields.Many2one(
        comodel_name="ubl.23.despatchlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Shipment_ReceiptLineType_id = fields.Many2one(
        comodel_name="ubl.23.receiptlinetype", xsd_implicit=True, ondelete="cascade"
    )


class TransportationSegment(models.AbstractModel):
    _description = "TransportationSegment"
    _name = "ubl.23.transportationsegment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportationSegment"


class CertificateOfOriginApplicationType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Certificate Of Origin Application.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an application for a Certificate of Origin
    (CoO).</ns1:Definition>
    <ns1:ObjectClass>Certificate Of Origin Application</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.certificateoforiginapplicationtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CertificateOfOriginApplicationType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ReferenceID = fields.Char(
        string="ReferenceID",
        xsd_required=True,
        xsd_type="ReferenceIDType",
        help=("An identifier for a reference as part of the CoO application."),
    )

    ubl23_CertificateType = fields.Char(
        string="The type of CoO being applied for",
        xsd_required=True,
        xsd_type="CertificateTypeType",
        help=(
            "The type of CoO being applied for (Ordinary, Re-export, "
            "Commonwealth Preferential, etc.)."
        ),
    )

    ubl23_ApplicationStatusCode = fields.Char(
        string="A code signifying the status of the application",
        xsd_type="ApplicationStatusCodeType",
        help=(
            "A code signifying the status of the application (revision, "
            "replacement, etc.)."
        ),
    )

    ubl23_OriginalJobID = fields.Char(
        string="The latest job number given to the CoO application",
        xsd_required=True,
        xsd_type="OriginalJobIDType",
        help=(
            "The latest job number given to the CoO application. This is used "
            "by the system to keep track of amendments to or cancellation of "
            "any earlier applications."
        ),
    )

    ubl23_PreviousJobID = fields.Char(
        string="PreviousJobID",
        xsd_type="PreviousJobIDType",
        help=(
            "An identifier for the previous job used in case the application "
            "requires query or change."
        ),
    )

    ubl23_Remarks = fields.Char(
        string="Remarks by the applicant for the CoO",
        xsd_type="RemarksType",
        help="Remarks by the applicant for the CoO.",
    )

    ubl23_Shipment = fields.Many2one(
        comodel_name="ubl.23.shipment",
        string="The shipment of goods covered by the CoO",
        xsd_required=True,
        help="The shipment of goods covered by the CoO.",
    )

    ubl23_EndorserParty = fields.One2many(
        "ubl.23.endorserparty",
        "ubl23_EndorserParty_CertificateOfOriginApplicationType_id",
        string="A party providing an endorsement to the CoO",
        help="A party providing an endorsement to the CoO.",
    )

    ubl23_PreparationParty = fields.Many2one(
        comodel_name="ubl.23.preparationparty",
        string="The party (individual",
        xsd_required=True,
        help=(
            "The party (individual, group, or body) that prepared this CoO "
            "application."
        ),
    )

    ubl23_IssuerParty = fields.Many2one(
        comodel_name="ubl.23.issuerparty",
        string="IssuerParty",
        xsd_required=True,
        help=(
            "The organization authorized to issue the CoO requested by this "
            "application."
        ),
    )

    ubl23_ExporterParty = fields.Many2one(
        comodel_name="ubl.23.exporterparty",
        string="The party making an export declaration",
        help=(
            "The party making an export declaration, or on behalf of which the"
            " export declaration is made, and that is the owner of the goods "
            "or has similar right of disposal over them at the time when the "
            "declaration is accepted."
        ),
    )

    ubl23_ImporterParty = fields.Many2one(
        comodel_name="ubl.23.importerparty",
        string="The party making an import declaration",
        help=(
            "The party making an import declaration, or on behalf of which a "
            "customs clearing agent or other authorized person makes an import"
            " declaration. This may include a person who has possession of the"
            " goods or to whom the goods are consigned."
        ),
    )

    ubl23_IssuingCountry = fields.Many2one(
        comodel_name="ubl.23.issuingcountry",
        string="The country where the requested CoO will be issued",
        xsd_required=True,
        help="The country where the requested CoO will be issued.",
    )

    ubl23_DocumentDistribution = fields.One2many(
        "ubl.23.documentdistribution",
        "ubl23_DocumentDistribution_CertificateOfOriginApplicationType_id",
        string="An interested party to which the CoO is to be distributed",
        help="An interested party to which the CoO is to be distributed.",
    )

    ubl23_SupportingDocumentReference = fields.One2many(
        "ubl.23.supportingdocumentreference",
        "ubl23_SupportingDocumentReference_CertificateOfOriginApplicationType_id",
        string="A reference to a document supporting this application",
        help="A reference to a document supporting this application.",
    )


class DeliveryType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Delivery. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a delivery.</ns1:Definition>
    <ns1:ObjectClass>Delivery</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.deliverytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DeliveryType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this delivery.", xsd_type="IDType")

    ubl23_Quantity = fields.Float(
        string="The quantity of items",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The quantity of items, child consignments, shipments in this " "delivery."
        ),
    )

    ubl23_MinimumQuantity = fields.Float(
        string="The minimum quantity of items",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum quantity of items, child consignments, shipments in "
            "this delivery."
        ),
    )

    ubl23_MaximumQuantity = fields.Float(
        string="The maximum quantity of items",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum quantity of items, child consignments, shipments in "
            "this delivery."
        ),
    )

    ubl23_ActualDeliveryDate = fields.Date(string="The actual date of delivery.")

    ubl23_LatestDeliveryDate = fields.Date(
        string="The latest date of delivery allowed by the buyer",
        help="The latest date of delivery allowed by the buyer.",
    )

    ubl23_ReleaseID = fields.Char(
        string="ReleaseID",
        xsd_type="ReleaseIDType",
        help=(
            "An identifier used for approval of access to delivery locations "
            "(e.g., port terminals)."
        ),
    )

    ubl23_TrackingID = fields.Char(
        string="The delivery Tracking ID",
        xsd_type="TrackingIDType",
        help="The delivery Tracking ID (for transport tracking).",
    )

    ubl23_DeliveryAddress = fields.Many2one(
        comodel_name="ubl.23.deliveryaddress", string="The delivery address."
    )

    ubl23_DeliveryLocation = fields.Many2one(
        comodel_name="ubl.23.deliverylocation", string="The delivery location."
    )

    ubl23_AlternativeDeliveryLocation = fields.Many2one(
        comodel_name="ubl.23.alternativedeliverylocation",
        string="An alternative delivery location.",
    )

    ubl23_RequestedDeliveryPeriod = fields.Many2one(
        comodel_name="ubl.23.requesteddeliveryperiod",
        string="The period requested for delivery.",
    )

    ubl23_PromisedDeliveryPeriod = fields.Many2one(
        comodel_name="ubl.23.promiseddeliveryperiod",
        string="The period promised for delivery.",
    )

    ubl23_EstimatedDeliveryPeriod = fields.Many2one(
        comodel_name="ubl.23.estimateddeliveryperiod",
        string="The period estimated for delivery.",
    )

    ubl23_CarrierParty = fields.Many2one(
        comodel_name="ubl.23.carrierparty",
        string="The party responsible for delivering the goods",
        help="The party responsible for delivering the goods.",
    )

    ubl23_DeliveryParty = fields.Many2one(
        comodel_name="ubl.23.deliveryparty",
        string="The party to whom the goods are delivered",
        help="The party to whom the goods are delivered.",
    )

    ubl23_NotifyParty = fields.One2many(
        "ubl.23.notifyparty",
        "ubl23_NotifyParty_DeliveryType_id",
        string="A party to be notified of this delivery",
        help="A party to be notified of this delivery.",
    )

    ubl23_Despatch = fields.Many2one(
        comodel_name="ubl.23.despatch",
        string="The despatch",
        help="The despatch (pickup) associated with this delivery.",
    )

    ubl23_DeliveryTerms = fields.One2many(
        "ubl.23.deliveryterms",
        "ubl23_DeliveryTerms_DeliveryType_id",
        string="Terms and conditions relating to the delivery",
        help="Terms and conditions relating to the delivery.",
    )

    ubl23_MinimumDeliveryUnit = fields.Many2one(
        comodel_name="ubl.23.minimumdeliveryunit",
        string="The minimum delivery unit for this delivery",
        help="The minimum delivery unit for this delivery.",
    )

    ubl23_MaximumDeliveryUnit = fields.Many2one(
        comodel_name="ubl.23.maximumdeliveryunit",
        string="The maximum delivery unit for this delivery",
        help="The maximum delivery unit for this delivery.",
    )

    ubl23_Shipment = fields.Many2one(
        comodel_name="ubl.23.shipment", string="The shipment being delivered."
    )


class OrderedShipmentType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Ordered Shipment. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe an ordered shipment.</ns1:Definition>
    <ns1:ObjectClass>Ordered Shipment</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.orderedshipmenttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderedShipmentType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Shipment = fields.Many2one(
        comodel_name="ubl.23.shipment",
        string="The ordered shipment.",
        xsd_required=True,
    )

    ubl23_Package = fields.One2many(
        "ubl.23.package",
        "ubl23_Package_OrderedShipmentType_id",
        string="A package in this ordered shipment.",
    )


class CertificateOfOriginApplication(models.AbstractModel):
    _description = "CertificateOfOriginApplication"
    _name = "ubl.23.certificateoforiginapplication"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CertificateOfOriginApplication"


class ContractualDelivery(models.AbstractModel):
    _description = "ContractualDelivery"
    _name = "ubl.23.contractualdelivery"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractualDelivery"


class Delivery(models.AbstractModel):
    _description = "Delivery"
    _name = "ubl.23.delivery"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Delivery"

    ubl23_Delivery_ConsumptionLineType_id = fields.Many2one(
        comodel_name="ubl.23.consumptionlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Delivery_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Delivery_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Delivery_InvoiceLineType_id = fields.Many2one(
        comodel_name="ubl.23.invoicelinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_Delivery_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )


class OrderedShipment(models.AbstractModel):
    _description = "OrderedShipment"
    _name = "ubl.23.orderedshipment"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderedShipment"

    ubl23_OrderedShipment_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )


class ContractType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Contract. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a contract.</ns1:Definition>
    <ns1:ObjectClass>Contract</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.contracttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ContractType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(string="An identifier for this contract.", xsd_type="IDType")

    ubl23_IssueDate = fields.Date(
        string="The date on which this contract was issued",
        help="The date on which this contract was issued.",
    )

    ubl23_NominationDate = fields.Date(
        string="In a transportation contract",
        help=(
            "In a transportation contract, the deadline date by which the "
            "services referred to in the transport execution plan have to be "
            "booked. For example, if this service is a carrier service "
            "scheduled for Wednesday 16 February 2011 at 10 a.m. CET, the "
            "nomination date might be Tuesday15 February 2011."
        ),
    )

    ubl23_ContractTypeCode = fields.Char(
        string="The type of this contract",
        xsd_type="ContractTypeCodeType",
        help=(
            "The type of this contract, expressed as a code, such as Cost plus"
            " award fee and Cost plus fixed fee from UNCEFACT Contract Type "
            "code list."
        ),
    )

    ubl23_ContractType = fields.Char(
        string="The type of this contract (ContractType)",
        xsd_type="ContractTypeType",
        help=(
            "The type of this contract, expressed as text, such as Cost plus "
            "award fee and Cost plus fixed fee from UNCEFACT Contract Type "
            "code list."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_VersionID = fields.Char(
        string="An identifier for the current version of this contract",
        xsd_type="VersionIDType",
        help="An identifier for the current version of this contract.",
    )

    ubl23_ModificationReasonCode = fields.Char(
        string="ModificationReasonCode",
        xsd_type="ModificationReasonCodeType",
        help=("The main reason for modifying the contract expressed as a code."),
    )

    ubl23_ModificationReasonDescription = fields.Char(
        string="Text describing the main reason for modifying the contract",
        xsd_type="ModificationReasonDescriptionType",
    )

    ubl23_Description = fields.Char(
        string="Text describing this contract.", xsd_type="DescriptionType"
    )

    ubl23_ValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.validityperiod",
        string="The period during which this contract is valid",
        help="The period during which this contract is valid.",
    )

    ubl23_ContractDocumentReference = fields.One2many(
        "ubl.23.contractdocumentreference",
        "ubl23_ContractDocumentReference_ContractType_id",
        string="A reference to a contract document.",
    )

    ubl23_NominationPeriod = fields.Many2one(
        comodel_name="ubl.23.nominationperiod",
        string="In a transportation contract (NominationPeriod)",
        help=(
            "In a transportation contract, the period required to book the "
            "services specified in the contract before the services can begin."
        ),
    )

    ubl23_ContractualDelivery = fields.Many2one(
        comodel_name="ubl.23.contractualdelivery",
        string="In a transportation contract (ContractualDelivery)",
        help=(
            "In a transportation contract, the delivery of the services "
            "required to book the services specified in the contract."
        ),
    )


class Contract(models.AbstractModel):
    _description = "Contract"
    _name = "ubl.23.contract"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Contract"


class ForeignExchangeContract(models.AbstractModel):
    _description = "ForeignExchangeContract"
    _name = "ubl.23.foreignexchangecontract"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForeignExchangeContract"


class ReferencedContract(models.AbstractModel):
    _description = "ReferencedContract"
    _name = "ubl.23.referencedcontract"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReferencedContract"


class TransportContract(models.AbstractModel):
    _description = "TransportContract"
    _name = "ubl.23.transportcontract"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TransportContract"


class ExchangeRateType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Exchange Rate. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define an exchange rate.</ns1:Definition>
    <ns1:ObjectClass>Exchange Rate</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.exchangeratetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExchangeRateType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SourceCurrencyCode = fields.Char(
        string="SourceCurrencyCode",
        xsd_required=True,
        xsd_type="SourceCurrencyCodeType",
        help=(
            "The reference currency for this exchange rate; the currency from "
            "which the exchange is being made."
        ),
    )

    ubl23_SourceCurrencyBaseRate = fields.Char(
        string="SourceCurrencyBaseRate",
        xsd_type="SourceCurrencyBaseRateType",
        help=(
            "In the case of a source currency with denominations of small "
            "value, the unit base."
        ),
    )

    ubl23_TargetCurrencyCode = fields.Char(
        string="TargetCurrencyCode",
        xsd_required=True,
        xsd_type="TargetCurrencyCodeType",
        help=(
            "The target currency for this exchange rate; the currency to which"
            " the exchange is being made."
        ),
    )

    ubl23_TargetCurrencyBaseRate = fields.Char(
        string="TargetCurrencyBaseRate",
        xsd_type="TargetCurrencyBaseRateType",
        help=(
            "In the case of a target currency with denominations of small "
            "value, the unit base."
        ),
    )

    ubl23_ExchangeMarketID = fields.Char(
        string="ExchangeMarketID",
        xsd_type="ExchangeMarketIDType",
        help=(
            "An identifier for the currency exchange market used as the source"
            " of this exchange rate."
        ),
    )

    ubl23_CalculationRate = fields.Char(
        string="CalculationRate",
        xsd_type="CalculationRateType",
        help=(
            "The factor applied to the source currency to calculate the target"
            " currency."
        ),
    )

    ubl23_MathematicOperatorCode = fields.Char(
        string="MathematicOperatorCode",
        xsd_type="MathematicOperatorCodeType",
        help=(
            "A code signifying whether the calculation rate is a multiplier or"
            " a divisor."
        ),
    )

    ubl23_Date = fields.Date(
        string="The date on which the exchange rate was established",
        help="The date on which the exchange rate was established.",
    )

    ubl23_ForeignExchangeContract = fields.Many2one(
        comodel_name="ubl.23.foreignexchangecontract",
        string="A contract for foreign exchange.",
    )


class TenderResultType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Tender Result. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the awarding of a tender in a tendering
    process.</ns1:Definition>
    <ns1:ObjectClass>Tender Result</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.tenderresulttype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderResultType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_AwardID = fields.Char(
        string="An identifier for this tender result",
        xsd_type="AwardIDType",
        help="An identifier for this tender result.",
    )

    ubl23_TenderResultCode = fields.Char(
        string="A code signifying the result of the tendering process",
        xsd_type="TenderResultCodeType",
        help="A code signifying the result of the tendering process.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the result of the tendering process",
        xsd_type="DescriptionType",
        help="Text describing the result of the tendering process.",
    )

    ubl23_AdvertisementAmount = fields.Float(
        string="AdvertisementAmount",
        xsd_type="AdvertisementAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary value of the advertisement for this tendering " "process. "
        ),
    )

    ubl23_AwardDate = fields.Date(
        string="The date on which this result was formalized",
        xsd_required=True,
        help="The date on which this result was formalized.",
    )

    ubl23_ReceivedTenderQuantity = fields.Float(
        string="ReceivedTenderQuantity",
        xsd_type="ReceivedTenderQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The total number of tenders received in this tendering process."),
    )

    ubl23_LowerTenderAmount = fields.Float(
        string="LowerTenderAmount",
        xsd_type="LowerTenderAmountType",
        digits=(
            16,
            4,
        ),
        help=("The least expensive tender received in the tendering process."),
    )

    ubl23_HigherTenderAmount = fields.Float(
        string="HigherTenderAmount",
        xsd_type="HigherTenderAmountType",
        digits=(
            16,
            4,
        ),
        help=("The most expensive tender received in this tendering process."),
    )

    ubl23_StartDate = fields.Date(
        string="The date on which the awarded contract begins",
        help="The date on which the awarded contract begins.",
    )

    ubl23_ReceivedElectronicTenderQuantity = fields.Float(
        string="The number of electronic tenders received",
        xsd_type="ReceivedElectronicTenderQuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of electronic tenders received.",
    )

    ubl23_ReceivedForeignTenderQuantity = fields.Float(
        string="The number of foreing tenders received",
        xsd_type="ReceivedForeignTenderQuantityType",
        digits=(
            16,
            4,
        ),
        help="The number of foreing tenders received.",
    )

    ubl23_Contract = fields.Many2one(
        comodel_name="ubl.23.contract",
        string="A contract governing this tender result",
        help="A contract governing this tender result.",
    )

    ubl23_AwardedTenderedProject = fields.Many2one(
        comodel_name="ubl.23.awardedtenderedproject",
        string="AwardedTenderedProject",
        help=("The awarded tendered project associated with this tender result."),
    )

    ubl23_ContractFormalizationPeriod = fields.Many2one(
        comodel_name="ubl.23.contractformalizationperiod",
        string="ContractFormalizationPeriod",
        help=(
            "The period during which a contract associated with the awarded "
            "project is to be formalized."
        ),
    )

    ubl23_SubcontractTerms = fields.One2many(
        "ubl.23.subcontractterms",
        "ubl23_SubcontractTerms_TenderResultType_id",
        string="Subcontract terms for this tender result",
        help="Subcontract terms for this tender result.",
    )

    ubl23_WinningParty = fields.One2many(
        "ubl.23.winningparty",
        "ubl23_WinningParty_TenderResultType_id",
        string="WinningParty",
        help=("A party that is identified as the awarded by a tender result."),
    )


class UtilityItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Utility Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the consumption of a utility
    product.</ns1:Definition>
    <ns1:ObjectClass>Utility Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.utilityitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilityItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this utility item.",
        xsd_required=True,
        xsd_type="IDType",
    )

    ubl23_SubscriberID = fields.Char(
        string="An identifier for the subscriber to the utility",
        xsd_type="SubscriberIDType",
        help="An identifier for the subscriber to the utility.",
    )

    ubl23_SubscriberType = fields.Char(
        string="Identification of the subscriber type",
        xsd_type="SubscriberTypeType",
        help="Identification of the subscriber type, expressed as text..",
    )

    ubl23_SubscriberTypeCode = fields.Char(
        string="The code identifying for the service type",
        xsd_type="SubscriberTypeCodeType",
        help="The code identifying for the service type.",
    )

    ubl23_Description = fields.Char(
        string="Text describing the consumption product",
        xsd_type="DescriptionType",
        help="Text describing the consumption product.",
    )

    ubl23_PackQuantity = fields.Float(
        string="The unit packaging quantity.",
        xsd_type="PackQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_PackSizeNumeric = fields.Float(
        string="The number of items in a pack.",
        xsd_type="PackSizeNumericType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ConsumptionType = fields.Char(
        string="The type of product consumed",
        xsd_type="ConsumptionTypeType",
        help="The type of product consumed, expressed as text.",
    )

    ubl23_ConsumptionTypeCode = fields.Char(
        string="The type of product consumed (ConsumptionTypeCode)",
        xsd_type="ConsumptionTypeCodeType",
        help="The type of product consumed, expressed as a code.",
    )

    ubl23_CurrentChargeType = fields.Char(
        string="CurrentChargeType",
        xsd_type="CurrentChargeTypeType",
        help="Information of the actual payments type for the utility Item",
    )

    ubl23_CurrentChargeTypeCode = fields.Char(
        string="CurrentChargeTypeCode",
        xsd_type="CurrentChargeTypeCodeType",
        help=("Information of the actual payments type code expressed as a code"),
    )

    ubl23_OneTimeChargeType = fields.Char(
        string="Information about the one",
        xsd_type="OneTimeChargeTypeType",
        help=(
            "Information about the one-time payment type in case everything is"
            " paid One time"
        ),
    )

    ubl23_OneTimeChargeTypeCode = fields.Char(
        string="Information about the one (OneTimeChargeTypeCode)",
        xsd_type="OneTimeChargeTypeCodeType",
        help="Information about the one-time payment type code",
    )

    ubl23_TaxCategory = fields.Many2one(
        comodel_name="ubl.23.taxcategory",
        string="The tax category applicable to this utility item",
        help="The tax category applicable to this utility item.",
    )

    ubl23_Contract = fields.Many2one(
        comodel_name="ubl.23.contract",
        string="Contract",
        help=(
            "A contract setting forth conditions applicable to this utility " "item."
        ),
    )


class ExchangeRate(models.AbstractModel):
    _description = "ExchangeRate"
    _name = "ubl.23.exchangerate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ExchangeRate"

    ubl23_ExchangeRate_TelecommunicationsServiceType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationsservicetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_ExchangeRate_TelecommunicationsSupplyLineType_id = fields.Many2one(
        comodel_name="ubl.23.telecommunicationssupplylinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class PaymentAlternativeExchangeRate(models.AbstractModel):
    _description = "PaymentAlternativeExchangeRate"
    _name = "ubl.23.paymentalternativeexchangerate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentAlternativeExchangeRate"


class PaymentExchangeRate(models.AbstractModel):
    _description = "PaymentExchangeRate"
    _name = "ubl.23.paymentexchangerate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PaymentExchangeRate"


class PricingExchangeRate(models.AbstractModel):
    _description = "PricingExchangeRate"
    _name = "ubl.23.pricingexchangerate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PricingExchangeRate"


class TaxExchangeRate(models.AbstractModel):
    _description = "TaxExchangeRate"
    _name = "ubl.23.taxexchangerate"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxExchangeRate"


class TenderResult(models.AbstractModel):
    _description = "TenderResult"
    _name = "ubl.23.tenderresult"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TenderResult"


class UtilityItem(models.AbstractModel):
    _description = "UtilityItem"
    _name = "ubl.23.utilityitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "UtilityItem"


class PriceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Price. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a price, expressed in a data structure
    containing multiple properties (compare with
    UnstructuredPrice).</ns1:Definition>
    <ns1:ObjectClass>Price</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.pricetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "PriceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_PriceAmount = fields.Monetary(
        string="The amount of the price.",
        xsd_required=True,
        xsd_type="PriceAmountType",
        currency_field="brl_currency_id",
    )

    ubl23_BaseQuantity = fields.Float(
        string="The quantity at which this price applies",
        xsd_type="BaseQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity at which this price applies.",
    )

    ubl23_PriceChangeReason = fields.Char(
        string="A reason for a price change.", xsd_type="PriceChangeReasonType"
    )

    ubl23_PriceTypeCode = fields.Char(
        string="The type of price",
        xsd_type="PriceTypeCodeType",
        help="The type of price, expressed as a code.",
    )

    ubl23_PriceType = fields.Char(
        string="The type of price (PriceType)",
        xsd_type="PriceTypeType",
        help="The type of price, expressed as text.",
    )

    ubl23_OrderableUnitFactorRate = fields.Char(
        string="OrderableUnitFactorRate",
        xsd_type="OrderableUnitFactorRateType",
        help=(
            "The factor by which the base price unit can be converted to the "
            "orderable unit."
        ),
    )

    ubl23_ValidityPeriod = fields.One2many(
        "ubl.23.validityperiod",
        "ubl23_ValidityPeriod_PriceType_id",
        string="A period during which this price is valid",
        help="A period during which this price is valid.",
    )

    ubl23_PriceList = fields.Many2one(
        comodel_name="ubl.23.pricelist",
        string="Information about a price list applicable to this price",
        help="Information about a price list applicable to this price.",
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_PriceType_id",
        string="An allowance or charge associated with this price",
        help="An allowance or charge associated with this price.",
    )

    ubl23_PricingExchangeRate = fields.Many2one(
        comodel_name="ubl.23.pricingexchangerate",
        string="The exchange rate applicable to this price",
        help=(
            "The exchange rate applicable to this price, if it differs from "
            "the exchange rate applicable to the document as a whole."
        ),
    )

    ubl23_AlternativeCurrencyPrice = fields.One2many(
        "ubl.23.alternativecurrencyprice",
        "ubl23_AlternativeCurrencyPrice_PriceType_id",
        string="The price expressed in an alternative currency",
    )


class ReminderLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Reminder Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Reminder
    document.</ns1:Definition>
    <ns1:ObjectClass>Reminder Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.reminderlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReminderLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this reminder line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this reminder line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this reminder line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this reminder line.",
    )

    ubl23_BalanceBroughtForwardIndicator = fields.Boolean(
        string="BalanceBroughtForwardIndicator",
        help=(
            "An indication that this reminder line contains a balance brought "
            "forward (true) or does not (false)."
        ),
    )

    ubl23_DebitLineAmount = fields.Float(
        string="The amount debited on this reminder line",
        xsd_type="DebitLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount debited on this reminder line.",
    )

    ubl23_CreditLineAmount = fields.Float(
        string="The amount credited on this reminder line",
        xsd_type="CreditLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount credited on this reminder line.",
    )

    ubl23_AccountingCostCode = fields.Char(
        string="The buyer's accounting cost centre for this reminder line",
        xsd_type="AccountingCostCodeType",
        help=(
            "The buyer's accounting cost centre for this reminder line, "
            "expressed as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The buyer's accounting cost centre for this reminder line, "
            "expressed as text."
        ),
    )

    ubl23_PenaltySurchargePercent = fields.Char(
        string="The penalty for late payment",
        xsd_type="PenaltySurchargePercentType",
        help="The penalty for late payment, expressed as a percentage.",
    )

    ubl23_Amount = fields.Monetary(
        string="The amount on this reminder line.",
        xsd_type="AmountType",
        currency_field="brl_currency_id",
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_ReminderPeriod = fields.One2many(
        "ubl.23.reminderperiod",
        "ubl23_ReminderPeriod_ReminderLineType_id",
        string="A period to which this reminder line applies",
        help="A period to which this reminder line applies.",
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_ReminderLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this reminder " "line."
        ),
    )

    ubl23_ExchangeRate = fields.Many2one(
        comodel_name="ubl.23.exchangerate",
        string="ExchangeRate",
        help=(
            "The rate of exchange between the currency of the Reminder and the"
            " currency of the document described in the BillingReference."
        ),
    )


class RemittanceAdviceLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Remittance Advice Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Remittance
    Advice.</ns1:Definition>
    <ns1:ObjectClass>Remittance Advice Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.remittanceadvicelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RemittanceAdviceLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this remittance advice line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this remittance advice line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help=("A universally unique identifier for this remittance advice line."),
    )

    ubl23_DebitLineAmount = fields.Float(
        string="The amount debited on this remittance advice line",
        xsd_type="DebitLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount debited on this remittance advice line.",
    )

    ubl23_CreditLineAmount = fields.Float(
        string="The amount credited on this remittance advice line",
        xsd_type="CreditLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount credited on this remittance advice line.",
    )

    ubl23_BalanceAmount = fields.Float(
        string="BalanceAmount",
        xsd_type="BalanceAmountType",
        digits=(
            16,
            4,
        ),
        help=("The monetary balance associated with this remittance advice line."),
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_InvoicingPartyReference = fields.Char(
        string="InvoicingPartyReference",
        xsd_type="InvoicingPartyReferenceType",
        help=(
            "A reference to the order for payment used by the invoicing party."
            " This may have been requested of the payer by the payee to "
            "accompany its remittance."
        ),
    )

    ubl23_AccountingSupplierParty = fields.Many2one(
        comodel_name="ubl.23.accountingsupplierparty",
        string="AccountingSupplierParty",
        help=(
            "The Accounting Supplier Party related to the remittance "
            "information reported on this Remittance Advice Line."
        ),
    )

    ubl23_AccountingCustomerParty = fields.Many2one(
        comodel_name="ubl.23.accountingcustomerparty",
        string="AccountingCustomerParty",
        help=(
            "The Accounting Customer Party related to the remittance "
            "information reported on this Remittance Advice Line."
        ),
    )

    ubl23_BuyerCustomerParty = fields.Many2one(
        comodel_name="ubl.23.buyercustomerparty",
        string="The buyer associated with this remittance advice line",
        help="The buyer associated with this remittance advice line.",
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty",
        string="SellerSupplierParty",
        help=("The seller/supplier associated with this remittance advice line."),
    )

    ubl23_OriginatorCustomerParty = fields.Many2one(
        comodel_name="ubl.23.originatorcustomerparty", string="The originating party."
    )

    ubl23_PayeeParty = fields.Many2one(
        comodel_name="ubl.23.payeeparty", string="The payee."
    )

    ubl23_InvoicePeriod = fields.One2many(
        "ubl.23.invoiceperiod",
        "ubl23_InvoicePeriod_RemittanceAdviceLineType_id",
        string="InvoicePeriod",
        help=("An invoice period to which this remittance advice line applies."),
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_RemittanceAdviceLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this remittance"
            " advice line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_RemittanceAdviceLineType_id",
        string="DocumentReference",
        help=(
            "A reference to a document associated with this remittance advice " "line."
        ),
    )

    ubl23_ExchangeRate = fields.Many2one(
        comodel_name="ubl.23.exchangerate",
        string="ExchangeRate",
        help=(
            "The rate of exchange between the currency of the Remittance "
            "Advice and the currency of the document described in the "
            "BillingReference."
        ),
    )


class StatementLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Statement Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Statement of
    account.</ns1:Definition>
    <ns1:ObjectClass>Statement Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.statementlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatementLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this statement line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this statement line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this statement line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this statement line.",
    )

    ubl23_BalanceBroughtForwardIndicator = fields.Boolean(
        string="BalanceBroughtForwardIndicator",
        help=(
            "An indication that this statement line contains an outstanding "
            "balance from the previous bill(s) (true) or does not (false)."
        ),
    )

    ubl23_DebitLineAmount = fields.Float(
        string="The amount debited on this statement line",
        xsd_type="DebitLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount debited on this statement line.",
    )

    ubl23_CreditLineAmount = fields.Float(
        string="The amount credited on this statement line",
        xsd_type="CreditLineAmountType",
        digits=(
            16,
            4,
        ),
        help="The amount credited on this statement line.",
    )

    ubl23_BalanceAmount = fields.Float(
        string="The balance amount on this statement line",
        xsd_type="BalanceAmountType",
        digits=(
            16,
            4,
        ),
        help="The balance amount on this statement line.",
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_PaymentMeans = fields.Many2one(
        comodel_name="ubl.23.paymentmeans",
        string="A means of payment associated with this statement line",
        help="A means of payment associated with this statement line.",
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_StatementLineType_id",
        string="PaymentTerms",
        help=(
            "A specification of payment terms associated with this statement " "line."
        ),
    )

    ubl23_BuyerCustomerParty = fields.Many2one(
        comodel_name="ubl.23.buyercustomerparty",
        string="The buyer associated with this statement line",
        help="The buyer associated with this statement line.",
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty",
        string="The seller/supplier associated with this statement line",
        help="The seller/supplier associated with this statement line.",
    )

    ubl23_OriginatorCustomerParty = fields.Many2one(
        comodel_name="ubl.23.originatorcustomerparty", string="The originating party."
    )

    ubl23_AccountingCustomerParty = fields.Many2one(
        comodel_name="ubl.23.accountingcustomerparty",
        string="AccountingCustomerParty",
        help=(
            "The Accounting Customer Party related to the statement "
            "information reported on this Statement Line."
        ),
    )

    ubl23_AccountingSupplierParty = fields.Many2one(
        comodel_name="ubl.23.accountingsupplierparty",
        string="AccountingSupplierParty",
        help=(
            "The Accounting Supplier Party related to the statement "
            "information reported on this Statement Line."
        ),
    )

    ubl23_PayeeParty = fields.Many2one(
        comodel_name="ubl.23.payeeparty", string="The payee."
    )

    ubl23_InvoicePeriod = fields.One2many(
        "ubl.23.invoiceperiod",
        "ubl23_InvoicePeriod_StatementLineType_id",
        string="An invoice period to which this statement line applies",
        help="An invoice period to which this statement line applies.",
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_StatementLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this statement " "line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_StatementLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this statement line."),
    )

    ubl23_ExchangeRate = fields.Many2one(
        comodel_name="ubl.23.exchangerate",
        string="ExchangeRate",
        help=(
            "The rate of exchange between the currency of the Statement and "
            "the currency of the document described in the BillingReference."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_StatementLineType_id",
        string="AllowanceCharge",
        help=(
            "A charge or discount price component associated with this "
            "statement line."
        ),
    )

    ubl23_CollectedPayment = fields.One2many(
        "ubl.23.collectedpayment",
        "ubl23_CollectedPayment_StatementLineType_id",
        string="A collected payment.",
    )


class AlternativeConditionPrice(models.AbstractModel):
    _description = "AlternativeConditionPrice"
    _name = "ubl.23.alternativeconditionprice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AlternativeConditionPrice"

    ubl23_AlternativeConditionPrice_PricingReferenceType_id = fields.Many2one(
        comodel_name="ubl.23.pricingreferencetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class AlternativeCurrencyPrice(models.AbstractModel):
    _description = "AlternativeCurrencyPrice"
    _name = "ubl.23.alternativecurrencyprice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AlternativeCurrencyPrice"

    ubl23_AlternativeCurrencyPrice_PriceType_id = fields.Many2one(
        comodel_name="ubl.23.pricetype", xsd_implicit=True, ondelete="cascade"
    )


class Price(models.AbstractModel):
    _description = "Price"
    _name = "ubl.23.price"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Price"


class ReminderLine(models.AbstractModel):
    _description = "ReminderLine"
    _name = "ubl.23.reminderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ReminderLine"


class RemittanceAdviceLine(models.AbstractModel):
    _description = "RemittanceAdviceLine"
    _name = "ubl.23.remittanceadviceline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RemittanceAdviceLine"


class StatementLine(models.AbstractModel):
    _description = "StatementLine"
    _name = "ubl.23.statementline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "StatementLine"


class TaxExclusivePrice(models.AbstractModel):
    _description = "TaxExclusivePrice"
    _name = "ubl.23.taxexclusiveprice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxExclusivePrice"

    ubl23_TaxExclusivePrice_SalesItemType_id = fields.Many2one(
        comodel_name="ubl.23.salesitemtype", xsd_implicit=True, ondelete="cascade"
    )


class TaxInclusivePrice(models.AbstractModel):
    _description = "TaxInclusivePrice"
    _name = "ubl.23.taxinclusiveprice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TaxInclusivePrice"

    ubl23_TaxInclusivePrice_SalesItemType_id = fields.Many2one(
        comodel_name="ubl.23.salesitemtype", xsd_implicit=True, ondelete="cascade"
    )


class ConsumptionLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a line item for utility consumption. To
    specify more than one utility item, use separate consumption
    lines.</ns1:Definition>
    <ns1:ObjectClass>Consumption Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptionlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this consumption line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this consumption line.",
    )

    ubl23_ParentDocumentLineReferenceID = fields.Char(
        string="ParentDocumentLineReferenceID",
        xsd_type="ParentDocumentLineReferenceIDType",
        help=(
            "An identifier for the transaction line on a related document "
            "(such as an invoice) that covers this consumption line."
        ),
    )

    ubl23_InvoicedQuantity = fields.Float(
        string="The quantity invoiced.",
        xsd_required=True,
        xsd_type="InvoicedQuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The monetary amount",
        xsd_required=True,
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The monetary amount, including discount, to be charged for this "
            "consumption line."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="The total amount for this consumption line",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this consumption line, including all "
            "allowances, charges and taxes."
        ),
    )

    ubl23_Period = fields.Many2one(
        comodel_name="ubl.23.period",
        string="The period of time covered by this consumption line",
        help="The period of time covered by this consumption line.",
    )

    ubl23_Delivery = fields.One2many(
        "ubl.23.delivery",
        "ubl23_Delivery_ConsumptionLineType_id",
        string="A delivery of the utility item on this consumption line",
        help="A delivery of the utility item on this consumption line.",
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_ConsumptionLineType_id",
        string="AllowanceCharge",
        help=("An allowance or charge that applies to this consumption line."),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_ConsumptionLineType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "consumption line."
        ),
    )

    ubl23_UtilityItem = fields.Many2one(
        comodel_name="ubl.23.utilityitem",
        string="The utility item consumed.",
        xsd_required=True,
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="The price associated with this consumption line",
        help=(
            "The price associated with this consumption line, expressed in a "
            "data structure containing multiple properties."
        ),
    )

    ubl23_UnstructuredPrice = fields.Many2one(
        comodel_name="ubl.23.unstructuredprice",
        string="UnstructuredPrice",
        help=(
            "The price associated with this consumption line expressed in a "
            "less structured form that includes just the amount and the time "
            "of use."
        ),
    )


class CreditNoteLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Credit Note Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Credit Note or Self Billed Credit
    Note.</ns1:Definition>
    <ns1:ObjectClass>Credit Note Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.creditnotelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CreditNoteLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this credit note line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this credit note line.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this credit note line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this credit note line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_CreditedQuantity = fields.Float(
        string="The quantity of items credited in this credit note line",
        xsd_type="CreditedQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of items credited in this credit note line.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this credit note line",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this credit note line, including allowance "
            "charges but exclusive of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this credit note line, including all "
            "allowances, charges and taxes."
        ),
    )

    ubl23_TaxPointDate = fields.Date(
        string="The date of this credit note line",
        help=(
            "The date of this credit note line, used to indicate the point at "
            "which tax becomes applicable."
        ),
    )

    ubl23_AccountingCostCode = fields.Char(
        string="AccountingCostCode",
        xsd_type="AccountingCostCodeType",
        help=(
            "The buyer's accounting cost centre for this credit note line, "
            "expressed as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The buyer's accounting cost centre for this credit note line, "
            "expressed as text."
        ),
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_FreeOfChargeIndicator = fields.Boolean(
        string="An indicator that this credit note line is free of charge",
        help=(
            "An indicator that this credit note line is free of charge (true) "
            "or not (false). The default is false."
        ),
    )

    ubl23_InvoicePeriod = fields.One2many(
        "ubl.23.invoiceperiod",
        "ubl23_InvoicePeriod_CreditNoteLineType_id",
        string="An invoice period to which this credit note line applies",
        help="An invoice period to which this credit note line applies.",
    )

    ubl23_OrderLineReference = fields.One2many(
        "ubl.23.orderlinereference",
        "ubl23_OrderLineReference_CreditNoteLineType_id",
        string="OrderLineReference",
        help=("A reference to an order line associated with this credit note " "line."),
    )

    ubl23_DiscrepancyResponse = fields.One2many(
        "ubl.23.discrepancyresponse",
        "ubl23_DiscrepancyResponse_CreditNoteLineType_id",
        string="A reason for the credit.",
    )

    ubl23_DespatchLineReference = fields.One2many(
        "ubl.23.despatchlinereference",
        "ubl23_DespatchLineReference_CreditNoteLineType_id",
        string="DespatchLineReference",
        help=(
            "A reference to a despatch line associated with this credit note " "line."
        ),
    )

    ubl23_ReceiptLineReference = fields.One2many(
        "ubl.23.receiptlinereference",
        "ubl23_ReceiptLineReference_CreditNoteLineType_id",
        string="ReceiptLineReference",
        help=(
            "A reference to a receipt line associated with this credit note " "line."
        ),
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_CreditNoteLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this credit "
            "note line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_CreditNoteLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this credit note line."),
    )

    ubl23_PricingReference = fields.Many2one(
        comodel_name="ubl.23.pricingreference",
        string="PricingReference",
        help=(
            "A reference to pricing and item location information associated "
            "with this credit note line."
        ),
    )

    ubl23_OriginatorParty = fields.Many2one(
        comodel_name="ubl.23.originatorparty",
        string="OriginatorParty",
        help=(
            "The party who originated the Order to which the Credit Note is " "related."
        ),
    )

    ubl23_Delivery = fields.One2many(
        "ubl.23.delivery",
        "ubl23_Delivery_CreditNoteLineType_id",
        string="A delivery associated with this credit note line",
        help="A delivery associated with this credit note line.",
    )

    ubl23_PaymentTerms = fields.One2many(
        "ubl.23.paymentterms",
        "ubl23_PaymentTerms_CreditNoteLineType_id",
        string="PaymentTerms",
        help=(
            "A specification of payment terms associated with this credit note" " line."
        ),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_CreditNoteLineType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "credit note line."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_CreditNoteLineType_id",
        string="An allowance or charge associated with this credit note",
        help="An allowance or charge associated with this credit note.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this credit note line",
        help="The item associated with this credit note line.",
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="Price",
        help="The price of the item associated with this credit note line.",
    )

    ubl23_DeliveryTerms = fields.One2many(
        "ubl.23.deliveryterms",
        "ubl23_DeliveryTerms_CreditNoteLineType_id",
        string="DeliveryTerms",
        help=(
            "Terms and conditions of a delivery associated with this credit "
            "note line."
        ),
    )

    ubl23_SubCreditNoteLine = fields.One2many(
        "ubl.23.subcreditnoteline",
        "ubl23_SubCreditNoteLine_CreditNoteLineType_id",
        string="SubCreditNoteLine",
        help=(
            "A class defining one or more Credit Note Lines detailing the "
            "credit note line."
        ),
    )

    ubl23_ItemPriceExtension = fields.Many2one(
        comodel_name="ubl.23.itempriceextension",
        string="The price extension",
        help=(
            "The price extension, calculated by multiplying the price per unit"
            " by the quantity of items on this credit note line."
        ),
    )


class DebitNoteLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Debit Note Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Debit Note.</ns1:Definition>
    <ns1:ObjectClass>Debit Note Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.debitnotelinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DebitNoteLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this debit note line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this debit note line.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this debit note line",
        xsd_type="UUIDType",
        help="A universally unique identifier for this debit note line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_DebitedQuantity = fields.Float(
        string="The quantity of Items debited in this debit note line",
        xsd_type="DebitedQuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of Items debited in this debit note line.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this debit note line",
        xsd_required=True,
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this debit note line, including allowance "
            "charges but net of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this debit note line, including all "
            "allowances, charges and taxes."
        ),
    )

    ubl23_TaxPointDate = fields.Date(
        string="The date of this debit note line",
        help=(
            "The date of this debit note line, used to indicate the point at "
            "which tax becomes applicable."
        ),
    )

    ubl23_AccountingCostCode = fields.Char(
        string="AccountingCostCode",
        xsd_type="AccountingCostCodeType",
        help=(
            "The buyer's accounting cost centre for this debit note line, "
            "expressed as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The buyer's accounting cost centre for this debit note line, "
            "expressed as text."
        ),
    )

    ubl23_PaymentPurposeCode = fields.Char(
        string="A code signifying the business purpose for this payment",
        xsd_type="PaymentPurposeCodeType",
        help="A code signifying the business purpose for this payment.",
    )

    ubl23_DiscrepancyResponse = fields.One2many(
        "ubl.23.discrepancyresponse",
        "ubl23_DiscrepancyResponse_DebitNoteLineType_id",
        string="A reason for the debit.",
    )

    ubl23_DespatchLineReference = fields.One2many(
        "ubl.23.despatchlinereference",
        "ubl23_DespatchLineReference_DebitNoteLineType_id",
        string="DespatchLineReference",
        help=(
            "A reference to a despatch line associated with this debit note " "line."
        ),
    )

    ubl23_ReceiptLineReference = fields.One2many(
        "ubl.23.receiptlinereference",
        "ubl23_ReceiptLineReference_DebitNoteLineType_id",
        string="ReceiptLineReference",
        help=("A reference to a receipt line associated with this debit note " "line."),
    )

    ubl23_BillingReference = fields.One2many(
        "ubl.23.billingreference",
        "ubl23_BillingReference_DebitNoteLineType_id",
        string="BillingReference",
        help=(
            "A reference to a billing document associated with this debit note" " line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_DebitNoteLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this debit note line."),
    )

    ubl23_PricingReference = fields.Many2one(
        comodel_name="ubl.23.pricingreference",
        string="PricingReference",
        help=(
            "A reference to pricing and item location information associated "
            "with this debit note line."
        ),
    )

    ubl23_Delivery = fields.One2many(
        "ubl.23.delivery",
        "ubl23_Delivery_DebitNoteLineType_id",
        string="A delivery associated with this debit note line",
        help="A delivery associated with this debit note line.",
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_DebitNoteLineType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "debit note line."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_DebitNoteLineType_id",
        string="An allowance or charge associated with this debit note",
        help="An allowance or charge associated with this debit note.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item associated with this debit note line",
        help="The item associated with this debit note line.",
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="The price of the item associated with this debit note line",
        help="The price of the item associated with this debit note line.",
    )

    ubl23_SubDebitNoteLine = fields.One2many(
        "ubl.23.subdebitnoteline",
        "ubl23_SubDebitNoteLine_DebitNoteLineType_id",
        string="SubDebitNoteLine",
        help=(
            "A recursive description of a debit note line subsidiary to this "
            "debit note line."
        ),
    )


class LineItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Line Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a line item.</ns1:Definition>
    <ns1:ObjectClass>Line Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.lineitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this line item",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this line item, assigned by the buyer.",
    )

    ubl23_SalesOrderID = fields.Char(
        string="An identifier for this line item (SalesOrderID)",
        xsd_type="SalesOrderIDType",
        help="An identifier for this line item, assigned by the seller.",
    )

    ubl23_UUID = fields.Char(
        string="A universally unique identifier for this line item",
        xsd_type="UUIDType",
        help="A universally unique identifier for this line item.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_LineStatusCode = fields.Char(
        string="LineStatusCode",
        xsd_type="LineStatusCodeType",
        help=(
            "A code signifying the status of this line item with respect to "
            "its original state."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of items associated with this line item",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
        help="The quantity of items associated with this line item.",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this line item",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this line item, including allowance charges "
            "but net of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this line item, including all allowances, "
            "charges and taxes."
        ),
    )

    ubl23_TotalTaxAmount = fields.Float(
        string="The total tax amount for this line item",
        xsd_type="TotalTaxAmountType",
        digits=(
            16,
            4,
        ),
        help="The total tax amount for this line item.",
    )

    ubl23_MinimumQuantity = fields.Float(
        string="The minimum quantity of the item associated with this line",
        xsd_type="MinimumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The minimum quantity of the item associated with this line.",
    )

    ubl23_MaximumQuantity = fields.Float(
        string="The maximum quantity of the item associated with this line",
        xsd_type="MaximumQuantityType",
        digits=(
            16,
            4,
        ),
        help="The maximum quantity of the item associated with this line.",
    )

    ubl23_MinimumBackorderQuantity = fields.Float(
        string="MinimumBackorderQuantity",
        xsd_type="MinimumBackorderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The minimum back order quantity of the item associated with this "
            "line (where back order is allowed)."
        ),
    )

    ubl23_MaximumBackorderQuantity = fields.Float(
        string="MaximumBackorderQuantity",
        xsd_type="MaximumBackorderQuantityType",
        digits=(
            16,
            4,
        ),
        help=(
            "The maximum back order quantity of the item associated with this "
            "line (where back order is allowed)."
        ),
    )

    ubl23_InspectionMethodCode = fields.Char(
        string="InspectionMethodCode",
        xsd_type="InspectionMethodCodeType",
        help=(
            "A code signifying the inspection requirements for the item "
            "associated with this line item."
        ),
    )

    ubl23_PartialDeliveryIndicator = fields.Boolean(
        string="An indicator that a partial delivery is allowed",
        help=(
            "An indicator that a partial delivery is allowed (true) or not " "(false)."
        ),
    )

    ubl23_BackOrderAllowedIndicator = fields.Boolean(
        string="An indicator that back order is allowed",
        help=("An indicator that back order is allowed (true) or not (false)."),
    )

    ubl23_AccountingCostCode = fields.Char(
        string="The buyer's accounting cost centre for this line item",
        xsd_type="AccountingCostCodeType",
        help=(
            "The buyer's accounting cost centre for this line item, expressed "
            "as a code."
        ),
    )

    ubl23_AccountingCost = fields.Char(
        string="AccountingCost",
        xsd_type="AccountingCostType",
        help=(
            "The buyer's accounting cost centre for this line item, expressed "
            "as text."
        ),
    )

    ubl23_WarrantyInformation = fields.Char(
        string="Text describing a warranty",
        xsd_type="WarrantyInformationType",
        help=(
            "Text describing a warranty (provided by WarrantyParty) for the "
            "good or service described in this line item."
        ),
    )

    ubl23_Delivery = fields.One2many(
        "ubl.23.delivery",
        "ubl23_Delivery_LineItemType_id",
        string="A delivery associated with this line item",
        help="A delivery associated with this line item.",
    )

    ubl23_DeliveryTerms = fields.Many2one(
        comodel_name="ubl.23.deliveryterms",
        string="DeliveryTerms",
        help=(
            "Terms and conditions of the delivery associated with this line " "item."
        ),
    )

    ubl23_OriginatorParty = fields.Many2one(
        comodel_name="ubl.23.originatorparty",
        string="OriginatorParty",
        help=("The party who originated the Order associated with this line " "item."),
    )

    ubl23_OrderedShipment = fields.One2many(
        "ubl.23.orderedshipment",
        "ubl23_OrderedShipment_LineItemType_id",
        string="An ordered shipment associated with this line item",
        help="An ordered shipment associated with this line item.",
    )

    ubl23_PricingReference = fields.Many2one(
        comodel_name="ubl.23.pricingreference",
        string="PricingReference",
        help=(
            "A reference to pricing and item location information associated "
            "with this line item."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_LineItemType_id",
        string="An allowance or charge associated with this line item",
        help="An allowance or charge associated with this line item.",
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="Price",
        help=("The price of the item of trade associated with this line item."),
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item",
        string="The item of trade associated with this line item",
        xsd_required=True,
        help="The item of trade associated with this line item.",
    )

    ubl23_SubLineItem = fields.One2many(
        "ubl.23.sublineitem",
        "ubl23_SubLineItem_LineItemType_id",
        string="SubLineItem",
        help=(
            "The subsidiary line items that constitute the main line item, "
            "such as in a bill of materials."
        ),
    )

    ubl23_WarrantyValidityPeriod = fields.Many2one(
        comodel_name="ubl.23.warrantyvalidityperiod",
        string="WarrantyValidityPeriod",
        help=(
            "The period during which the warranty associated with this line "
            "item is valid."
        ),
    )

    ubl23_WarrantyParty = fields.Many2one(
        comodel_name="ubl.23.warrantyparty",
        string="WarrantyParty",
        help=(
            "The party responsible for any warranty associated with this line " "item."
        ),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_LineItemType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this " "item."
        ),
    )

    ubl23_ItemPriceExtension = fields.Many2one(
        comodel_name="ubl.23.itempriceextension",
        string="The price extension",
        help=(
            "The price extension, calculated by multiplying the price per unit"
            " by the quantity of items."
        ),
    )

    ubl23_LineReference = fields.One2many(
        "ubl.23.linereference",
        "ubl23_LineReference_LineItemType_id",
        string="LineReference",
        help=("A reference to a line in a document associated with this line " "item."),
    )


class SalesItemType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Sales Item. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe information related to an item in a sales
    context</ns1:Definition>
    <ns1:ObjectClass>Sales Item</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.salesitemtype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SalesItemType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Quantity = fields.Float(
        string="The quantity the given information are related to",
        xsd_required=True,
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_ActivityProperty = fields.One2many(
        "ubl.23.activityproperty",
        "ubl23_ActivityProperty_SalesItemType_id",
        string="A class to describe the activity",
        help=(
            "A class to describe the activity (for example sales, movement, "
            "...) related to the item."
        ),
    )

    ubl23_TaxExclusivePrice = fields.One2many(
        "ubl.23.taxexclusiveprice",
        "ubl23_TaxExclusivePrice_SalesItemType_id",
        string="A price for this sales item",
        help="A price for this sales item, exclusive of tax.",
    )

    ubl23_TaxInclusivePrice = fields.One2many(
        "ubl.23.taxinclusiveprice",
        "ubl23_TaxInclusivePrice_SalesItemType_id",
        string="A price for this sales item (TaxInclusivePrice)",
        help="A price for this sales item, including tax.",
    )

    ubl23_Item = fields.Many2one(
        comodel_name="ubl.23.item", string="The sales item itself.", xsd_required=True
    )


class TelecommunicationsServiceType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Telecommunications Service.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe a telecommunications service (e.g., a
    telephone call or a video on demand service).</ns1:Definition>
    <ns1:ObjectClass>Telecommunications Service</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.telecommunicationsservicetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsServiceType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this telecommunications service",
        xsd_type="IDType",
        help="An identifier for this telecommunications service.",
    )

    ubl23_CallDate = fields.Date(
        string="In the case of a telephone call",
        xsd_required=True,
        help="In the case of a telephone call, the date of the call.",
    )

    ubl23_ServiceNumberCalled = fields.Char(
        string="In the case of a telephone call (ServiceNumberCalled)",
        xsd_required=True,
        xsd_type="ServiceNumberCalledType",
        help="In the case of a telephone call, the phone number called.",
    )

    ubl23_TelecommunicationsServiceCategory = fields.Char(
        string="The telecommunications category",
        xsd_type="TelecommunicationsServiceCategoryType",
        help="The telecommunications category, expressed as text.",
    )

    ubl23_TelecommunicationsServiceCategoryCode = fields.Char(
        string="TelecommunicationsServiceCategoryCode",
        xsd_type="TelecommunicationsServiceCategoryCodeType",
        help="The telecommunications category, expressed as a code.",
    )

    ubl23_MovieTitle = fields.Char(
        string="MovieTitle",
        xsd_type="MovieTitleType",
        help=("The title of a movie delivered via this telecommunications " "service."),
    )

    ubl23_RoamingPartnerName = fields.Char(
        string="Statement of the roaming partner name",
        xsd_type="RoamingPartnerNameType",
        help="Statement of the roaming partner name.",
    )

    ubl23_PayPerView = fields.Char(
        string="A pay",
        xsd_type="PayPerViewType",
        help=("A pay-per-view delivered via this telecommunications service."),
    )

    ubl23_Quantity = fields.Float(
        string="The number of calls.",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_TelecommunicationsServiceCall = fields.Char(
        string="The telecommunications call described as a text",
        xsd_type="TelecommunicationsServiceCallType",
    )

    ubl23_TelecommunicationsServiceCallCode = fields.Char(
        string="The telecommunications call described as a code",
        xsd_type="TelecommunicationsServiceCallCodeType",
    )

    ubl23_CallBaseAmount = fields.Float(
        string="The amount to be payed as the base for one call",
        xsd_type="CallBaseAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_CallExtensionAmount = fields.Float(
        string="The amount to be payed for the call",
        xsd_type="CallExtensionAmountType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_Price = fields.Many2one(
        comodel_name="ubl.23.price",
        string="The price for using the telecommunication service",
    )

    ubl23_Country = fields.Many2one(
        comodel_name="ubl.23.country",
        string="The country to which the service is provided",
        help=(
            "The country to which the service is provided. In case of a "
            "telephone call it is the country where the receiver is located."
        ),
    )

    ubl23_ExchangeRate = fields.One2many(
        "ubl.23.exchangerate",
        "ubl23_ExchangeRate_TelecommunicationsServiceType_id",
        string="A exchanges rates used in the pricing e",
        help=(
            "A exchanges rates used in the pricing e.g.. when phone calls has "
            "crossed border lines."
        ),
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_TelecommunicationsServiceType_id",
        string="AllowanceCharge",
        help=(
            "An allowance or charge that applies to the UtilityStatement as a " "whole."
        ),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_TelecommunicationsServiceType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "telecommunications service."
        ),
    )

    ubl23_CallDuty = fields.One2many(
        "ubl.23.callduty",
        "ubl23_CallDuty_TelecommunicationsServiceType_id",
        string="In the case of a telephone call (CallDuty)",
        help="In the case of a telephone call, a duty on this call.",
    )

    ubl23_TimeDuty = fields.One2many(
        "ubl.23.timeduty",
        "ubl23_TimeDuty_TelecommunicationsServiceType_id",
        string="A duty on a consumption of time.",
    )


class AlternativeLineItem(models.AbstractModel):
    _description = "AlternativeLineItem"
    _name = "ubl.23.alternativelineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "AlternativeLineItem"

    ubl23_AlternativeLineItem_QuotationLineType_id = fields.Many2one(
        comodel_name="ubl.23.quotationlinetype", xsd_implicit=True, ondelete="cascade"
    )


class BuyerProposedSubstituteLineItem(models.AbstractModel):
    _description = "BuyerProposedSubstituteLineItem"
    _name = "ubl.23.buyerproposedsubstitutelineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "BuyerProposedSubstituteLineItem"

    ubl23_BuyerProposedSubstituteLineItem_OrderLineType_id = fields.Many2one(
        comodel_name="ubl.23.orderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class ConsumptionLine(models.AbstractModel):
    _description = "ConsumptionLine"
    _name = "ubl.23.consumptionline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionLine"

    ubl23_ConsumptionLine_SupplierConsumptionType_id = fields.Many2one(
        comodel_name="ubl.23.supplierconsumptiontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class CreditNoteLine(models.AbstractModel):
    _description = "CreditNoteLine"
    _name = "ubl.23.creditnoteline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "CreditNoteLine"


class DebitNoteLine(models.AbstractModel):
    _description = "DebitNoteLine"
    _name = "ubl.23.debitnoteline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "DebitNoteLine"


class LineItem(models.AbstractModel):
    _description = "LineItem"
    _name = "ubl.23.lineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "LineItem"


class SalesItem(models.AbstractModel):
    _description = "SalesItem"
    _name = "ubl.23.salesitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SalesItem"

    ubl23_SalesItem_ActivityDataLineType_id = fields.Many2one(
        comodel_name="ubl.23.activitydatalinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )
    ubl23_SalesItem_ItemInformationRequestLineType_id = fields.Many2one(
        comodel_name="ubl.23.iteminformationrequestlinetype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SellerProposedSubstituteLineItem(models.AbstractModel):
    _description = "SellerProposedSubstituteLineItem"
    _name = "ubl.23.sellerproposedsubstitutelineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SellerProposedSubstituteLineItem"

    ubl23_SellerProposedSubstituteLineItem_OrderLineType_id = fields.Many2one(
        comodel_name="ubl.23.orderlinetype", xsd_implicit=True, ondelete="cascade"
    )
    ubl23_SellerProposedSubstituteLineItem_QuotationLineType_id = fields.Many2one(
        comodel_name="ubl.23.quotationlinetype", xsd_implicit=True, ondelete="cascade"
    )


class SellerSubstitutedLineItem(models.AbstractModel):
    _description = "SellerSubstitutedLineItem"
    _name = "ubl.23.sellersubstitutedlineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SellerSubstitutedLineItem"

    ubl23_SellerSubstitutedLineItem_OrderLineType_id = fields.Many2one(
        comodel_name="ubl.23.orderlinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubCreditNoteLine(models.AbstractModel):
    _description = "SubCreditNoteLine"
    _name = "ubl.23.subcreditnoteline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubCreditNoteLine"

    ubl23_SubCreditNoteLine_CreditNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.creditnotelinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubDebitNoteLine(models.AbstractModel):
    _description = "SubDebitNoteLine"
    _name = "ubl.23.subdebitnoteline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubDebitNoteLine"

    ubl23_SubDebitNoteLine_DebitNoteLineType_id = fields.Many2one(
        comodel_name="ubl.23.debitnotelinetype", xsd_implicit=True, ondelete="cascade"
    )


class SubLineItem(models.AbstractModel):
    _description = "SubLineItem"
    _name = "ubl.23.sublineitem"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubLineItem"

    ubl23_SubLineItem_LineItemType_id = fields.Many2one(
        comodel_name="ubl.23.lineitemtype", xsd_implicit=True, ondelete="cascade"
    )


class TelecommunicationsService(models.AbstractModel):
    _description = "TelecommunicationsService"
    _name = "ubl.23.telecommunicationsservice"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsService"

    ubl23_TelecommunicationsService_TelecommunicationsSupplyLineType_id = (
        fields.Many2one(
            comodel_name="ubl.23.telecommunicationssupplylinetype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class ActivityDataLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Activity Data Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to associate a time period and locations (activity
    data) with an item for inventory planning purposes.</ns1:Definition>
    <ns1:ObjectClass>Activity Data Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.activitydatalinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityDataLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this activity data line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this activity data line.",
    )

    ubl23_SupplyChainActivityTypeCode = fields.Char(
        string="A code signifying the type of supply chain activity",
        xsd_required=True,
        xsd_type="SupplyChainActivityTypeCodeType",
        help="A code signifying the type of supply chain activity.",
    )

    ubl23_BuyerCustomerParty = fields.Many2one(
        comodel_name="ubl.23.buyercustomerparty", string="The buyer of the item."
    )

    ubl23_SellerSupplierParty = fields.Many2one(
        comodel_name="ubl.23.sellersupplierparty", string="The seller of the item."
    )

    ubl23_ActivityPeriod = fields.Many2one(
        comodel_name="ubl.23.activityperiod",
        string="The period during which the activity is realized",
        help="The period during which the activity is realized.",
    )

    ubl23_ActivityOriginLocation = fields.Many2one(
        comodel_name="ubl.23.activityoriginlocation",
        string="ActivityOriginLocation",
        xsd_required=True,
        help=(
            "Either the location where the movement of goods is observed or "
            "the location from which the goods are moved."
        ),
    )

    ubl23_ActivityFinalLocation = fields.Many2one(
        comodel_name="ubl.23.activityfinallocation",
        string="The location to which the goods are moved",
        help="The location to which the goods are moved.",
    )

    ubl23_SalesItem = fields.One2many(
        "ubl.23.salesitem",
        "ubl23_SalesItem_ActivityDataLineType_id",
        string="Sales information for an item to which this line applies",
        help="Sales information for an item to which this line applies.",
    )


class ForecastLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Forecast Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>Detailed information about a particular Forecast Line within a
    Forecast Document</ns1:Definition>
    <ns1:ObjectClass>Forecast Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.forecastlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this forecast line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this forecast line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_FrozenDocumentIndicator = fields.Boolean(
        string="An indicator that the status of the forecast is modifiable",
        help=(
            "An indicator that the status of the forecast is modifiable (true)"
            " or not (false)."
        ),
    )

    ubl23_ForecastTypeCode = fields.Char(
        string="A code signifying the type of forecast",
        xsd_required=True,
        xsd_type="ForecastTypeCodeType",
        help=(
            "A code signifying the type of forecast. Examples: BASE "
            "PROMOTIONAL SEASONAL TOTAL"
        ),
    )

    ubl23_ForecastPeriod = fields.Many2one(
        comodel_name="ubl.23.forecastperiod",
        string="The period to which the forecast applies",
        help="The period to which the forecast applies.",
    )

    ubl23_SalesItem = fields.Many2one(
        comodel_name="ubl.23.salesitem",
        string="Sales information for the item to which this line applies",
        help="Sales information for the item to which this line applies.",
    )


class ForecastRevisionLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Forecast Revision Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Forecast Revision describing a
    revision to a line in a Forecast.</ns1:Definition>
    <ns1:ObjectClass>Forecast Revision Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.forecastrevisionlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastRevisionLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this forecast revision line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this forecast revision line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the revision to this line",
        xsd_type="DescriptionType",
        help="Text describing the revision to this line.",
    )

    ubl23_RevisedForecastLineID = fields.Char(
        string="An identifier for the revised forecast line",
        xsd_required=True,
        xsd_type="RevisedForecastLineIDType",
        help="An identifier for the revised forecast line.",
    )

    ubl23_SourceForecastIssueDate = fields.Date(
        string="SourceForecastIssueDate",
        xsd_required=True,
        help=(
            "The date on which the forecast modified by this revision was "
            "generated or created."
        ),
    )

    ubl23_AdjustmentReasonCode = fields.Char(
        string="AdjustmentReasonCode",
        xsd_type="AdjustmentReasonCodeType",
        help=(
            "A code signifying the reason for the adjustment specified in this"
            " forecast revision line."
        ),
    )

    ubl23_ForecastPeriod = fields.Many2one(
        comodel_name="ubl.23.forecastperiod",
        string="The period to which this forecast revision line applies",
        help="The period to which this forecast revision line applies.",
    )

    ubl23_SalesItem = fields.Many2one(
        comodel_name="ubl.23.salesitem",
        string="Sales information for the item to which this line applies",
        help="Sales information for the item to which this line applies.",
    )


class ItemInformationRequestLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Item Information Request Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an Item Information Request asking
    a trading partner for item information.</ns1:Definition>
    <ns1:ObjectClass>Item Information Request Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.iteminformationrequestlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemInformationRequestLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TimeFrequencyCode = fields.Char(
        string="TimeFrequencyCode",
        xsd_type="TimeFrequencyCodeType",
        help=(
            "A code signifying the frequency with which item information "
            "should be sent to the requester."
        ),
    )

    ubl23_SupplyChainActivityTypeCode = fields.Char(
        string="SupplyChainActivityTypeCode",
        xsd_type="SupplyChainActivityTypeCodeType",
        help=(
            "A code used to identify the type of supply chain activity about "
            "which information request is issued. Examples: CANCELED_ORDERS "
            "EMERGENCY_ORDERS ON_HAND ORDERS"
        ),
    )

    ubl23_ForecastTypeCode = fields.Char(
        string="ForecastTypeCode",
        xsd_type="ForecastTypeCodeType",
        help=(
            "The information request can be either about supply chain activity"
            " or about forecasts or about performance metrics, so it should be"
            " optional"
        ),
    )

    ubl23_PerformanceMetricTypeCode = fields.Char(
        string="A code signifying a measure of performance",
        xsd_type="PerformanceMetricTypeCodeType",
        help="A code signifying a measure of performance.",
    )

    ubl23_Period = fields.One2many(
        "ubl.23.period",
        "ubl23_Period_ItemInformationRequestLineType_id",
        string="A period for which this information is requested",
        help="A period for which this information is requested.",
    )

    ubl23_SalesItem = fields.One2many(
        "ubl.23.salesitem",
        "ubl23_SalesItem_ItemInformationRequestLineType_id",
        string="Sales information for the item to which this line applies",
        help="Sales information for the item to which this line applies.",
    )


class OrderLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Order Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in an order document (e.g., Order,
    Order Change, or Order Response) describing an item being
    ordered.</ns1:Definition>
    <ns1:ObjectClass>Order Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.orderlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_SubstitutionStatusCode = fields.Char(
        string="SubstitutionStatusCode",
        xsd_type="SubstitutionStatusCodeType",
        help=(
            "A code signifying the substitution status of the item on this "
            "order line. The order line may indicate that the substitute is "
            "proposed by the buyer (in Order) or by the seller (in Order "
            "Response) or that a substitution has been made by the seller (in "
            "Order Response)."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_LineItem = fields.Many2one(
        comodel_name="ubl.23.lineitem",
        string="The line item itself.",
        xsd_required=True,
    )

    ubl23_SellerProposedSubstituteLineItem = fields.One2many(
        "ubl.23.sellerproposedsubstitutelineitem",
        "ubl23_SellerProposedSubstituteLineItem_OrderLineType_id",
        string="In Order Response",
        help=(
            "In Order Response, a line item proposed by the seller describing "
            "a product that might substitute for the product described in this"
            " order line."
        ),
    )

    ubl23_SellerSubstitutedLineItem = fields.One2many(
        "ubl.23.sellersubstitutedlineitem",
        "ubl23_SellerSubstitutedLineItem_OrderLineType_id",
        string="In Order Response (SellerSubstitutedLineItem)",
        help=(
            "In Order Response, a line item that has replaced the original "
            "order line item. The specified quantity and pricing may differ "
            "from those in the original line item, but when a line item is "
            "substituted by the seller, it is assumed that other information, "
            "such as shipment details, will remain the same."
        ),
    )

    ubl23_BuyerProposedSubstituteLineItem = fields.One2many(
        "ubl.23.buyerproposedsubstitutelineitem",
        "ubl23_BuyerProposedSubstituteLineItem_OrderLineType_id",
        string="BuyerProposedSubstituteLineItem",
        help=(
            "A description of an item proposed by the buyer as a possible "
            "alternative to the item associated with this order line."
        ),
    )

    ubl23_CatalogueLineReference = fields.Many2one(
        comodel_name="ubl.23.cataloguelinereference",
        string="CatalogueLineReference",
        help=("A reference to a catalogue line associated with this order line."),
    )

    ubl23_QuotationLineReference = fields.Many2one(
        comodel_name="ubl.23.quotationlinereference",
        string="QuotationLineReference",
        help=("A reference to a quotation line associated with this order line."),
    )

    ubl23_OrderLineReference = fields.One2many(
        "ubl.23.orderlinereference",
        "ubl23_OrderLineReference_OrderLineType_id",
        string="A reference to another order line",
        help=(
            "A reference to another order line, such as in a replacement order"
            " or another line on the same order that is related."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_OrderLineType_id",
        string="A reference to a document associated with this order line",
        help="A reference to a document associated with this order line.",
    )


class QuotationLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Quotation Line. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Quotation.</ns1:Definition>
    <ns1:ObjectClass>Quotation Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.quotationlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuotationLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this quotation line",
        xsd_type="IDType",
        help="An identifier for this quotation line.",
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_Quantity = fields.Float(
        string="The quantity of the item quoted.",
        xsd_type="QuantityType",
        digits=(
            16,
            4,
        ),
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="The total amount for this quotation line",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this quotation line, including allowance "
            "charges but net of taxes."
        ),
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="TaxInclusiveLineExtensionAmount",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this quotation line, including all "
            "allowances, charges and taxes."
        ),
    )

    ubl23_TotalTaxAmount = fields.Float(
        string="The total tax amount for this quotation line",
        xsd_type="TotalTaxAmountType",
        digits=(
            16,
            4,
        ),
        help="The total tax amount for this quotation line.",
    )

    ubl23_RequestForQuotationLineID = fields.Char(
        string="RequestForQuotationLineID",
        xsd_type="RequestForQuotationLineIDType",
        help=(
            "An identifier for the line in the Request for Quotation to which "
            "this line is a response."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_QuotationLineType_id",
        string="DocumentReference",
        help=("A reference to a document associated with this quotation line."),
    )

    ubl23_LineItem = fields.Many2one(
        comodel_name="ubl.23.lineitem",
        string="The item that is the subject of this quotation line",
        xsd_required=True,
        help="The item that is the subject of this quotation line.",
    )

    ubl23_SellerProposedSubstituteLineItem = fields.One2many(
        "ubl.23.sellerproposedsubstitutelineitem",
        "ubl23_SellerProposedSubstituteLineItem_QuotationLineType_id",
        string="SellerProposedSubstituteLineItem",
        help=(
            "An item proposed by the seller as a substitute for the item that "
            "is the subject of this quotation line."
        ),
    )

    ubl23_AlternativeLineItem = fields.One2many(
        "ubl.23.alternativelineitem",
        "ubl23_AlternativeLineItem_QuotationLineType_id",
        string="AlternativeLineItem",
        help=(
            "An item proposed by the seller as an alternative to the item that"
            " is the subject of this quotation line."
        ),
    )

    ubl23_RequestLineReference = fields.Many2one(
        comodel_name="ubl.23.requestlinereference",
        string="RequestLineReference",
        help=(
            "A reference to the line in the Request for Quotation to which "
            "this line is a response."
        ),
    )


class RequestForQuotationLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Request For Quotation Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to define a line in a Request for
    Quotation.</ns1:Definition>
    <ns1:ObjectClass>Request For Quotation Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.requestforquotationlinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestForQuotationLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this line in the request for quotation",
        xsd_type="IDType",
        help="An identifier for this line in the request for quotation.",
    )

    ubl23_UUID = fields.Char(
        string="UUID",
        xsd_type="UUIDType",
        help=(
            "A universally unique identifier for this line in the request for "
            "quotation."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_OptionalLineItemIndicator = fields.Boolean(
        string="An indication whether this line is optional",
        help=(
            "An indication whether this line is optional (true) or not (false)"
            " for purposes of this request for quotation."
        ),
    )

    ubl23_PrivacyCode = fields.Char(
        string="PrivacyCode",
        xsd_type="PrivacyCodeType",
        help=(
            "A code signifying the level of confidentiality of this request "
            "for quotation line."
        ),
    )

    ubl23_SecurityClassificationCode = fields.Char(
        string="SecurityClassificationCode",
        xsd_type="SecurityClassificationCodeType",
        help=(
            "A code signifying the security classification of this request for"
            " quotation line."
        ),
    )

    ubl23_DocumentReference = fields.One2many(
        "ubl.23.documentreference",
        "ubl23_DocumentReference_RequestForQuotationLineType_id",
        string="A document associated with this request for quotation line",
        help="A document associated with this request for quotation line.",
    )

    ubl23_LineItem = fields.Many2one(
        comodel_name="ubl.23.lineitem",
        string="LineItem",
        xsd_required=True,
        help=("A description of the item for which a quotation is requested."),
    )


class TelecommunicationsSupplyLineType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Telecommunications Supply Line.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class that outlines the telecommunication supply in
    details</ns1:Definition>
    <ns1:ObjectClass>Telecommunications Supply Line</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.telecommunicationssupplylinetype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsSupplyLineType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ID = fields.Char(
        string="An identifier for this telecommunications supply line",
        xsd_required=True,
        xsd_type="IDType",
        help="An identifier for this telecommunications supply line.",
    )

    ubl23_PhoneNumber = fields.Char(
        string="PhoneNumber",
        xsd_required=True,
        xsd_type="PhoneNumberType",
        help="The phone number used for this telecommunication supply line",
    )

    ubl23_Description = fields.Char(
        string="The description of the telecommunication supply line",
        xsd_type="DescriptionType",
    )

    ubl23_LineExtensionAmount = fields.Float(
        string="LineExtensionAmount",
        xsd_type="LineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help="An amount specifying the cost of this telecommunication line",
    )

    ubl23_TaxInclusiveLineExtensionAmount = fields.Float(
        string="The total amount for this telecommunications supply line",
        xsd_type="TaxInclusiveLineExtensionAmountType",
        digits=(
            16,
            4,
        ),
        help=(
            "The total amount for this telecommunications supply line, "
            "including all allowances, charges and taxes."
        ),
    )

    ubl23_ExchangeRate = fields.One2many(
        "ubl.23.exchangerate",
        "ubl23_ExchangeRate_TelecommunicationsSupplyLineType_id",
        string="Exchanges rates used to calculate the amount for this line",
        help="Exchanges rates used to calculate the amount for this line.",
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_TelecommunicationsSupplyLineType_id",
        string="AllowanceCharge",
        help=(
            "An allowance or charge that applies to this telecommunication "
            "supply line."
        ),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_TelecommunicationsSupplyLineType_id",
        string="TaxTotal",
        help=(
            "A total amount of taxes of a particular kind applicable to this "
            "telecommunications supply line"
        ),
    )

    ubl23_TelecommunicationsService = fields.One2many(
        "ubl.23.telecommunicationsservice",
        "ubl23_TelecommunicationsService_TelecommunicationsSupplyLineType_id",
        string="A telecommunications service (e.g.",
        help="A telecommunications service (e.g., a telephone call).",
    )


class ActivityDataLine(models.AbstractModel):
    _description = "ActivityDataLine"
    _name = "ubl.23.activitydataline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ActivityDataLine"


class ForecastLine(models.AbstractModel):
    _description = "ForecastLine"
    _name = "ubl.23.forecastline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastLine"


class ForecastRevisionLine(models.AbstractModel):
    _description = "ForecastRevisionLine"
    _name = "ubl.23.forecastrevisionline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ForecastRevisionLine"


class ItemInformationRequestLine(models.AbstractModel):
    _description = "ItemInformationRequestLine"
    _name = "ubl.23.iteminformationrequestline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ItemInformationRequestLine"


class OrderLine(models.AbstractModel):
    _description = "OrderLine"
    _name = "ubl.23.orderline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "OrderLine"


class QuotationLine(models.AbstractModel):
    _description = "QuotationLine"
    _name = "ubl.23.quotationline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "QuotationLine"


class RequestForQuotationLine(models.AbstractModel):
    _description = "RequestForQuotationLine"
    _name = "ubl.23.requestforquotationline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "RequestForQuotationLine"


class SupplyChainActivityDataLine(models.AbstractModel):
    _description = "SupplyChainActivityDataLine"
    _name = "ubl.23.supplychainactivitydataline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplyChainActivityDataLine"


class TelecommunicationsSupplyLine(models.AbstractModel):
    _description = "TelecommunicationsSupplyLine"
    _name = "ubl.23.telecommunicationssupplyline"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsSupplyLine"

    ubl23_TelecommunicationsSupplyLine_TelecommunicationsSupplyType_id = (
        fields.Many2one(
            comodel_name="ubl.23.telecommunicationssupplytype",
            xsd_implicit=True,
            ondelete="cascade",
        )
    )


class TelecommunicationsSupplyType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Telecommunications Supply.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class describing the supply of a telecommunication service,
    e.g., providing telephone calls.</ns1:Definition>
    <ns1:ObjectClass>Telecommunications Supply</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.telecommunicationssupplytype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsSupplyType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_TelecommunicationsSupplyType = fields.Char(
        string="The type of telecommunications supply",
        xsd_type="TelecommunicationsSupplyTypeType",
        help="The type of telecommunications supply, expressed as text.",
    )

    ubl23_TelecommunicationsSupplyTypeCode = fields.Char(
        string="TelecommunicationsSupplyTypeCode",
        xsd_type="TelecommunicationsSupplyTypeCodeType",
        help="The type of telecommunications supply, expressed as a code.",
    )

    ubl23_PrivacyCode = fields.Char(
        string="PrivacyCode",
        xsd_required=True,
        xsd_type="PrivacyCodeType",
        help=(
            "A code signifying the level of confidentiality of this "
            "information for this telecommunication supply."
        ),
    )

    ubl23_Description = fields.Char(
        string="Text describing the telecommunications supply",
        xsd_type="DescriptionType",
        help="Text describing the telecommunications supply.",
    )

    ubl23_TotalAmount = fields.Float(
        string="TotalAmount",
        xsd_type="TotalAmountType",
        digits=(
            16,
            4,
        ),
        help=("The total amount associated with this telecommunications supply."),
    )

    ubl23_TelecommunicationsSupplyLine = fields.One2many(
        "ubl.23.telecommunicationssupplyline",
        "ubl23_TelecommunicationsSupplyLine_TelecommunicationsSupplyType_id",
        string="Outlines the provided telecommunication supply",
    )


class TelecommunicationsSupply(models.AbstractModel):
    _description = "TelecommunicationsSupply"
    _name = "ubl.23.telecommunicationssupply"
    _inherit = "spec.mixin.ubl"
    _binding_type = "TelecommunicationsSupply"


class ConsumptionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Consumption. Details</ns1:DictionaryEntryName>
    <ns1:Definition>A class to describe the consumption of a
    utility.</ns1:Definition>
    <ns1:ObjectClass>Consumption</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.consumptiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "ConsumptionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_UtilityStatementTypeCode = fields.Char(
        string="UtilityStatementTypeCode",
        xsd_type="UtilityStatementTypeCodeType",
        help=(
            "A code identifying the type of the Utility Statement required for"
            " this consumption. Explains the kind of utility the statement is "
            "about, e.g.. gas, electricity, telephone"
        ),
    )

    ubl23_MainPeriod = fields.Many2one(
        comodel_name="ubl.23.mainperiod", string="The period of consumption."
    )

    ubl23_AllowanceCharge = fields.One2many(
        "ubl.23.allowancecharge",
        "ubl23_AllowanceCharge_ConsumptionType_id",
        string="AllowanceCharge",
        help=("An allowance or charges that may apply with this consumption."),
    )

    ubl23_TaxTotal = fields.One2many(
        "ubl.23.taxtotal",
        "ubl23_TaxTotal_ConsumptionType_id",
        string="TaxTotal",
        help=("The total of taxes for each tax type covering the consumption."),
    )

    ubl23_EnergyWaterSupply = fields.Many2one(
        comodel_name="ubl.23.energywatersupply",
        string="The details of any energy or water consumption",
        help="The details of any energy or water consumption.",
    )

    ubl23_TelecommunicationsSupply = fields.Many2one(
        comodel_name="ubl.23.telecommunicationssupply",
        string="The details of any telecommunications consumption",
        help="The details of any telecommunications consumption.",
    )

    ubl23_LegalMonetaryTotal = fields.Many2one(
        comodel_name="ubl.23.legalmonetarytotal",
        string="The total amount payable on this consumption",
        xsd_required=True,
        help=(
            "The total amount payable on this consumption, including any "
            "allowances, charges, or taxes."
        ),
    )


class Consumption(models.AbstractModel):
    _description = "Consumption"
    _name = "ubl.23.consumption"
    _inherit = "spec.mixin.ubl"
    _binding_type = "Consumption"


class SupplierConsumptionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Supplier Consumption.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The consumption in case the consumption is for one and only one
    supplier.</ns1:Definition>
    <ns1:ObjectClass>Supplier Consumption</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.supplierconsumptiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplierConsumptionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_Description = fields.Char(
        string="Free",
        xsd_type="DescriptionType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_UtilitySupplierParty = fields.Many2one(
        comodel_name="ubl.23.utilitysupplierparty",
        string="The party supplying the utility.",
    )

    ubl23_UtilityCustomerParty = fields.Many2one(
        comodel_name="ubl.23.utilitycustomerparty", string="The utility customer."
    )

    ubl23_Consumption = fields.Many2one(
        comodel_name="ubl.23.consumption",
        string="The consumption regarding this supplier",
        xsd_required=True,
    )

    ubl23_Contract = fields.Many2one(
        comodel_name="ubl.23.contract",
        string="Contract",
        help=("A contract setting forth conditions regulating the consumption."),
    )

    ubl23_ConsumptionLine = fields.One2many(
        "ubl.23.consumptionline",
        "ubl23_ConsumptionLine_SupplierConsumptionType_id",
        string="The consumption of a utility product",
        help="The consumption of a utility product.",
    )


class SupplierConsumption(models.AbstractModel):
    _description = "SupplierConsumption"
    _name = "ubl.23.supplierconsumption"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SupplierConsumption"

    ubl23_SupplierConsumption_SubscriberConsumptionType_id = fields.Many2one(
        comodel_name="ubl.23.subscriberconsumptiontype",
        xsd_implicit=True,
        ondelete="cascade",
    )


class SubscriberConsumptionType(models.AbstractModel):
    """<ns1:Component xmlns:ns1="urn:un:unece:uncefact:documentation:2">
    <ns1:ComponentType>ABIE</ns1:ComponentType>
    <ns1:DictionaryEntryName>Subscriber Consumption.
    Details</ns1:DictionaryEntryName>
    <ns1:Definition>The consumption for a specific party for given consumption
    point provided by a numbers of suppliers. An enterprise can have one
    utility statement for several parties (e.g. a ministry of defence receiving
    a telephone bill). In this way each subscriber consumption represent a sub
    utility statement.</ns1:Definition>
    <ns1:ObjectClass>Subscriber Consumption</ns1:ObjectClass>
    </ns1:Component>"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "ubl.23.subscriberconsumptiontype"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubscriberConsumptionType"

    ubl23_UBLExtensions = fields.Many2one(
        comodel_name="ubl.23.ublextensions",
        string="A container for extensions foreign to the document",
        help="A container for extensions foreign to the document.",
    )

    ubl23_ConsumptionID = fields.Char(
        string="The identifier tor this specification",
        xsd_type="ConsumptionIDType",
        help="The identifier tor this specification.",
    )

    ubl23_SpecificationTypeCode = fields.Char(
        string="The code which specifies the type of this specification",
        xsd_type="SpecificationTypeCodeType",
        help=(
            "The code which specifies the type of this specification, e.g. an "
            "on account specification or the yearly specification."
        ),
    )

    ubl23_Note = fields.Char(
        string="Free",
        xsd_type="NoteType",
        help=(
            "Free-form text conveying information that is not contained "
            "explicitly in other structures."
        ),
    )

    ubl23_TotalMeteredQuantity = fields.Float(
        string="The total quantity consumed",
        xsd_type="TotalMeteredQuantityType",
        digits=(
            16,
            4,
        ),
        help=("The total quantity consumed, as calculated from meter readings."),
    )

    ubl23_SubscriberParty = fields.Many2one(
        comodel_name="ubl.23.subscriberparty",
        string="The party subscribing to the utility",
        help="The party subscribing to the utility.",
    )

    ubl23_UtilityConsumptionPoint = fields.Many2one(
        comodel_name="ubl.23.utilityconsumptionpoint",
        string="The point at which the utility is consumed",
        xsd_required=True,
        help="The point at which the utility is consumed.",
    )

    ubl23_OnAccountPayment = fields.One2many(
        "ubl.23.onaccountpayment",
        "ubl23_OnAccountPayment_SubscriberConsumptionType_id",
        string="The planned prepayments",
        help=("The planned prepayments (on account) regarding this subscription."),
    )

    ubl23_Consumption = fields.Many2one(
        comodel_name="ubl.23.consumption",
        string="Consumption",
        help=(
            "The consumption in case the consumption is from one and only one "
            "supplier."
        ),
    )

    ubl23_SupplierConsumption = fields.One2many(
        "ubl.23.supplierconsumption",
        "ubl23_SupplierConsumption_SubscriberConsumptionType_id",
        string="SupplierConsumption",
        help=(
            "The consumption in case the consumption is from more than one " "supplier."
        ),
    )


class SubscriberConsumption(models.AbstractModel):
    _description = "SubscriberConsumption"
    _name = "ubl.23.subscriberconsumption"
    _inherit = "spec.mixin.ubl"
    _binding_type = "SubscriberConsumption"

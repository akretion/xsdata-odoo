import os
from pathlib import Path

from click.testing import CliRunner
from xsdata.cli import cli
from xsdata.models.config import GeneratorConfig
from xsdata.utils.testing import ClassFactory
from xsdata.utils.testing import FactoryTestCase

from xsdata_odoo.generator import OdooGenerator


class OdooGeneratorTests(FactoryTestCase):
    def setUp(self):
        super().setUp()
        config = GeneratorConfig()
        self.generator = OdooGenerator(config)

    def test_render(self):
        if os.environ.get("SCHEMA"):
            del os.environ["SCHEMA"]
        if os.environ.get("VERSION"):
            del os.environ["VERSION"]

        classes = [
            ClassFactory.elements(2, package="foo"),
            ClassFactory.elements(3, package="foo"),
        ]

        iterator = self.generator.render(classes)

        actual = [(out.path, out.title, out.source) for out in iterator]
        self.assertEqual(1, len(actual))
        self.assertEqual(3, len(actual[0]))
        self.assertIsInstance(actual[0][0], Path)
        self.assertTrue(actual[0][0].is_absolute())
        self.assertEqual("foo.tests", actual[0][1])
        self.assertEqual(
            str(Path("foo/tests.py")), str(actual[0][0].relative_to(Path.cwd()))
        )

        expected = (
"""# Copyright 2022 Akretion - RaphaÃ«l Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

__NAMESPACE__ = "xsdata"


class ClassB(models.AbstractModel):
    _description = "class_B"
    _name = "spec.10.classb"
    _inherit = "spec.mixin.spec"
    _binding_type = "ClassB"

    spec10_attr_B = fields.Char(string="attr_B")

    spec10_attr_C = fields.Char(string="attr_C")


class ClassC(models.AbstractModel):
    _description = "class_C"
    _name = "spec.10.classc"
    _inherit = "spec.mixin.spec"
    _binding_type = "ClassC"

    spec10_attr_D = fields.Char(string="attr_D")

    spec10_attr_E = fields.Char(string="attr_E")

    spec10_attr_F = fields.Char(string="attr_F")
""")
        self.assertEqual(expected, actual[0][2])


    def test_complete_po(self):
        if os.environ.get("SCHEMA"):
            del os.environ["SCHEMA"]
        if os.environ.get("VERSION"):
            del os.environ["VERSION"]

        runner = CliRunner()
        schema = Path(__file__).parent.joinpath("fixtures/po/po.xsd")
        os.chdir(Path(__file__).parent.parent)

        result = runner.invoke(
            cli,
            [
                str(schema),
                "--package",
                "generated.po.models",
                "--structure-style=single-package",
                "--output",
                "odoo",
#                "--config",
#                "tests/fixtures/odoo.conf.xml",
            ],
            catch_exceptions=True,
        )

        self.assertIsNone(result.exception)
        expected = "to be read 1"
        generated = "to be read 2"
        with open("tests/fixtures/po/models.py") as f:
            expected = f.read()
        with open("generated/po/models.py") as f:
            generated = f.read()
        self.assertEqual(expected, generated)

    def test_complete_nfe(self):
        os.environ["SCHEMA"] = "nfe"
        os.environ["VERSION"] = "40"

        runner = CliRunner()
        schema = Path(__file__).parent.joinpath("fixtures/nfe/leiauteNFe_v4.00.xsd")
        os.chdir(Path(__file__).parent.parent)

        result = runner.invoke(
            cli,
            [
                str(schema),
                "--package",
                "generated.nfe.v4_0.models",
                "--structure-style=single-package",
                "--output",
                "odoo",
#                "--config",
#                "tests/fixtures/odoo.conf.xml",
            ],
            catch_exceptions=True,
        )

        self.assertIsNone(result.exception)
        expected = "to be read 1"
        generated = "to be read 2"
        with open("tests/fixtures/nfe/models.py") as f:
            expected = f.read()
        with open("generated/nfe/v4_0/models.py") as f:
            generated = f.read()
        self.assertEqual(expected, generated)


